# yamllint disable
# rule-set version: v1.3.19
# yamllint enable
---
rules:
- id: "eslint.detect-buffer-noassert-1"
  languages:
  - "javascript"
  - "typescript"
  message: |
    Detected usage of noassert in Buffer API, which allows the offset the be beyond the
    end of the buffer. This could result in writing or reading beyond the end of the buffer.
  pattern-either:
  - pattern: "$OBJ.readUInt8(..., true)"
  - pattern: "$OBJ.readUInt16LE(..., true)"
  - pattern: "$OBJ.readUInt16BE(..., true)"
  - pattern: "$OBJ.readUInt32LE(..., true)"
  - pattern: "$OBJ.readUInt32BE(..., true)"
  - pattern: "$OBJ.readInt8(..., true)"
  - pattern: "$OBJ.readInt16LE(..., true)"
  - pattern: "$OBJ.readInt16BE(..., true)"
  - pattern: "$OBJ.readInt32LE(..., true)"
  - pattern: "$OBJ.readInt32BE(..., true)"
  - pattern: "$OBJ.readFloatLE(..., true)"
  - pattern: "$OBJ.readFloatBE(..., true)"
  - pattern: "$OBJ.readDoubleLE(..., true)"
  - pattern: "$OBJ.readDoubleBE(..., true)"
  - pattern: "$OBJ.writeUInt8(..., true)"
  - pattern: "$OBJ.writeUInt16LE(..., true)"
  - pattern: "$OBJ.writeUInt16BE(..., true)"
  - pattern: "$OBJ.writeUInt32LE(..., true)"
  - pattern: "$OBJ.writeUInt32BE(..., true)"
  - pattern: "$OBJ.writeInt8(..., true)"
  - pattern: "$OBJ.writeInt16LE(..., true)"
  - pattern: "$OBJ.writeInt16BE(..., true)"
  - pattern: "$OBJ.writeInt32LE(..., true)"
  - pattern: "$OBJ.writeInt32BE(..., true)"
  - pattern: "$OBJ.writeFloatLE(..., true)"
  - pattern: "$OBJ.writeFloatBE(..., true)"
  - pattern: "$OBJ.writeDoubleLE(..., true)"
  - pattern: "$OBJ.writeDoubleBE(..., true)"
  severity: "WARNING"
  metadata:
    shortDescription: "Improper Restriction of Operations within the Bounds of a Memory
      Buffer"
    cwe: "CWE-119"
    category: "security"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js"
    primary_identifier: "eslint.detect-buffer-noassert"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-buffer-noassert"
      type: "eslint_rule_id"
      value: "detect-buffer-noassert"
- id: "eslint.detect-new-buffer-1"
  languages:
  - "javascript"
  - "typescript"
  patterns:
  - patterns:
    - pattern-not-inside: |-
        require("safe-buffer")
        ...
    - pattern-not-inside: |-
        import { Buffer } from "safe-buffer"
        ...
    - pattern-inside: |-
        function $FUNC(..., $X, ...) { ... }
    - pattern: "new Buffer($X,...)"
  - pattern-not: |
      new Buffer("...",...)
  - pattern-not: |
      new Buffer([...] , ...)
  message: |
    Detects instances of new Buffer(argument) where argument is any non-literal value which could
    cause memory leak. Recommended usage is `Buffer.from()` or `Buffer.alloc()`.
  metadata:
    shortDescription: "Memory leak"
    cwe: "CWE-401"
    category: "security"
    source-rule-url: "https://github.com/eslint-community/eslint-plugin-security/blob/main/rules/detect-new-buffer.js"
    primary_identifier: "eslint.detect-new-buffer"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-new-buffer"
      type: "eslint_rule_id"
      value: "detect-new-buffer"
  severity: "WARNING"
- id: "eslint.detect-no-csrf-before-method-override-1"
  languages:
  - "javascript"
  - "typescript"
  message: |
    Detected use of express.csrf() middleware before express.methodOverride(). This can
    allow GET requests (which are not checked by csrf) to turn into POST requests later.
  metadata:
    cwe: "CWE-352"
    references:
    - "https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md"
    shortDescription: "Cross-Site Request Forgery (CSRF)"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-no-csrf-before-method-override.js"
    primary_identifier: "eslint.detect-no-csrf-before-method-override"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-no-csrf-before-method-override"
      type: "eslint_rule_id"
      value: "detect-no-csrf-before-method-override"
  pattern: |
    express.csrf();
    ...
    express.methodOverride();
  severity: "WARNING"
- id: "eslint.detect-non-literal-regexp-1"
  languages:
  - "javascript"
  - "typescript"
  message: |
    RegExp() called with a variable, this might allow an attacker to DOS your application with a
    long-running regular expression.
  metadata:
    cwe: "CWE-185"
    shortDescription: "Incorrect Regular Expression"
    primary_identifier: "eslint.detect-non-literal-regexp"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-non-literal-regexp"
      type: "eslint_rule_id"
      value: "detect-non-literal-regexp"
  patterns:
  - pattern: |
      new RegExp(...)
  - pattern-not: |
      new RegExp("...", ...)
  severity: "WARNING"
- id: "eslint.detect-eval-with-expression-1"
  languages:
  - "javascript"
  - "typescript"
  message: |
    Detected eval(variable), which could allow a malicious actor to run arbitrary code.
  metadata:
    cwe: "CWE-95"
    owasp: "A1:2017-Injection"
    shortDescription: "Improper Neutralization of Directives in Dynamically Evaluated
      Code ('Eval Injection')"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js"
    primary_identifier: "eslint.detect-eval-with-expression"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-eval-with-expression"
      type: "eslint_rule_id"
      value: "detect-eval-with-expression"
  patterns:
  - pattern: "eval($OBJ)"
  - pattern-not: "eval(\"...\")"
  severity: "WARNING"
- id: "eslint.detect-child-process-1"
  languages:
  - "javascript"
  - "typescript"
  message: |
    Detected non-literal calls to child_process.exec(). This could lead to a command
    injection vulnerability.
  metadata:
    cwe: "CWE-95"
    owasp: "A1:2017-Injection"
    shortDescription: "Improper Neutralization of Directives in Dynamically Evaluated
      Code ('Eval Injection')"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js"
    primary_identifier: "eslint.detect-child-process"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-child-process"
      type: "eslint_rule_id"
      value: "detect-child-process"
  patterns:
  - pattern: "child_process.exec(...)"
  - pattern-not: "child_process.exec('...')"
  severity: "WARNING"
- id: "eslint.detect-non-literal-fs-filename-1"
  languages:
  - "typescript"
  - "javascript"
  message: |
    A variable is present in the filename argument of fs calls, this might allow an attacker to
    access anything on your system.
  metadata:
    cwe: "CWE-22"
    shortDescription: "Improper Limitation of a Pathname to a Restricted Directory
      ('Path Traversal')"
    primary_identifier: "eslint.detect-non-literal-fs-filename"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-non-literal-fs-filename"
      type: "eslint_rule_id"
      value: "detect-non-literal-fs-filename"
  patterns:
  - pattern-not: "$MOD.appendFile(\"...\", ...)"
  - pattern-not: "$MOD.appendFileSync(\"...\", ...)"
  - pattern-not: "$MOD.chmod(\"...\", ...)"
  - pattern-not: "$MOD.chmodSync(\"...\", ...)"
  - pattern-not: "$MOD.chown(\"...\", ...)"
  - pattern-not: "$MOD.chownSync(\"...\", ...)"
  - pattern-not: "$MOD.createReadStream(\"...\", ...)"
  - pattern-not: "$MOD.createWriteStream(\"...\", ...)"
  - pattern-not: "$MOD.exists(\"...\", ...)"
  - pattern-not: "$MOD.existsSync(\"...\", ...)"
  - pattern-not: "$MOD.lchmod(\"...\", ...)"
  - pattern-not: "$MOD.lchmodSync(\"...\", ...)"
  - pattern-not: "$MOD.lchown(\"...\", ...)"
  - pattern-not: "$MOD.lchownSync(\"...\", ...)"
  - pattern-not: "$MOD.link(\"...\", \"...\", ...)"
  - pattern-not: "$MOD.linkSync(\"...\", \"...\", ...)"
  - pattern-not: "$MOD.lstat(\"...\", ...)"
  - pattern-not: "$MOD.lstatSync(\"...\", ...)"
  - pattern-not: "$MOD.mkdir(\"...\", ...)"
  - pattern-not: "$MOD.mkdirSync(\"...\", ...)"
  - pattern-not: "$MOD.open(\"...\", ...)"
  - pattern-not: "$MOD.openSync(\"...\", ...)"
  - pattern-not: "$MOD.readdir(\"...\", ...)"
  - pattern-not: "$MOD.readdirSync(\"...\", ...)"
  - pattern-not: "$MOD.readFile(\"...\", ...)"
  - pattern-not: "$MOD.readFileSync(\"...\", ...)"
  - pattern-not: "$MOD.readlink(\"...\", ...)"
  - pattern-not: "$MOD.readlinkSync(\"...\", ...)"
  - pattern-not: "$MOD.realpath(\"...\", ...)"
  - pattern-not: "$MOD.realpathSync(\"...\", ...)"
  - pattern-not: "$MOD.rename(\"...\", \"...\", ...)"
  - pattern-not: "$MOD.renameSync(\"...\", \"...\", ...)"
  - pattern-not: "$MOD.rmdir(\"...\", ...)"
  - pattern-not: "$MOD.rmdirSync(\"...\", ...)"
  - pattern-not: "$MOD.stat(\"...\", ...)"
  - pattern-not: "$MOD.statSync(\"...\", ...)"
  - pattern-not: "$MOD.symlink(\"...\", \"...\", ...)"
  - pattern-not: "$MOD.symlinkSync(\"...\", \"...\", ...)"
  - pattern-not: "$MOD.truncate(\"...\", ...)"
  - pattern-not: "$MOD.truncateSync(\"...\", ...)"
  - pattern-not: "$MOD.unlink(\"...\", ...)"
  - pattern-not: "$MOD.unlinkSync(\"...\", ...)"
  - pattern-not: "$MOD.unwatchFile(\"...\", ...)"
  - pattern-not: "$MOD.utimes(\"...\", ...)"
  - pattern-not: "$MOD.utimesSync(\"...\", ...)"
  - pattern-not: "$MOD.watch(\"...\", ...)"
  - pattern-not: "$MOD.watchFile(\"...\", ...)"
  - pattern-not: "$MOD.writeFile(\"...\", ...)"
  - pattern-not: "$MOD.writeFileSync(\"...\", ...)"
  - pattern-either:
    - pattern: "$MOD.appendFile(...)"
    - pattern: "$MOD.appendFileSync(...)"
    - pattern: "$MOD.chmod(...)"
    - pattern: "$MOD.chmodSync(...)"
    - pattern: "$MOD.chown(...)"
    - pattern: "$MOD.chownSync(...)"
    - pattern: "$MOD.createReadStream(...)"
    - pattern: "$MOD.createWriteStream(...)"
    - pattern: "$MOD.exists(...)"
    - pattern: "$MOD.existsSync(...)"
    - pattern: "$MOD.lchmod(...)"
    - pattern: "$MOD.lchmodSync(...)"
    - pattern: "$MOD.lchown(...)"
    - pattern: "$MOD.lchownSync(...)"
    - pattern: "$MOD.link(...)"
    - pattern: "$MOD.linkSync(...)"
    - pattern: "$MOD.lstat(...)"
    - pattern: "$MOD.lstatSync(...)"
    - pattern: "$MOD.mkdir(...)"
    - pattern: "$MOD.mkdirSync(...)"
    - pattern: "$MOD.open(...)"
    - pattern: "$MOD.openSync(...)"
    - pattern: "$MOD.readdir(...)"
    - pattern: "$MOD.readdirSync(...)"
    - pattern: "$MOD.readFile(...)"
    - pattern: "$MOD.readFileSync(...)"
    - pattern: "$MOD.readlink(...)"
    - pattern: "$MOD.readlinkSync(...)"
    - pattern: "$MOD.realpath(...)"
    - pattern: "$MOD.realpathSync(...)"
    - pattern: "$MOD.rename(...)"
    - pattern: "$MOD.renameSync(...)"
    - pattern: "$MOD.rmdir(...)"
    - pattern: "$MOD.rmdirSync(...)"
    - pattern: "$MOD.stat(...)"
    - pattern: "$MOD.statSync(...)"
    - pattern: "$MOD.symlink(...)"
    - pattern: "$MOD.symlinkSync(...)"
    - pattern: "$MOD.truncate(...)"
    - pattern: "$MOD.truncateSync(...)"
    - pattern: "$MOD.unlink(...)"
    - pattern: "$MOD.unlinkSync(...)"
    - pattern: "$MOD.unwatchFile(...)"
    - pattern: "$MOD.utimes(...)"
    - pattern: "$MOD.utimesSync(...)"
    - pattern: "$MOD.watch(...)"
    - pattern: "$MOD.watchFile(...)"
    - pattern: "$MOD.writeFile(...)"
    - pattern: "$MOD.writeFileSync(...)"
  severity: "WARNING"
- id: "eslint.detect-pseudoRandomBytes-1"
  languages:
  - "javascript"
  - "typescript"
  message: |
    Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.
  metadata:
    cwe: "CWE-338"
    shortDescription: "Use of Cryptographically Weak Pseudo-Random Number Generator
      (PRNG)"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-pseudoRandomBytes.js"
    primary_identifier: "eslint.detect-pseudoRandomBytes"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-pseudoRandomBytes"
      type: "eslint_rule_id"
      value: "detect-pseudoRandomBytes"
  pattern: "crypto.pseudoRandomBytes"
  severity: "WARNING"
- id: "eslint.react-dangerouslysetinnerhtml-1"
  languages:
  - "typescript"
  - "javascript"
  message: |
    Setting HTML from code is risky because it’s easy to inadvertently expose your users to a
    cross-site scripting (XSS) attack.
  metadata:
    cwe: "CWE-79"
    owasp: "A7:2017-Cross-Site Scripting (XSS)"
    references:
    - "https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml"
    shortDescription: "Improper Neutralization of Input During Web Page Generation
      ('Cross-site Scripting')"
    primary_identifier: "eslint.react-dangerouslysetinnerhtml"
    secondary_identifiers:
    - name: "ESLint rule ID/react-dangerouslysetinnerhtml"
      type: "eslint_rule_id"
      value: "react-dangerouslysetinnerhtml"
  pattern-either:
  - pattern: |
      <$X dangerouslySetInnerHTML=... />
  - pattern: |
      {dangerouslySetInnerHTML: ...}
  severity: "WARNING"
- id: "eslint.react-missing-noopener-1"
  languages:
  - "typescript"
  - "javascript"
  message: |
    Missing 'noopener' on an anchor tag where target='_blank'. This could introduce
    a reverse tabnabbing vulnerability. Include 'noopener' when using target='_blank'.
  metadata:
    cwe: "CWE-200"
    owasp: "A3:2017-Sensitive Data Exposure"
    references:
    - "https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer"
    - "https://web.dev/external-anchors-use-rel-noopener/"
    - "https://owasp.org/www-community/attacks/Reverse_Tabnabbing"
    shortDescription: "Exposure of Sensitive Information to an Unauthorized Actor"
    primary_identifier: "eslint.react-missing-noopener"
    secondary_identifiers:
    - name: "ESLint rule ID/react-missing-noopener"
      type: "eslint_rule_id"
      value: "react-missing-noopener"
  pattern-either:
  - patterns:
    - pattern: |
        <$X target="_blank" />
    - pattern-not: |
        <$X target="_blank" rel="..." />
  - patterns:
    - pattern-inside: |
        <$X target="_blank" rel=... />
    - pattern-regex: "rel=[\"']((?!noopener).)*?[\"']"
  - patterns:
    - pattern: |
        React.createElement($A, {target: '_blank'},...)
    - pattern-not: |
        React.createElement($A, {rel: '...'},...)
  - patterns:
    - pattern: |
        React.createElement($A, {target: '_blank', rel: $REL},...)
    - metavariable-regex:
        metavariable: "$REL"
        regex: "[\"']((?!noopener).)*?['\"]"
  - patterns:
    - pattern: |
        $P = {target: '_blank'};
        ...
        React.createElement($A, $P,...);
    - pattern-not: |
        $P = {rel: '...'};
        ...
        React.createElement($A, $P,...);
  - patterns:
    - pattern: |
        $P = {target: '_blank', rel: $REL};
        ...
        React.createElement($A, $P,...);
    - metavariable-regex:
        metavariable: "$REL"
        regex: "[\"']((?!noopener).)*?['\"]"
  severity: "WARNING"
- id: "eslint.detect-non-literal-require-1"
  languages:
  - "javascript"
  - "typescript"
  message: |
    Detected the use of require(variable). Calling require with a non-literal argument might
    allow an attacker to load an run arbitrary code, or access arbitrary files.
  metadata:
    cwe: "CWE-95"
    owasp: "A1:2017-Injection"
    shortDescription: "Improper Neutralization of Directives in Dynamically Evaluated
      Code ('Eval Injection')"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js"
    primary_identifier: "eslint.detect-non-literal-require"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-non-literal-require"
      type: "eslint_rule_id"
      value: "detect-non-literal-require"
  patterns:
  - pattern: "require($OBJ)"
  - pattern-not: "require('...')"
  severity: "WARNING"
- id: "eslint.detect-possible-timing-attacks-1"
  languages:
  - "javascript"
  message: |
    String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More
    info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/
  metadata:
    cwe: "CWE-208"
    shortDescription: "Observable Timing Discrepancy"
    primary_identifier: "eslint.detect-possible-timing-attacks"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-possible-timing-attacks"
      type: "eslint_rule_id"
      value: "detect-possible-timing-attacks"
  patterns:
  - pattern-not: "if ($Z == null) { ... };"
  - pattern-not: "if ($Z === null) { ... };"
  - pattern-not: "if ($Z != null) { ... };"
  - pattern-not: "if ($Z !== null) { ... };"
  - pattern-not: "if ($Q != undefined) { ... };"
  - pattern-not: "if ($Q !== undefined) { ... };"
  - pattern-not: "if ($Q == undefined) { ... };"
  - pattern-not: "if ($Q === undefined) { ... };"
  - pattern-not: "return $Y == null;"
  - pattern-not: "return $Y === null;"
  - pattern-not: "return $Y != null;"
  - pattern-not: "return $Y !== null;"
  - pattern-not: "return $Y == undefined;"
  - pattern-not: "return $Y === undefined;"
  - pattern-not: "return $Y != undefined;"
  - pattern-not: "return $Y !== undefined;"
  - pattern-either:
    - pattern: |
        if (password == $X) {
            ...
        }
    - pattern: |
        if ($X == password) {
            ...
        }
    - pattern: |
        if (password === $X) {
            ...
        }
    - pattern: |
        if ($X === password) {
            ...
        }
    - pattern: |
        if (pass == $X) {
            ...
        }
    - pattern: |
        if ($X == pass) {
            ...
        }
    - pattern: |
        if (pass === $X) {
            ...
        }
    - pattern: |
        if ($X === pass) {
            ...
        }
    - pattern: |
        if (secret == $X) {
            ...
        }
    - pattern: |
        if ($X == secret) {
            ...
        }
    - pattern: |
        if (secret === $X) {
            ...
        }
    - pattern: |
        if ($X === secret) {
            ...
        }
    - pattern: |
        if (api == $X) {
            ...
        }
    - pattern: |
        if ($X == api) {
            ...
        }
    - pattern: |
        if (api === $X) {
            ...
        }
    - pattern: |
        if ($X === api) {
            ...
        }
    - pattern: |
        if (apiKey == $X) {
            ...
        }
    - pattern: |
        if ($X == apiKey) {
            ...
        }
    - pattern: |
        if (apiKey === $X) {
            ...
        }
    - pattern: |
        if ($X === apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret == $X) {
            ...
        }
    - pattern: |
        if ($X == apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret === $X) {
            ...
        }
    - pattern: |
        if ($X === apiSecret) {
            ...
        }
    - pattern: |
        if (token == $X) {
            ...
        }
    - pattern: |
        if ($X == token) {
            ...
        }
    - pattern: |
        if (token === $X) {
            ...
        }
    - pattern: |
        if ($X === token) {
            ...
        }
    - pattern: |
        if (hash == $X) {
            ...
        }
    - pattern: |
        if ($X == hash) {
            ...
        }
    - pattern: |
        if (hash === $X) {
            ...
        }
    - pattern: |
        if ($X === hash) {
            ...
        }
    - pattern: |
        if (auth_token == $X) {
            ...
        }
    - pattern: |
        if ($X == auth_token) {
            ...
        }
    - pattern: |
        if (auth_token === $X) {
            ...
        }
    - pattern: |
        if ($X === auth_token) {
            ...
        }
    - pattern: |
        if (password != $X) {
            ...
        }
    - pattern: |
        if ($X != password) {
            ...
        }
    - pattern: |
        if (password !== $X) {
            ...
        }
    - pattern: |
        if ($X !== password) {
            ...
        }
    - pattern: |
        if (pass != $X) {
            ...
        }
    - pattern: |
        if ($X != pass) {
            ...
        }
    - pattern: |
        if (pass !== $X) {
            ...
        }
    - pattern: |
        if ($X !== pass) {
            ...
        }
    - pattern: |
        if (secret != $X) {
            ...
        }
    - pattern: |
        if ($X != secret) {
            ...
        }
    - pattern: |
        if (secret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== secret) {
            ...
        }
    - pattern: |
        if (api != $X) {
            ...
        }
    - pattern: |
        if ($X != api) {
            ...
        }
    - pattern: |
        if (api !== $X) {
            ...
        }
    - pattern: |
        if ($X !== api) {
            ...
        }
    - pattern: |
        if (apiKey != $X) {
            ...
        }
    - pattern: |
        if ($X != apiKey) {
            ...
        }
    - pattern: |
        if (apiKey !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret != $X) {
            ...
        }
    - pattern: |
        if ($X != apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiSecret) {
            ...
        }
    - pattern: |
        if (token != $X) {
            ...
        }
    - pattern: |
        if ($X != token) {
            ...
        }
    - pattern: |
        if (token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== token) {
            ...
        }
    - pattern: |
        if (hash != $X) {
            ...
        }
    - pattern: |
        if ($X != hash) {
            ...
        }
    - pattern: |
        if (hash !== $X) {
            ...
        }
    - pattern: |
        if ($X !== hash) {
            ...
        }
    - pattern: |
        if (auth_token != $X) {
            ...
        }
    - pattern: |
        if ($X != auth_token) {
            ...
        }
    - pattern: |
        if (auth_token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== auth_token) {
            ...
        }
    - pattern: |
        return $X === auth_token;
    - pattern: |
        return auth_token === $X;
    - pattern: |
        return $X === token;
    - pattern: |
        return token === $X;
    - pattern: |
        return $X === hash;
    - pattern: |
        return hash === $X;
    - pattern: |
        return $X === password;
    - pattern: |
        return password === $X;
    - pattern: |
        return $X === pass;
    - pattern: |
        return pass === $X;
    - pattern: |
        return $X === apiKey;
    - pattern: |
        return apiKey === $X;
    - pattern: |
        return $X === apiSecret;
    - pattern: |
        return apiSecret === $X;
    - pattern: |
        return $X === api_key;
    - pattern: |
        return api_key === $X;
    - pattern: |
        return $X === api_secret;
    - pattern: |
        return api_secret === $X;
    - pattern: |
        return $X === secret;
    - pattern: |
        return secret === $X;
    - pattern: |
        return $X === api;
    - pattern: |
        return api === $X;
    - pattern: |
        return $X == auth_token;
    - pattern: |
        return auth_token == $X;
    - pattern: |
        return $X == token;
    - pattern: |
        return token == $X;
    - pattern: |
        return $X == hash;
    - pattern: |
        return hash == $X;
    - pattern: |
        return $X == password;
    - pattern: |
        return password == $X;
    - pattern: |
        return $X == pass;
    - pattern: |
        return pass == $X;
    - pattern: |
        return $X == apiKey;
    - pattern: |
        return apiKey == $X;
    - pattern: |
        return $X == apiSecret;
    - pattern: |
        return apiSecret == $X;
    - pattern: |
        return $X == api_key;
    - pattern: |
        return api_key == $X;
    - pattern: |
        return $X == api_secret;
    - pattern: |
        return api_secret == $X;
    - pattern: |
        return $X == secret;
    - pattern: |
        return secret == $X;
    - pattern: |
        return $X == api;
    - pattern: |
        return api == $X;
    - pattern: |
        return $X !== auth_token;
    - pattern: |
        return auth_token !== $X;
    - pattern: |
        return $X !== token;
    - pattern: |
        return token !== $X;
    - pattern: |
        return $X !== hash;
    - pattern: |
        return hash !== $X;
    - pattern: |
        return $X !== password;
    - pattern: |
        return password !== $X;
    - pattern: |
        return $X !== pass;
    - pattern: |
        return pass !== $X;
    - pattern: |
        return $X !== apiKey;
    - pattern: |
        return apiKey !== $X;
    - pattern: |
        return $X !== apiSecret;
    - pattern: |
        return apiSecret !== $X;
    - pattern: |
        return $X !== api_key;
    - pattern: |
        return api_key !== $X;
    - pattern: |
        return $X !== api_secret;
    - pattern: |
        return api_secret !== $X;
    - pattern: |
        return $X !== secret;
    - pattern: |
        return secret !== $X;
    - pattern: |
        return $X !== api;
    - pattern: |
        return api !== $X;
    - pattern: |
        return $X != auth_token;
    - pattern: |
        return auth_token != $X;
    - pattern: |
        return $X != token;
    - pattern: |
        return token != $X;
    - pattern: |
        return $X != hash;
    - pattern: |
        return hash != $X;
    - pattern: |
        return $X != password;
    - pattern: |
        return password != $X;
    - pattern: |
        return $X != pass;
    - pattern: |
        return pass != $X;
    - pattern: |
        return $X != apiKey;
    - pattern: |
        return apiKey != $X;
    - pattern: |
        return $X != apiSecret;
    - pattern: |
        return apiSecret != $X;
    - pattern: |
        return $X != api_key;
    - pattern: |
        return api_key != $X;
    - pattern: |
        return $X != api_secret;
    - pattern: |
        return api_secret != $X;
    - pattern: |
        return $X != secret;
    - pattern: |
        return secret != $X;
    - pattern: |
        return $X != api;
    - pattern: |
        return api != $X;
  severity: "WARNING"
- id: "eslint.detect-disable-mustache-escape-1"
  languages:
  - "javascript"
  - "typescript"
  message: |
    Markup escaping disabled. This can be used with some template engines to escape
    disabling of HTML entities, which can lead to XSS attacks.
  metadata:
    cwe: "CWE-79"
    owasp: "A7:2017-Cross-Site Scripting (XSS)"
    shortDescription: "Improper Neutralization of Input During Web Page Generation
      (XSS)"
    source-rule-url: "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-disable-mustache-escape.js"
    primary_identifier: "eslint.detect-disable-mustache-escape"
    secondary_identifiers:
    - name: "ESLint rule ID/detect-disable-mustache-escape"
      type: "eslint_rule_id"
      value: "detect-disable-mustache-escape"
  pattern: "$OBJ.escapeMarkup = false"
  severity: "WARNING"
