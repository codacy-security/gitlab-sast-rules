# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: "csharp/crypto/rule-WeakCipherAlgorithm"
  patterns:
  - pattern-inside: |
      using System.Security.Cryptography;
      ...
  - pattern-either:
    - pattern-regex: ".*DES\\.Create\\(\\);"
    - pattern: "new DESCryptoServiceProvider();"
    - pattern-regex: ".*TripleDES\\.Create\\(\\);"
    - pattern: "new TripleDESCryptoServiceProvider();"
    - pattern-regex: ".*RC2\\.Create\\(\\);"
    - pattern: "new RC2CryptoServiceProvider();"
  message: |
    DES, TripleDES and RC2 are all considered broken or insecure cryptographic algorithms.
    If using dotnet framework >6.0 consider using `ChaCha20Poly1305` instead as it is easier
    and faster than the alternatives such as AES-256-GCM.

    For older applications, AES-256-GCM is recommended, however it has many drawbacks:
    - Slower than ChaCha20Poly1305
    - More difficult to use
    - Catastrophic failure if nonce values are re-used.

    Example using ChaChaPoly20:
    ```
    // Generate a random key
    byte[] key = new byte[32];
    RandomNumberGenerator.Fill(key);

    ChaCha20Poly1305 encryptor = new ChaCha20Poly1305(key);

    // Note nonce values _must_ be re-generated every time it is used.
    var nonce = new byte[12];
    RandomNumberGenerator.Fill(nonce);

    byte[] plainText = System.Text.Encoding.UTF8.GetBytes("Secret text to encrypt");
    byte[] cipherText = new byte[plainText.Length];
    var authTag = new byte[16];

    encryptor.Encrypt(nonce, plainText, cipherText, authTag);
    byte[] output = new byte[cipherText.Length];
    encryptor.Decrypt(nonce, cipherText, authTag, output);
    Console.WriteLine("Output: {0}", System.Text.Encoding.UTF8.GetString(output));
    ```

    Example using AesGCM:
    ```
    var plaintextBytes = Encoding.UTF8.GetBytes("Secret text to encrypt");
    var key = new byte[32];
    RandomNumberGenerator.Fill(key);

    using var aes = new AesGcm(key);
    var nonce = new byte[AesGcm.NonceByteSizes.MaxSize];
    RandomNumberGenerator.Fill(nonce);

    var cipherText = new byte[plaintextBytes.Length];
    var tag = new byte[AesGcm.TagByteSizes.MaxSize];

    aes.Encrypt(nonce, plaintextBytes, cipherText, tag);

    // Decrypt
    using (var decrypt = new AesGcm(key))
    {
        var decryptedBytes = new byte[cipherText.Length];

        decrypt.Decrypt(nonce, cipherText, tag, decryptedBytes);

        Console.WriteLine("Decrypted: {0}",  Encoding.UTF8.GetString(decryptedBytes));
    }
    ```
  languages:
  - "csharp"
  severity: "WARNING"
  metadata:
    shortDescription: "Use of a broken or risky cryptographic algorithm"
    category: "security"
    cwe: "CWE-327"
