---
rules:
- id: "../sast-rules/c/access/rule-RpcImpersonateClient_ImpersonateLoggedOnUser.yml"
  languages:
  - c
  message: "These functions may be used to either drop or change account privileges.
    If the calls\nfail, the process will continue to run with the privileges assigned
    to it on start. Depending on\nthe logic of the application, this may allow attackers
    to abuse the system due to privileges never\nbeing changed to a different access
    level.\n\nAlways ensure return values of this function are checked to determine
    if the application should\ncontinue to operate. \n"
  metadata:
    shortDescription: Ensure return values are checked when attempting to drop privileges
    cwe: 'CWE-250: If this call fails, the program could fail to drop heightened privileges
      (CWE-250)'
  pattern-either:
  - pattern: RpcImpersonateClient(...)
  - pattern: ImpersonateLoggedOnUser(...)
  - pattern: CoImpersonateClient(...)
  - pattern: ImpersonateNamedPipeClient(...)
  - pattern: ImpersonateDdeClientWindow(...)
  - pattern: ImpersonateSecurityContext(...)
  - pattern: SetThreadToken(...)
  severity: ERROR
- id: "../sast-rules/c/access/rule-umask.yml"
  languages:
  - c
  message: "The umask function call sets the process's file mode creation mask. umask
    values determine \nwhat permissions a file should be created with and who can
    read or write to these files. \nEnsure that umask is given most restrictive possible
    setting depending on the context, \nusually 066 or 077, for more information see
    https://en.wikipedia.org/wiki/Umask#Mask_effect.\n"
  metadata:
    shortDescription: Ensure restrictive umask values
    cwe: CWE-732
  pattern: umask(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-MultiByteToWideChar.yml"
  languages:
  - c
  message: "The input buffer is the number of bytes in the string, but the size\nof
    the output buffer is the number of characters. To avoid overflows, the\napplication
    must determine the correct buffer size which depends on the data type \nthe buffer
    receives.\n\nFor more information see: https://learn.microsoft.com/en-us/windows/win32/intl/security-considerations--international-features\n"
  metadata:
    shortDescription: Easily misused function may lead to buffer overflows
    cwe: CWE-120
  pattern: MultiByteToWideChar(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-StrCat_StrCatA.yml"
  languages:
  - c
  message: "The `StrCat` family of functions do not guarantee the final string to
    be null terminated.\nConsider using one of the following alternatives: `StringCbCat`,
    `StringCbCatEx`, \n`StringCbCatN`, `StringCbCatNEx`, `StringCchCat`, `StringCchCatEx`,
    `StringCchCatN`, or \n`StringCchCatNEx`. \n"
  metadata:
    shortDescription: Insecure string processing function
    cwe: CWE-120
  pattern-either:
  - pattern: StrCat(...)
  - pattern: StrCatA(...)
  - pattern: StrcatW(...)
  - pattern: lstrcatA(...)
  - pattern: lstrcatW(...)
  - pattern: strCatBuff(...)
  - pattern: StrCatBuffA(...)
  - pattern: StrCatBuffW(...)
  - pattern: StrCatChainW(...)
  - pattern: _tccat(...)
  - pattern: _mbccat(...)
  - pattern: _ftcscat(...)
  - pattern: StrCatN(...)
  - pattern: StrCatNA(...)
  - pattern: StrCatNW(...)
  - pattern: StrNCat(...)
  - pattern: StrNCatA(...)
  - pattern: StrNCatW(...)
  - pattern: lstrncat(...)
  - pattern: lstrcatnA(...)
  - pattern: lstrcatnW(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-char_TCHAR.yml"
  languages:
  - c
  message: |
    Perform bounds checking, use functions that limit length, or ensure that the size is larger
    than the maximum possible length.
  metadata:
    cwe: 'CWE-120: Statically-sized arrays can be improperly restricted, leading to
      potential overflows or other issues (CWE-119!/CWE-120)'
  pattern-either:
  - patterns:
    - pattern-regex: "(wchar_t) *[a-zA-Z0-9_]+\\[.*\\]"
    - pattern-not-regex: (wchar_t) *[a-zA-Z0-9_]+\[\](\s|)\= *([a-zA-Z]|)(\s|)("|{)(.*)
  - patterns:
    - pattern-regex: "(char) *[a-zA-Z0-9_]+\\[.*\\]"
    - pattern-not-regex: (char) *[a-zA-Z0-9_]+\[\](\s|)\= *([a-zA-Z]|)(\s|)("|{)(.*)
  - patterns:
    - pattern-regex: "(TCHAR) *[a-zA-Z0-9_]+\\[.*\\]"
    - pattern-not-regex: (TCHAR) *[a-zA-Z0-9_]+\[\](\s|)\= *([a-zA-Z]|)(\s|)("|{)(.*)
  - patterns:
    - pattern-regex: static *(const)? *(wchar_t|char|TCHAR) *[a-zA-Z0-9_]+ *\[.*\]\*(={.*})?
  - patterns:
    - pattern-regex: "(.*|)(\\s|)\\=(\\s|)\\((char.*) (malloc)\\(.*\\[[0-9]+\\].*\\)"
  severity: INFO
- id: "../sast-rules/c/buffer/rule-equal_mismatch.yml"
  languages:
  - c
  message: |
    This function is often discouraged by most C++ coding standards in favor of its safer
    alternatives provided since C++14. Consider using a form of this function that checks the
    second iterator before potentially reading past it's bounds.
  metadata:
    shortDescription: Function does not check the second iterator for over-read conditions
    cwe: CWE-126
  pattern-either:
  - pattern: equal(...)
  - pattern: mismatch(...)
  - pattern: is_permutation(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-fscanf_sscanf.yml"
  languages:
  - c
  message: |
    Format specifiers can take optional field widths, which should be
    used to limit how many characters are copied into the target buffer.

    Example:
    ```
      const char str[20] = "AAAAAAAAAAAAAAAAAAA";
      char buf[11] = {0};
      sscanf(str, "%10s", &buf); // buf = AAAAAAAAAA\0
    ```
  metadata:
    shortDescription: sscanf() functions may allow format string based overflows
    cwe: CWE-120
  pattern-either:
  - pattern: fscanf(...)
  - pattern: sscanf(...)
  - pattern: vsscanf(...)
  - pattern: vfscanf(...)
  - pattern: _ftscanf(...)
  - pattern: fwscanf(...)
  - pattern: vfwscanf(...)
  - pattern: vswscanf(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-g_get_home_dir.yml"
  languages:
  - c
  message: |
    This function is synonymous with `getenv("HOME")` and should be treated
    as untrusted input as it could be modified by an attacker. Possible risks
    include:

    - The value being too large and causing buffer overflows
    - Files under the attackers control being used maliciously
    - Files outside of an attackers control becoming accessible depending on
    access privileges.
  metadata:
    shortDescription: Possible use of untrusted environment variable
    cwe: CWE-20
  pattern: g_get_home_dir(...)
  severity: WARNING
- id: "../sast-rules/c/buffer/rule-g_get_tmp_dir.yml"
  languages:
  - c
  message: |
    This function is synonymous with `getenv("TMP")` and should be treated
    as untrusted input as it could be modified by an attacker. Possible risks
    include:

    - The value being too large and causing buffer overflows
    - Files under the attackers control being used maliciously
    - Files outside of an attackers control becoming accessible depending on
    access privileges.
  metadata:
    shortDescription: Possible use of untrusted environment variable
    cwe: CWE-20
  pattern: g_get_tmp_dir(...)
  severity: WARNING
- id: "../sast-rules/c/buffer/rule-getchar_fgetc.yml"
  languages:
  - c
  message: 'CWE-20: Check buffer boundaries if used in a loop including recursive
    loops

    '
  metadata:
    shortDescription: ''
    cwe: 'CWE-20: Check buffer boundaries if used in a loop including recursive loops
      (CWE-120, CWE-20)'
  pattern-either:
  - pattern: getchar(...)
  - pattern: fgetc(...)
  - pattern: getc(...)
  - pattern: read(...)
  - pattern: _gettc(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-getenv_curl_getenv.yml"
  languages:
  - c
  message: "This function's return value should be treated as untrusted input as it
    could be \nmodified by an attacker. Possible risks include:\n\n- The value being
    too large and causing buffer overflows\n- Files under the attackers control being
    used maliciously\n- Files outside of an attackers control becoming accessible
    depending on\naccess privileges.\n"
  metadata:
    shortDescription: Possible use of untrusted environment variable
    cwe: CWE-20
  pattern-either:
  - pattern: getenv(...)
  - pattern: curl_getenv(...)
  severity: WARNING
- id: "../sast-rules/c/buffer/rule-getopt_getopt_long.yml"
  languages:
  - c
  message: 'Check implementation on installation, or limit the size of all string
    inputs.

    '
  metadata:
    cwe: 'CWE-120: Some older implementations do not protect against internal buffer
      overflows (CWE-120, CWE-20)'
  pattern-either:
  - pattern: getopt(...)
  - pattern: getopt_long(...)
  severity: WARNING
- id: "../sast-rules/c/buffer/rule-getpw.yml"
  languages:
  - c
  message: |
    The getpw() function is dangerous as it may overflow the provided
    buffer when reading from the `/etc/passwd` file.  While the passwd file
    is not generally writeable, there are no protections offered by this function
    to protect from reading past the bounds of the destination buffer. This function
    is obsoleted by `getpwuid`.
  metadata:
    shortDescription: Use of deprecated function (getpwd)
    cwe: CWE-120
  pattern: getpw(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-gets__getts.yml"
  languages:
  - c
  message: "The gets() function reads a line from stdin into the provided buffer\nuntil
    either a terminating newline or EOF. This terminating newline or\nEOF is replaced
    with a null byte `'\\0'`. No check for buffer overruns are \nperformed so it is
    recommended to use `fgets()` instead.\n"
  metadata:
    shortDescription: Use of deprecated function (gets)
    cwe: CWE-120
  pattern-either:
  - pattern: gets(...)
  - pattern: _getts(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-getwd.yml"
  languages:
  - c
  message: "`getwd` does not contain a parameter to limit how many characters can
    be copied into the\ndestionation buffer. For portability and security reasons
    `getwd` has been deprecated in \nfavor of `getcwd`.\n"
  metadata:
    shortDescription: Use of deprecated function (getwd)
    cwe: 'CWE-120: This does not protect against buffer overflows by itself, so use
      with caution (CWE-120, CWE-20)'
  pattern: getwd(...)
  severity: WARNING
- id: "../sast-rules/c/buffer/rule-lstrcat_wcscat.yml"
  languages:
  - c
  message: "The `strcat` family of functions are unable to limit how many bytes are
    copied\nto the destination buffer. It is recommended to use more secure alternatives
    such as \n`snprintf`.\n\nIf developing for C Runtime Library (CRT), more secure
    versions of these functions should be used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s?view=msvc-170\n"
  metadata:
    shortDescription: Insecure functions unable to limit / check buffer sizes
    cwe: CWE-120
  pattern-either:
  - pattern: lstrcat(...)
  - pattern: wcscat(...)
  - pattern: _tcscat(...)
  - pattern: _mbscat(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-lstrcatn_wcsncat.yml"
  languages:
  - c
  message: "Consider using more secure alternatives such as `snprintf`, instead of
    the\n`wcsncat` family of functions. \n\nIf developing for C Runtime Library (CRT),
    more secure versions of these functions should be used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l?view=msvc-170\n"
  metadata:
    shortDescription: Easily misused string processing functions
    cwe: CWE-120
  pattern-either:
  - pattern: lstrcatn(...)
  - pattern: wcsncat(...)
  - pattern: _tcsncat(...)
  - pattern: _mbsnbcat(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-lstrcpy_wcscpy.yml"
  languages:
  - c
  message: "The `lstrcpy` family of functions do not provide the ability to limit
    or check buffer\nsizes before copying to a destination buffer. This can lead to
    buffer overflows. Consider \nusing more secure alternatives such as `strncpy_s`.
    \n\nIf developing for C Runtime Library (CRT), more secure versions of these functions
    should be used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170\n"
  metadata:
    shortDescription: Insecure functions unable to limit / check buffer sizes
    cwe: CWE-120
  pattern-either:
  - pattern: lstrcpy(...)
  - pattern: wcscpy(...)
  - pattern: _tcscpy(...)
  - pattern: _mbscpy(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-lstrcpyn_wcsncpy.yml"
  languages:
  - c
  message: "The `lstrcpyn` family of functions do not always check for invalid pointers
    or check if there\nis sufficient space prior to copying. The count argument limits
    the number of characters copied\nbut does validate it the count will fit within
    the size of the destination buffer, leading to\npotential overflows. \n\nIf developing
    for C Runtime Library (CRT), more secure versions of these functions should be
    used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170\n"
  metadata:
    shortDescription: Insecure functions do not always null terminate or check invalid
      pointers
    cwe: CWE-120
  pattern-either:
  - pattern: lstrcpyn(...)
  - pattern: wcsncpy(...)
  - pattern: _tcsncpy(...)
  - pattern: _mbsnbcpy(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-memcpy_CopyMemory.yml"
  languages:
  - c
  message: "The `memcpy` family of functions require the developer to validate that
    the destination buffer\nis the same size or larger than the source buffer. Buffer
    overflows could be introduced if care \nis not taken to validate buffer sizes.\n\nIf
    developing for C Runtime Library (CRT), more secure versions of these functions
    should be used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/memcpy-s-wmemcpy-s?view=msvc-170\n"
  metadata:
    shortDescription: Function does not check for buffer overflows when copying
    cwe: CWE-120
  pattern-either:
  - pattern: memcpy(...)
  - pattern: CopyMemory(...)
  - pattern: bcopy(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-realpath.yml"
  languages:
  - c
  message: "The `realpath` function should not be called with a destination buffer
    as it could\nlead to overflowing if the path is greater than PATH_LEN. It is instead
    recommended\nto call `realpath` with the destination buffer set to NULL and use
    the return value\nas the resolved path. Be sure to free the returned pointer as
    realpath will allocate\nthe buffer internally using `malloc`. \n\nFor more information
    see: https://man7.org/linux/man-pages/man3/realpath.3.html.\n\nExample:\n\n```\nchar
    const *symlink_path = \"/tmp/symlink\";\nchar *resolved_path = NULL;\n\nresolved_path
    = realpath(symlink_path, NULL);\nif (errno == 0) {\n  // ... use resolved_path...\n
    \ free(resolved_path);\n}\n``` \n"
  metadata:
    shortDescription: Function does not ensure destination buffer length is sufficient
      before copying
    cwe: CWE-120
  pattern: realpath(...)
  severity: WARNING
- id: "../sast-rules/c/buffer/rule-scanf_vscanf.yml"
  languages:
  - c
  message: "Format specifiers can take optional field widths, which should be\nused
    to limit how many characters are copied into the target buffer.\n\nExample:\n```\n
    \ char buf[11] = {0};\n  scanf(\"%10s\", &buf); // buf = AAAAAAAAAA\\0\n```\n\nIf
    developing for C Runtime Library (CRT), more secure versions of these functions
    should be used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l?view=msvc-170\n"
  metadata:
    shortDescription: scanf() functions may allow format string based overflows
    cwe: CWE-120
  pattern-either:
  - patterns:
    - pattern: scanf($FMT, ...)
    - pattern-not: scanf("...", ...)
  - patterns:
    - pattern: vscanf($FMT, ...)
    - pattern-not: vscanf("...", ...)
  - patterns:
    - pattern: wscanf($FMT, ...)
    - pattern-not: wscanf("...", ...)
  - patterns:
    - pattern: _tscanf($FMT, ...)
    - pattern-not: _tscanf("...", ...)
  - patterns:
    - pattern: vwscanf(FMT, ...)
    - pattern-not: vwscanf("...", ...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-sprintf_vsprintf.yml"
  languages:
  - c
  message: "Use sprintf_s, snprintf, or vsnprintf.\nThe `sprintf` family of functions
    do not allow callers to set limits on how many bytes\nthe destination buffer can
    hold. Consider using more secure alternatives such as `snprintf`.\n\nIf developing
    for C Runtime Library (CRT), more secure versions of these functions should be
    used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l?view=msvc-170\n"
  metadata:
    shortDescription: Insecure function unable to limit / check buffer sizes
    cwe: CWE-120
  pattern-either:
  - pattern: sprintf(...)
  - pattern: vsprintf(...)
  - pattern: swprintf(...)
  - pattern: vswprintf(...)
  - pattern: _stprintf(...)
  - pattern: _vstprintf(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-strcat.yml"
  languages:
  - c
  message: "The `strcat` family of functions are unable to limit how many bytes are
    copied\nto the destination buffer. It is recommended to use more secure alternatives
    such as \n`snprintf`.\n\nIf developing for C Runtime Library (CRT), more secure
    versions of these functions should be used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s?view=msvc-170\n"
  metadata:
    shortDescription: Insecure string processing function
    cwe: 'CWE-120: Does not check for buffer overflows when concatenating to destination
      [MS-banned] (CWE-120)'
  pattern: strcat(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-strccpy_strcadd.yml"
  languages:
  - c
  message: |
    The `strccpy` and `strcadd` functions do not allow the caller to check that the destination size
    of the buffer will fit the input buffer prior to copying.

    For more information please see: https://docs.oracle.com/cd/E18752_01/html/816-5172/streadd-3gen.html
  metadata:
    shortDescription: Insecure string processing functions
    cwe: 'CWE-120: Subject to buffer overflow if buffer is not as big as claimed (CWE-120)'
  pattern-either:
  - pattern: strccpy(...)
  - pattern: strcadd(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-strcpy.yml"
  languages:
  - c
  message: "The `lstrcpy` family of functions do not provide the ability to limit
    or check buffer\nsizes before copying to a destination buffer. This can lead to
    buffer overflows. Consider \nusing more secure alternatives such as `strncpy`
    and provide the correct limit to the\ndestination buffer. \n\nIf developing for
    C Runtime Library (CRT), more secure versions of these functions should be used,
    see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170\n"
  metadata:
    cwe: 'CWE-120: Does not check for buffer overflows when copying to destination
      [MS-banned] (CWE-120)'
  pattern: strcpy(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-strcpyA_strcpyW.yml"
  languages:
  - c
  message: "The `StrCpy` family of functions do not guarantee the final string to
    be null terminated. Consider \nusing one of the following alternatives `StringCbCopy`,
    `StringCbCopyEx`, `StringCbCopyN`, \n`StringCbCopyNEx`, `StringCchCopy`, `StringCchCopyEx`,
    `StringCchCopyN`, or `StringCchCopyNEx`.\n\nIf developing for C Runtime Library
    (CRT), more secure versions of these functions should be used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170\n"
  metadata:
    shortDescription: Insecure string processing function
    cwe: CWE-120
  pattern-either:
  - pattern: strcpyA(...)
  - pattern: strcpyW(...)
  - pattern: StrCpy(...)
  - pattern: StrCpyA(...)
  - pattern: lstrcpyA(...)
  - pattern: lstrcpyW(...)
  - pattern: _tccpy(...)
  - pattern: _mbccpy(...)
  - pattern: _ftcscpy(...)
  - pattern: _mbsncpy(...)
  - pattern: StrCpyN(...)
  - pattern: StrCpyNA(...)
  - pattern: StrCpyNW(...)
  - pattern: StrNCpy(...)
  - pattern: strcpynA(...)
  - pattern: StrNCpyA(...)
  - pattern: StrNCpyW(...)
  - pattern: lstrcpynA(...)
  - pattern: lstrcpynW(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-streadd_strecpy.yml"
  languages:
  - c
  message: "The `strecpy` and `streadd` functions requires that the destination buffer
    size be at least four \ntimes the size of the source due to each character potentially
    becoming a `\\` and 3 digits.\n\nFor more information please see: https://docs.oracle.com/cd/E18752_01/html/816-5172/streadd-3gen.html\n"
  metadata:
    shortDescription: Insecure string processing functions
    cwe: CWE-120
  pattern-either:
  - pattern: streadd(...)
  - pattern: strecpy(...)
  severity: ERROR
- id: "../sast-rules/c/buffer/rule-strlen_wcslen.yml"
  languages:
  - c
  message: "The `strlen` family of functions does not handle strings that are not
    null\nterminated. This can lead to buffer over reads and cause the application
    to \ncrash by accessing unintended memory locations. \n\nIf developing for C Runtime
    Library (CRT), more secure versions of these functions should be used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strnlen-strnlen-s?view=msvc-170\n"
  metadata:
    shortDescription: Function does not handle null terminated strings properly
    cwe: CWE-126
  pattern-either:
  - pattern: strlen(...)
  - pattern: wcslen(...)
  - pattern: _tcslen(...)
  - pattern: _mbslen(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-strncat.yml"
  languages:
  - c
  message: "The `strncat` family of functions are easily to use incorrectly when calculating
    destination buffer\nsizes. It is recommended to use more secure alternatives such
    as `snprintf`.\n\nIf developing for C Runtime Library (CRT), more secure versions
    of these functions should be used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncat-s-strncat-s-l-wcsncat-s-wcsncat-s-l-mbsncat-s-mbsncat-s-l?view=msvc-170\n"
  metadata:
    cwe: CWE-120
  pattern: strncat(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-strncpy.yml"
  languages:
  - c
  message: "The `strncpy` family of functions do not properly handle strings that
    are not null terminated. \nIt is recommended to use more secure alternatives such
    as `snprintf`.\n\nIf developing for C Runtime Library (CRT), more secure versions
    of these functions should be used, see: \nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170\n"
  metadata:
    shortDescription: Function does not handle null terminated strings or invalid
      pointers properly
    cwe: CWE-120
  pattern: strncpy(...)
  severity: INFO
- id: "../sast-rules/c/buffer/rule-strtrns.yml"
  languages:
  - c
  message: |
    This function is easy to mis-use by not accounting for the space necessary when transforming
    strings. Ensure that the destination buffer is large enough to fit the transformed output.

    For more details please see: https://docs.oracle.com/cd/E36784_01/html/E36877/strtrns-3gen.html
  metadata:
    shortDescription: Insecure string processing function
    cwe: CWE-120
  pattern: strtrns(...)
  severity: WARNING
- id: "../sast-rules/c/crypto/rule-EVP_des_ecb_EVP_des_cbc.yml"
  languages:
  - c
  message: |
    The DES algorithm has not been recommended for over 15 years and has been withdrawn from
    NIST (FIPS 46-3) in 2005.

    Consider using libsodium's `crypto_secretbox_easy` authenticated encryption functions instead.
    For more information please see: https://libsodium.gitbook.io/doc/secret-key_cryptography/secretbox.

    If you must be FIPs compliant, consider using OpenSSLs AES or 3DES ciphers.
  metadata:
    shortDescription: Insecure encryption algorithm (DES)
    cwe: CWE-327
  pattern-either:
  - pattern: EVP_des_ecb(...)
  - pattern: EVP_des_cbc(...)
  - pattern: EVP_des_cfb(...)
  - pattern: EVP_des_ofb(...)
  - pattern: EVP_desx_cbc(...)
  severity: ERROR
- id: "../sast-rules/c/crypto/rule-EVP_rc4_40_EVP_rc2_40_cbc.yml"
  languages:
  - c
  message: "The RC4 algorithm is vulnerable to many attacks and should no longer be
    used for encrypting data streams.\n\nConsider using libsodium's `crypto_secretstream_xchacha20poly1305`
    stream cipher encryption \nfunctions instead. For more information please see:
    \nhttps://libsodium.gitbook.io/doc/secret-key_cryptography/secretstream\n"
  metadata:
    shortDescription: Insecure stream cipher (RC4)
    cwe: CWE-327
  pattern-either:
  - pattern: EVP_rc4_40(...)
  - pattern: EVP_rc2_40_cbc(...)
  - pattern: EVP_rc2_64_cbc(...)
  severity: ERROR
- id: "../sast-rules/c/crypto/rule-crypt_crypt_r.yml"
  languages:
  - c
  message: "The crypt functions are not recommended due to the significantly small
    key space.\nModern hardware can crack crypt produced passwords relatively quickly.
    \n\nConsider using the Argon2id password hashing algorithm provided by libsodium.\nFor
    more information please see: https://libsodium.gitbook.io/doc/password_hashing.\n"
  metadata:
    shortDescription: Insecure hashing algorithm
    cwe: 'CWE-327: (CWE-327)'
  pattern-either:
  - pattern: crypt(...)
  - pattern: crypt_r(...)
  severity: ERROR
- id: "../sast-rules/c/format/rule-fprintf_vfprintf.yml"
  languages:
  - c
  message: "Do not allow users or un-validated input to provide the format specification.
    \nConsider using a constant for the format specification, or strip all format\nspecifiers
    from the input prior to calling the `fprintf` family of functions.\n"
  metadata:
    shortDescription: Potential format string vulnerability
    cwe: CWE-134
  pattern-either:
  - patterns:
    - pattern: fprintf($FD, $FMT, ...)
    - pattern-not: fprintf($FD, "...", ...)
  - patterns:
    - pattern: vfprintf($FMT, $ARGS, ...)
    - pattern-not: vfprintf("...", $ARGS, ...)
  - patterns:
    - pattern: _ftprintf($FD, $FMT, ...)
    - pattern-not: _ftprintf($FD, "...", ...)
  - patterns:
    - pattern: fwprintf($FD, $FMT, ...)
    - pattern-not: fwprintf($FD, "...", ...)
  - patterns:
    - pattern: fvwprintf($FD, $FMT, ...)
    - pattern-not: fvwprintf($FD, "...", ...)
  severity: ERROR
- id: "../sast-rules/c/format/rule-printf_vprintf.yml"
  languages:
  - c
  message: "Do not allow users or un-validated input to provide the format specification.
    \nConsider using a constant for the format specification, or strip all format\nspecifiers
    from the input prior to calling the `printf` family of functions.\n"
  metadata:
    shortDescription: Potential format string vulnerability
    cwe: CWE-134
  pattern-either:
  - patterns:
    - pattern: printf(...)
    - pattern-not: printf("...",...)
  - patterns:
    - pattern: vprintf($FMT, ...)
    - pattern-not: vprintf("...", ...)
  - patterns:
    - pattern: vwprintf($FMT, ...)
    - pattern-not: vwprintf("...", ...)
  - patterns:
    - pattern: vfwprintf($FILE, $FMT, ...)
    - pattern-not: vfwprintf($FILE, "...", ...)
  - patterns:
    - pattern: _vtprintf($FILE, $FMT, ...)
    - pattern-not: _vtprintf($FILE, "...", ...)
  - patterns:
    - pattern: wprintf($FMT, ...)
    - pattern-not: wprintf("...", ...)
  severity: ERROR
- id: "../sast-rules/c/format/rule-snprintf_vsnprintf.yml"
  languages:
  - c
  message: "Do not allow users or un-validated input to provide the format specification.
    \nConsider using a constant for the format specification, or strip all format\nspecifiers
    from the input prior to calling the `sprintf` family of functions.\n\nNote that
    some variations of this function do not always null terminate the strings.\n"
  metadata:
    shortDescription: Potential format string vulnerability
    cwe: CWE-134
  pattern-either:
  - patterns:
    - pattern: snprintf($BUF,$SIZ,$FMT,...)
    - pattern-not: snprintf($BUF,$SIZ,"...",...)
  - patterns:
    - pattern: vsnprintf($BUF,$SIZ,$FMT)
    - pattern-not: vsnprintf($BUF,$SIZ,"...",...)
  - patterns:
    - pattern: _snprintf($BUF,$SIZ,$FMT,...)
    - pattern-not: _snprintf($BUF,$SIZ,$FMT,"...",...)
  - patterns:
    - pattern: _sntprintf($VAR,$FMT,...)
    - pattern-not: sntprintf($VAR,"...",...)
  - patterns:
    - pattern: _vsntprintf($VAR,$FMT,...)
    - pattern-not: _vsntprintf($VAR,"...",...)
  severity: ERROR
- id: "../sast-rules/c/format/rule-syslog.yml"
  languages:
  - c
  message: "Do not allow users or un-validated input to provide the format specification.
    \nConsider using a constant for the format specification, or strip all format\nspecifiers
    from the input prior to calling the `syslog` function.\n"
  metadata:
    shortDescription: Potential format string vulnerability in syslog call
    cwe: CWE-134
  pattern-either:
  - patterns:
    - pattern: syslog($FUNC,...)
    - pattern-not: syslog($FUNC,"...",...)
  severity: ERROR
- id: "../sast-rules/c/free/rule-memalign.yml"
  languages:
  - c
  message: |
    The `memalign` function may not check that the alignment argument is correct. Calling
    free (on non linux-based systems) may fail and in certain circumstances this failure
    may be exploitable. This function has been deprecated in favour of `posix_memalign`.
  metadata:
    shortDescription: Use of deprecated function (memalign)
    cwe: CWE-676
  pattern-either:
  - pattern: memalign(...)
  - pattern-regex: "(void)\\s\\*(\\s|)(memalign)\\;"
  severity: INFO
- id: "../sast-rules/c/integer/rule-atoi_atol.yml"
  languages:
  - c
  message: |
    If source untrusted, check both minimum and maximum, even if the input had no minus sign (large
    numbers can roll over into negative number; consider saving to an unsigned value if that is
    intended).
  metadata:
    cwe: 'CWE-190: Unless checked, the resulting number can exceed the expected range
      (CWE-190)'
  pattern-either:
  - pattern: atoi(...)
  - pattern: atol(...)
  - pattern: _wtoi(...)
  - pattern: _wtoi64(...)
  severity: INFO
- id: "../sast-rules/c/misc/rule-AddAccessAllowedAce.yml"
  languages:
  - c
  message: 'Make sure that you set inheritance by hand if you wish it to inherit.

    '
  metadata:
    cwe: 'CWE-732: This doesn''t set the inheritance bits in the access control entry
      (ACE) header (CWE-732)'
  pattern: AddAccessAllowedAce(...)
  severity: WARNING
- id: "../sast-rules/c/misc/rule-InitializeCriticalSection.yml"
  languages:
  - c
  message: 'Use InitializeCriticalSectionAndSpinCount instead.

    '
  metadata:
    cwe: 'CWE-754: Exceptions can be thrown in low-memory situations'
  pattern: InitializeCriticalSection(...)
  severity: WARNING
- id: "../sast-rules/c/misc/rule-LoadLibrary.yml"
  languages:
  - c
  message: |
    Use LoadLibraryEx with one of the search flags, or call SetSearchPathMode to use a safe search
    path, or pass a full path to the library.
  metadata:
    cwe: 'CWE-20: Ensure that the full path to the library is specified, or current
      directory may be used (CWE-829, CWE-20)'
  pattern: LoadLibrary(...)
  severity: WARNING
- id: "../sast-rules/c/misc/rule-LoadLibraryEx.yml"
  languages:
  - c
  message: |
    Use a flag like LOAD_LIBRARY_SEARCH_SYSTEM32 or LOAD_LIBRARY_SEARCH_APPLICATION_DIR to search
    only desired folders.
  metadata:
    cwe: 'CWE-20: Ensure that the full path to the library is specified, or current
      directory may be used (CWE-829, CWE-20)'
  pattern: LoadLibraryEx(...)
  severity: WARNING
- id: "../sast-rules/c/misc/rule-SetSecurityDescriptorDacl.yml"
  languages:
  - c
  message: |
    Never create NULL ACLs; an attacker can set it to Everyone (Deny
    All Access)
  metadata:
    cwe: 'CWE-732: Never create NULL ACLs; an attacker can set it to Everyone (Deny
      All Access), which would even forbid administrator access (CWE-732)'
  pattern: SetSecurityDescriptorDacl(...)
  severity: ERROR
- id: "../sast-rules/c/misc/rule-chroot.yml"
  languages:
  - c
  message: |
    Make sure the program immediately chdir("/"), closes file descriptors, and drops root
    privileges, and that all necessary files (and no more!) are in the new root.
  metadata:
    cwe: 'CWE-22: chroot can be very helpful, but is hard to use correctly (CWE-250,
      CWE-22)'
  pattern: chroot(...)
  severity: WARNING
- id: "../sast-rules/c/misc/rule-cuserid.yml"
  languages:
  - c
  message: 'Use getpwuid(geteuid()) and extract the desired information instead.

    '
  metadata:
    cwe: 'CWE-120: Exactly what cuserid() does is poorly defined (e.g., some systems
      use the effective uid, like Linux, while others like System V use the real uid).
      Thus, you can''t trust what it does. It''s certainly not portable (The cuserid
      function was included in the 1988 version of POSIX, but removed from the 1990
      version).  Also, if passed a non-null parameter, there''s a risk of a buffer
      overflow if the passed-in buffer is not at least L_cuserid characters long (CWE-120)'
  pattern: cuserid(...)
  severity: ERROR
- id: "../sast-rules/c/misc/rule-fopen_open.yml"
  languages:
  - c
  message: 'Check when opening files - can an attacker redirect it (via symlinks).

    '
  metadata:
    cwe: 'CWE-362: Check when opening files - can an attacker redirect it (via symlinks),
      force the opening of special file type (e.g., device files), move things around
      to create a race condition, control its ancestors, or change its contents? (CWE-362)'
  pattern-either:
  - pattern: fopen(...)
  - pattern: open(...)
  severity: INFO
- id: "../sast-rules/c/misc/rule-getlogin.yml"
  languages:
  - c
  message: 'Use getpwuid(geteuid()) and extract the desired information instead.

    '
  metadata:
    cwe: 'CWE-807: It''s often easy to fool getlogin.  Sometimes it does not work
      at all, because some program messed up the utmp file.  Often, it gives only
      the first 8 characters of the login name. The user currently logged in on the
      controlling tty of our program need not be the user who started it.  Avoid getlogin()
      for security-related purposes (CWE-807)'
  pattern: getlogin(...)
  severity: ERROR
- id: "../sast-rules/c/misc/rule-getpass.yml"
  languages:
  - c
  message: |
    Make the specific calls to do exactly what you want.  If you continue to use it, or write your
    own, be sure to zero the password as soon as possible to avoid leaving the cleartext password
    visible in the process' address space.
  metadata:
    cwe: 'CWE-20: This function is obsolete and not portable. It was in SUSv2 but
      removed by POSIX.2.  What it does exactly varies considerably between systems,
      particularly in where its prompt is displayed and where it gets its data (e.g.,
      /dev/tty, stdin, stderr, etc.). In addition, some implementations overflow buffers.
      (CWE-676, CWE-120, CWE-20)'
  pattern: getpass(...)
  severity: ERROR
- id: "../sast-rules/c/obsolete/rule-gsignal_ssignal.yml"
  languages:
  - c
  message: 'Switch to raise/signal, or some other signalling approach.

    '
  metadata:
    cwe: 'CWE-676: These functions are considered obsolete on most systems, and very
      non-portable (Linux-based systems handle them radically different, basically
      if gsignal/ssignal were the same as raise/signal respectively, while System
      V considers them a separate set and obsolete) (CWE-676)'
  pattern-either:
  - pattern: gsignal(...)
  - pattern: ssignal(...)
  severity: INFO
- id: "../sast-rules/c/obsolete/rule-ulimit.yml"
  languages:
  - c
  message: 'Use getrlimit(2), setrlimit(2), and sysconf(3) instead.

    '
  metadata:
    cwe: 'CWE-676: This C routine is considered obsolete (as opposed to the shell
      command by the same name, which is NOT obsolete) (CWE-676)'
  pattern: ulimit(...)
  severity: INFO
- id: "../sast-rules/c/obsolete/rule-usleep.yml"
  languages:
  - c
  message: 'Use nanosleep(2) or setitimer(2) instead.

    '
  metadata:
    cwe: 'CWE-676: This C routine is considered obsolete (as opposed to the shell
      command by the same name).   The interaction of this function with SIGALRM and
      other timer functions such as sleep(), alarm(), setitimer(), and nanosleep()
      is unspecified (CWE-676)'
  pattern: usleep(...)
  severity: INFO
- id: "../sast-rules/c/race/rule-access.yml"
  languages:
  - c
  message: 'Set up the correct permissions (e.g., using setuid()) and try to open
    the file directly.

    '
  metadata:
    cwe: 'CWE-362: This usually indicates a security flaw.  If an attacker can change
      anything along the path between the call to access() and the file''s actual
      use (e.g., by moving files), the attacker can exploit the race condition (CWE-362/CWE-367!)'
  pattern: access(...)
  severity: ERROR
- id: "../sast-rules/c/race/rule-chgrp.yml"
  languages:
  - c
  message: 'Use fchgrp( ) instead.

    '
  metadata:
    cwe: 'CWE-362: This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)'
  pattern: chgrp(...)
  severity: ERROR
- id: "../sast-rules/c/race/rule-chmod.yml"
  languages:
  - c
  message: 'Use fchmod( ) instead.

    '
  metadata:
    cwe: 'CWE-362: This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)'
  pattern: chmod(...)
  severity: ERROR
- id: "../sast-rules/c/race/rule-chown.yml"
  languages:
  - c
  message: 'Use fchown( ) instead.

    '
  metadata:
    cwe: 'CWE-362: This accepts filename arguments; if an attacker can move those
      files, a race condition results. (CWE-362)'
  pattern: chown(...)
  severity: ERROR
- id: "../sast-rules/c/race/rule-readlink.yml"
  languages:
  - c
  message: 'Reconsider approach.

    '
  metadata:
    cwe: 'CWE-20: This accepts filename arguments; if an attacker can move those files
      or change the link content, a race condition results.  Also, it does not terminate
      with ASCII NUL. (CWE-362, CWE-20)'
  pattern: readlink(...)
  severity: ERROR
- id: "../sast-rules/c/race/rule-vfork.yml"
  languages:
  - c
  message: 'Use fork() instead.

    '
  metadata:
    cwe: 'CWE-362: On some old systems, vfork() permits race conditions, and it''s
      very difficult to use correctly (CWE-362)'
  pattern: vfork(...)
  severity: INFO
- id: "../sast-rules/c/random/rule-drand48_erand48.yml"
  languages:
  - c
  message: 'Use a more secure technique for acquiring random values.

    '
  metadata:
    cwe: 'CWE-327: This function is not sufficiently random for security-related functions
      such as key and nonce creation (CWE-327)'
  pattern-either:
  - pattern: drand48(...)
  - pattern: erand48(...)
  - pattern: jrand48(...)
  - pattern: lcong48(...)
  - pattern: lrand48(...)
  - pattern: mrand48(...)
  - pattern: nrand48(...)
  - pattern: random(...)
  - pattern: seed48(...)
  - pattern: setstate(...)
  - pattern: srand(...)
  - pattern: strfry(...)
  - pattern: srandom(...)
  - pattern: g_rand_boolean(...)
  - pattern: g_rand_int(...)
  - pattern: g_rand_int_range(...)
  - pattern: g_rand_double(...)
  - pattern: g_rand_double_range(...)
  - pattern: g_random_boolean(...)
  - pattern: g_random_int(...)
  - pattern: g_random_int_range(...)
  - pattern: g_random_double(...)
  - pattern: g_random_double_range(...)
  - pattern-regex: "(long|short|double|int|float|void)\\s(\\*|)(\\s|)(seed48|lcong48)(\\(.*\\))\\;"
  severity: WARNING
- id: "../sast-rules/c/shell/rule-CreateProcess.yml"
  languages:
  - c
  message: |
    Specify the application path in the first argument, NOT as part of the second, or embedded
    spaces could allow an attacker to force a different program to run.
  metadata:
    cwe: 'CWE-78: This causes a new process to execute and is difficult to use safely
      (CWE-78)'
  pattern: CreateProcess(...)
  severity: WARNING
- id: "../sast-rules/c/shell/rule-CreateProcessAsUser_CreateProcessWithLogon.yml"
  languages:
  - c
  message: 'Especially watch out for embedded spaces.

    '
  metadata:
    cwe: 'CWE-78: This causes a new process to execute and is difficult to use safely
      (CWE-78)'
  pattern-either:
  - pattern: CreateProcessAsUser(...)
  - pattern: CreateProcessWithLogon(...)
  severity: WARNING
- id: "../sast-rules/c/shell/rule-execl_execlp.yml"
  languages:
  - c
  message: 'try using a library call that implements the same functionality if available.

    '
  metadata:
    cwe: 'CWE-78: This causes a new program to execute and is difficult to use safely
      (CWE-78)'
  pattern-either:
  - pattern: execl(...)
  - pattern: execlp(...)
  - pattern: execle(...)
  - pattern: execv(...)
  - pattern: execvp(...)
  - pattern: popen(...)
  - pattern: WinExec(...)
  - pattern: ShellExecute(...)
  severity: ERROR
- id: "../sast-rules/c/shell/rule-system.yml"
  languages:
  - c
  message: 'try using a library call that implements the same functionality if available.

    '
  metadata:
    cwe: 'CWE-78: This causes a new program to execute and is difficult to use safely
      (CWE-78)'
  pattern: system(...)
  severity: ERROR
- id: "../sast-rules/c/tmpfile/rule-GetTempFileName.yml"
  languages:
  - c
  message: 'Temporary file race condition in certain cases.

    '
  metadata:
    cwe: 'CWE-377: Temporary file race condition in certain cases (e.g., if run as
      SYSTEM in many versions of Windows) (CWE-377)'
  pattern: GetTempFileName(...)
  severity: WARNING
- id: "../sast-rules/c/tmpfile/rule-mkstemp.yml"
  languages:
  - c
  message: |
    Some older Unix-like systems create temp files with permission to write by
    all by default, so be sure to set the umask to override this. Also, some older
    Unix systems might fail to use O_EXCL when opening the file, so make sure that
    O_EXCL is used by the library.
  metadata:
    cwe: 'CWE-377: Potential for temporary file vulnerability in some circumstances.'
  pattern: mkstemp(...)
  severity: INFO
- id: "../sast-rules/c/tmpfile/rule-mktemp.yml"
  languages:
  - c
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack (CWE-377).
  metadata:
    cwe: 'CWE-377: Temporary file race condition (CWE-377)'
  pattern: mktemp(...)
  severity: ERROR
- id: "../sast-rules/c/tmpfile/rule-tmpfile.yml"
  languages:
  - c
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack
  metadata:
    cwe: 'CWE-377: Function tmpfile() has a security flaw on some systems (e.g., older
      System V systems) (CWE-377)'
  pattern: tmpfile(...)
  severity: INFO
- id: "../sast-rules/c/tmpfile/rule-tmpnam_tempnam.yml"
  languages:
  - c
  message: |
    Creating and using insecure temporary files can leave application and system data vulnerable to
    attack.
  metadata:
    cwe: 'CWE-377: Temporary file race condition (CWE-377)'
  pattern-either:
  - pattern: tmpnam(...)
  - pattern: tempnam(...)
  severity: WARNING
- id: "../sast-rules/csharp/cache/rule-OutputCacheConflicts.yml"
  patterns:
  - pattern-inside: |
      [Authorize]
      public class $CLZ {
        ...
      }
  - pattern: |
      [OutputCache]
      public $RET $FOO(...)
      {
        ...
      }
  message: |
    Having the annotation [OutputCache] will disable the annotation [Authorize] for
    the requests following the first one.
  languages:
  - csharp
  severity: INFO
  metadata:
    category: security
    cwe: 'CWE-524: Use of Cache Containing Sensitive Information'
- id: "../sast-rules/csharp/cookies/rule-CookieWithoutHttpOnlyFlag.yml"
  mode: taint
  pattern-sources:
  - pattern: 'var $COOKIE = new HttpCookie(...);

      '
  pattern-sinks:
  - pattern: "$COOKIE"
  pattern-sanitizers:
  - pattern: "$COOKIE.HttpOnly = true;"
  message: |
    The HttpOnly flag is not set for the cookie. An attacker could perform XSS with a malicious
    script.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
- id: "../sast-rules/csharp/cookies/rule-CookieWithoutSSLFlag.yml"
  mode: taint
  pattern-sources:
  - pattern: 'var $COOKIE = new HttpCookie(...);

      '
  pattern-sinks:
  - pattern: "$COOKIE"
  pattern-sanitizers:
  - pattern: "$COOKIE.Secure = true;"
  message: |
    The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the
    user agent to send those cookies in plaintext over an HTTP session.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ‘Secure’ Attribute'
- id: "../sast-rules/csharp/crypto/rule-CertificateValidationDisabled.yml"
  patterns:
  - pattern-inside: |
      using System.Net;
      ...
  - pattern: ServicePointManager.ServerCertificateValidationCallback += $CALLBACK;
  - metavariable-pattern:
      metavariable: "$CALLBACK"
      patterns:
      - pattern-either:
        - pattern: "$RETURNTYPE $FUNC(...) { return true; }"
        - pattern: "(...) => true;"
  message: |
    When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted
    entity by interfering in the communication path between the host and client. The software might
    connect to a malicious host while believing it is a trusted host, or the software might be
    deceived into accepting spoofed data that appears to originate from a trusted host.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
- id: "../sast-rules/csharp/crypto/rule-WeakCipherAlgorithm.yml"
  patterns:
  - pattern-inside: |
      using System.Security.Cryptography;
      ...
  - pattern-either:
    - pattern-regex: ".*DES\\.Create\\(\\);"
    - pattern: new DESCryptoServiceProvider();
    - pattern-regex: ".*TripleDES\\.Create\\(\\);"
    - pattern: new TripleDESCryptoServiceProvider();
    - pattern-regex: ".*RC2\\.Create\\(\\);"
    - pattern: new RC2CryptoServiceProvider();
  message: |
    The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
    the exposure of sensitive information.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: "../sast-rules/csharp/crypto/rule-WeakCipherMode.yml"
  patterns:
  - pattern-inside: |
      using System.Security.Cryptography;
      ...
  - metavariable-regex:
      metavariable: "$CIPHER"
      regex: "^(ECB|CBC|OFB|CFB|CTS)$"
  - pattern: CipherMode.$CIPHER
  message: |
    The cipher text produced is susceptible to alteration by an adversary. The cipher provides no
    way to detect that the data has been tampered with. If the cipher text can be controlled by an
    attacker, it could be altered without detection. The use of AES in CBC mode with a HMAC is
    recommended guaranteeing integrity and confidentiality.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: "../sast-rules/csharp/crypto/rule-WeakHashingFunction.yml"
  patterns:
  - pattern-either:
    - patterns:
      - metavariable-regex:
          metavariable: "$HASH_PROVIDER"
          regex: "^(SHA1CryptoServiceProvider|MD5CryptoServiceProvider)$"
      - pattern: new $HASH_PROVIDER
    - patterns:
      - metavariable-regex:
          metavariable: "$HASH_CLASS"
          regex: "^System.Security.Cryptography.(SHA1|MD5)$"
      - pattern: "$HASH_CLASS.$METHOD();"
  message: |
    The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
    the exposure of sensitive information.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: "../sast-rules/csharp/crypto/rule-WeakRNG.yml"
  patterns:
  - pattern: "(Random $RNG).$METHOD(...);"
  - focus-metavariable: "$RNG"
  message: |
    The use of a predictable random value can lead to vulnerabilities when used in certain security
    critical contexts.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
- id: "../sast-rules/csharp/csrf/rule-Csrf.yml"
  patterns:
  - pattern: |
      [$HTTPMETHOD]
      public $RET $FOO(...) {
        ...
      }
  - pattern-not: |
      [ValidateAntiForgeryToken]
      public $RET $FOO(...) {
        ...
      }
  - metavariable-regex:
      metavariable: "$HTTPMETHOD"
      regex: Http(Post|Delete|Patch|Put)
  message: |
    An attacker could send a link to the victim. By visiting the
    malicious link, a web page would trigger a POST request (because it is a
    blind attack - the attacker doesn’t see a response from triggered request
    and has no use from GET request and GET requests should not change a state
    on the server by definition) to the website. The victim would not be able
    to acknowledge that an action is made in the background, but his cookie
    would be automatically submitted if he is authenticated to the website.
    This attack does not require special interaction other than visiting a
    website.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
- id: "../sast-rules/csharp/deserialization/rule-InsecureDeserialization.yml"
  patterns:
  - pattern-not: $OBJ.Deserialize("...")
  - pattern-not: $OBJ.UnsafeDeserialize("...")
  - pattern-not: $OBJ.UnsafeDeserializeMethodResponse("...")
  - pattern-not: $OBJ.ReadObject("...")
  - pattern-not: $OBJ.DeserializeFromString("...")
  - pattern-not: $OBJ.DeserializeFromReader("...")
  - pattern-not: $OBJ.DeserializeFromStream("...")
  - pattern-not: $OBJ.DeserializeRequest("...")
  - pattern-not: $OBJ.ToObject("...")
  - pattern-not: $OBJ.DeserializeResponse("...")
  - pattern-not: new System.Runtime.Serialization.DataContractSerializer("...")
  - pattern-not: new System.Runtime.Serialization.Json.DataContractJsonSerializer("...")
  - pattern-not: new System.Xml.Serialization.XmlSerializer("...")
  - pattern-not: new System.Resources.ResourceReader("...")
  - pattern-not: (System.Messaging.XmlMessageFormatter $E).Read("...")
  - pattern-not: (System.Messaging.BinaryMessageFormatter $E).Read("...")
  - pattern-either:
    - pattern: "$OBJ.Deserialize(...)"
    - pattern: "$OBJ.UnsafeDeserialize(...)"
    - pattern: "$OBJ.UnsafeDeserializeMethodResponse(...)"
    - pattern: "$OBJ.ReadObject(...)"
    - pattern: "$OBJ.DeserializeFromString(...)"
    - pattern: "$OBJ.DeserializeFromReader(...)"
    - pattern: "$OBJ.DeserializeFromStream(...)"
    - pattern: "$OBJ.DeserializeRequest(...)"
    - pattern: "$OBJ.ToObject(...)"
    - pattern: "$OBJ.DeserializeResponse(...)"
    - pattern: new System.Runtime.Serialization.DataContractSerializer(...)
    - pattern: new System.Runtime.Serialization.Json.DataContractJsonSerializer(...)
    - pattern: new System.Xml.Serialization.XmlSerializer(...)
    - pattern: new System.Resources.ResourceReader(...)
    - pattern: "(System.Messaging.XmlMessageFormatter $E).Read(...)"
    - pattern: "(System.Messaging.BinaryMessageFormatter $E).Read(...)"
  languages:
  - csharp
  message: |
    The application deserializes untrusted data without sufficiently verifying that
    the resulting data will be valid.
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
  severity: WARNING
- id: "../sast-rules/csharp/endpoint/rule-UnvalidatedRedirect.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: "$SRC"
    - pattern-inside: 'public $RET $FUNC(...,$SRC,...){...}

        '
  pattern-sanitizers:
  - pattern-either:
    - pattern: TryCreate(...)
    - pattern: Action(...)
    - pattern: HttpRouteUrl(...)
    - pattern: RouteUrl(...)
  pattern-sinks:
  - patterns:
    - pattern-not-inside: |
        if (IsLocalUrl(...)) {
            ...
            Redirect(...);
            ...
        }
    - pattern-not-inside: |
        if ($URL.IsLocalUrl(...)) {
            ...
            Redirect(...);
            ...
        }
    - pattern-either:
      - pattern: Redirect(...)
      - pattern: RedirectPermanent(...)
      - pattern: RedirectToRoute(...)
      - pattern: RedirectToRoutePermanent(...)
      - pattern: new RedirectResult(...)
  languages:
  - csharp
  message: |
    Unvalidated redirects occur when an application redirects a user to a
    destination URL specified by a user supplied parameter that is not validated.
    Such vulnerabilities can be used to facilitate phishing attacks.
  metadata:
    category: security
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
  severity: WARNING
- id: "../sast-rules/csharp/injection/rule-CommandInjection.yml"
  patterns:
  - pattern-inside: |
      using System.Diagnostics;
      ...
  - pattern-either:
    - patterns:
      - pattern: Process.Start($ARG)
      - pattern-not: Process.Start("...")
    - pattern: "(Process $PROC).StartInfo.FileName = <...$ARG...>;"
    - pattern: "(Process $PROC).StartInfo.Arguments = <...$ARG...>;"
    - patterns:
      - pattern-inside: |
          $PSINFO = new ProcessStartInfo(...)
          ...
          Process.Start($PSINFO)
      - pattern-either:
        - pattern: "$PSINFO.Arguments = <...$ARG...>;"
        - pattern: "$PSINFO.FileName = <...$ARG...>;"
  message: |
    The highlighted API is used to execute a system command. If unfiltered input is passed to this
    API, it can lead to arbitrary command execution.
  languages:
  - csharp
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
- id: "../sast-rules/csharp/injection/rule-LdapInjection.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "(DirectorySearcher $SOURCE).Filter = ..."
      - pattern-not: (DirectorySearcher $SOURCE).Filter = "..."
    - patterns:
      - pattern: "(DirectorySearcher $SOURCE).Path = ..."
      - pattern-not: (DirectorySearcher $SOURCE).Path = "..."
  message: |
    The software constructs all or part of an LDAP query using
    externally-influenced input from an upstream component, but it does not
    neutralize or incorrectly neutralizes special elements that could modify
    the intended LDAP query when it is sent to a downstream component.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query
      (‘LDAP Injection’)'
- id: "../sast-rules/csharp/injection/rule-SQLInjection.yml"
  patterns:
  - pattern-either:
    - patterns:
      - metavariable-regex:
          metavariable: "$FUNC"
          regex: "^(SqlQuery|ExecuteSqlCommand|ExecuteSqlCommandAsync|ExecuteSqlRaw|ExecuteSqlRawAsync|FromSqlRaw|FromSql|GetSqlStringCommand|ExecuteDataSet|ExecuteReader|ExecuteNonQuery|ExecuteScalar|CreateSQLQuery)$"
      - pattern: "$DB.$FUNC($ARG, ...);"
      - pattern-not: $DB.$FUNC("...", ...);
    - patterns:
      - metavariable-regex:
          metavariable: "$FUNC"
          regex: "^(ExecuteQuery|ExecuteCommand)$"
      - pattern-inside: |
          using System.Data.Linq;
          ...
      - pattern: "(DataContext $CTX).$FUNC($ARG, ...)"
    - patterns:
      - metavariable-regex:
          metavariable: "$IMPL"
          regex: "^(SqlCommand|OracleCommand|NpgsqlCommand|MySqlCommand|EntityCommand|OdbcCommand|OleDbCommand|SqliteCommand)$"
      - pattern-either:
        - patterns:
          - pattern: new $IMPL($ARG, ...);
          - pattern-not: new $IMPL("...", ...);
        - patterns:
          - pattern: "($IMPL $CMD).CommandText = <...$ARG...>;"
          - pattern-not: ($IMPL $CMD).CommandText = "...";
    - patterns:
      - metavariable-regex:
          metavariable: "$FUNC"
          regex: "^(ExecuteDataRow|ExecuteDataRowAsync|ExecuteDataset|ExecuteDatasetAsync|ExecuteNonQuery|ExecuteNonQueryAsync|ExecuteReader|ExecuteReaderAsync|ExecuteScalar|ExecuteScalarAsync|UpdateDataSet|UpdateDataSetAsync)$"
      - pattern-inside: |
          using MySql.Data.MySqlClient;
          ...
      - pattern: MySqlHelper.$FUNC("...", $ARG, ...);
    - patterns:
      - pattern-inside: |
          using Cassandra;
          ...
      - pattern: "(Session $SESS).Execute($ARG, ...);"
      - pattern-not: (Session $SESS).Execute("...", ...);
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - csharp
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (‘SQL Injection’)'
- id: "../sast-rules/csharp/injection/rule-XPathInjection.yml"
  patterns:
  - pattern-inside: |
      using System.Xml;
      ...
  - pattern-either:
    - patterns:
      - metavariable-regex:
          metavariable: "$FUNC"
          regex: "^(SelectNodes|SelectSingleNode|Compile|Evaluate|Matches|Select|SelectAncestors|SelectChildren|SelectDescendants)$"
      - metavariable-regex:
          metavariable: "$TY"
          regex: "^(XPathNavigator|XmlDocument|XmlNode|XmlDocumentXPathExtensions)$"
      - pattern: "($TY $VAR).$FUNC(<...$ARG...>, ...)"
      - pattern-not: ($TY $VAR).$FUNC("...", ...)
    - patterns:
      - pattern-inside: |
          using System.Xml.Linq;
          ...
      - metavariable-regex:
          metavariable: "$FUNC"
          regex: "^(XPathEvaluate|XPathSelectElement|XPathSelectElements)$"
      - pattern: "$VAR.$FUNC(<...$ARG...>, ...)"
      - pattern-not: $VAR.$FUNC("...", ...)
    - patterns:
      - pattern-inside: |
          using System.Xml.Schema;
          ...
      - pattern-either:
        - patterns:
          - pattern: "$VAR.XPath = <...$ARG...>;"
          - pattern-not: $VAR.XPath = "..."
        - patterns:
          - pattern: new XmlSchemaXPath { XPath = <...$ARG...> };
          - focus-metavariable: "$ARG"
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - csharp
  severity: INFO
  metadata:
    category: security
    cwe: 'CWE-643: Improper Neutralization of Data within XPath Expressions (‘XPath
      Injection’)'
- id: "../sast-rules/csharp/injection/rule-XXEInjection.yml"
  mode: taint
  pattern-sanitizers:
  - pattern: "(XmlReaderSettings $SETTINGS).ProhibitDtd = true;"
  - pattern: "(XmlReaderSettings $SETTINGS).DtdProcessing = DtdProcessing.Prohibit;"
  - pattern: "(XmlDocument $DOC).XmlResolver = null;"
  - pattern: var $DOC = new XmlDocument { ..., XmlResolver = null, ... };
  pattern-sinks:
  - pattern: XmlReader.Create(..., $SETTINGS);
  - pattern: "(XmlDocument $DOC).Load(...);"
  pattern-sources:
  - pattern: var $SETTINGS = new XmlReaderSettings();
  - pattern: var $DOC = new XmlDocument(...);
  - pattern: var $DOC = new XmlDocument {...};
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (‘XXE’)'
- id: "../sast-rules/csharp/other/rule-AuthorizationBypass.yml"
  patterns:
  - pattern-inside: |
      using System.Web.Mvc;
      ...
  - pattern-either:
    - pattern: |
        [$ANNO]
        class $CLASS : Controller{ ... }
    - pattern: 'class $CLASS : Controller{ ... }

        '
  - pattern-not: |
      [AllowAnonymous]
      class $CLASS : Controller{ ... }
  - pattern-not: |
      [Authorize]
      class $CLASS : Controller{ ... }
  message: |
    The endpoint is potentially accessible to not authorized users. If it contains sensitive
    information, like log files for example, it may lead to privilege escalation.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-284: Improper Access Control'
- id: "../sast-rules/csharp/other/rule-UnsafeXSLTSettingUsed.yml"
  patterns:
  - pattern-either:
    - pattern: new XsltSettings() {EnableScript = true};
    - pattern: |
        var $SETTINGS = new XsltSettings();
        ...
        $SETTINGS.EnableScript = true;
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
- id: "../sast-rules/csharp/password/rule-PasswordComplexity.yml"
  patterns:
  - pattern: |
      new PasswordValidator
      {
        ...,
      };
  - pattern: |
      new PasswordValidator
      {
        ...,
        RequiredLength = $LEN,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireNonLetterOrDigit = true,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireDigit = true,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireLowercase = true,
        ...,
      };
  - pattern-not: |
      new PasswordValidator
      {
        ...,
        RequireUppercase = true,
        ...,
      };
  - metavariable-comparison:
      metavariable: "$LEN"
      comparison: "$LEN < 8"
  message: |
    The product does not require that users should have strong passwords, which
    makes it easier for attackers to compromise user accounts.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-521: Weak Password Requirements'
- id: "../sast-rules/csharp/path/rule-PathTraversal.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        public class $CLASS : Controller {
          ...
        }
    - pattern: "$PARAM"
    - pattern-either:
      - patterns:
        - metavariable-regex:
            metavariable: "$HTTP_ANNO"
            regex: "^(Http)"
        - pattern-inside: |
            [$HTTP_ANNO]
            public string $METHOD(...,$PARAM,...){...}
      - pattern-inside: 'public IActionResult $METHOD(...,$PARAM,...){...}

          '
  pattern-sanitizers:
  - pattern-either:
    - pattern: "(Microsoft.Extensions.FileProviders.PhysicalFileProvider $E).GetFileInfo(...)"
    - pattern: "(System.Web.HttpServerUtility $E).MapPath(...)"
    - pattern: "(System.Web.HttpServerUtilityBase $E).MapPath(...)"
    - pattern: "(System.Web.HttpRequest $E).MapPath(...)"
  pattern-sinks:
  - pattern-either:
    - pattern: System.IO.Directory.Delete(...)
    - pattern: System.IO.Directory.GetFiles(...)
    - pattern: System.IO.Directory.Move(...)
    - pattern: System.IO.File.AppendAllLines(...)
    - pattern: System.IO.File.AppendAllLinesAsync(...)
    - pattern: System.IO.File.AppendAllText(...)
    - pattern: System.IO.File.AppendAllTextAsync(...)
    - pattern: System.IO.File.AppendText(...)
    - pattern: System.IO.File.Copy(...)
    - pattern: System.IO.File.Create(...)
    - pattern: System.IO.File.CreateText(...)
    - pattern: System.IO.File.Delete(...)
    - pattern: System.IO.File.Move(...)
    - pattern: System.IO.File.Open(...)
    - pattern: System.IO.File.OpenRead(...)
    - pattern: System.IO.File.OpenText(...)
    - pattern: System.IO.File.OpenWrite(...)
    - pattern: System.IO.File.ReadAllBytes(...)
    - pattern: System.IO.File.ReadAllBytesAsync(...)
    - pattern: System.IO.File.ReadAllLines(...)
    - pattern: System.IO.File.ReadAllLinesAsync(...)
    - pattern: System.IO.File.ReadAllText(...)
    - pattern: System.IO.File.ReadAllTextAsync(...)
    - pattern: System.IO.File.ReadLines(...)
    - pattern: System.IO.File.Replace(...)
    - pattern: System.IO.File.SetAccessControl(...)
    - pattern: System.IO.File.WriteAllBytes(...)
    - pattern: System.IO.File.WriteAllBytesAsync(...)
    - pattern: System.IO.File.WriteAllLines(...)
    - pattern: System.IO.File.WriteAllLinesAsync(...)
    - pattern: System.IO.File.WriteAllText(...)
    - pattern: System.IO.File.WriteAllTextAsync(...)
    - pattern: new System.IO.FileInfo(...)
    - pattern: "(System.IO.FileInfo $E).CopyTo(...)"
    - pattern: "(System.IO.FileInfo $E).MoveTo(...)"
    - pattern: "(System.IO.FileInfo $E).Replace(...)"
    - pattern: System.Reflection.Assembly.LoadFile(...)
    - pattern: System.Reflection.Assembly.LoadFrom(...)
    - pattern: System.Reflection.Assembly.ReflectionOnlyLoadFrom(...)
    - pattern: System.Reflection.Assembly.UnsafeLoadFrom(...)
    - pattern: System.AppDomain.AppendPrivatePath(...)
    - pattern: System.Xml.XmlReader.Create(...)
    - pattern: new System.IO.StreamReader.ctor(...)
    - pattern: new System.IO.StreamWriter.ctor(...)
    - pattern: new System.IO.FileStream.ctor(...)
    - pattern: new System.Web.Mvc.FilePathResult(...)
    - pattern: new Microsoft.AspNetCore.Mvc.PhysicalFileResult(...)
    - pattern: "(Microsoft.AspNetCore.Mvc.RazorPages.PageModel $E).PhysicalFile(...)"
    - pattern: "(System.Web.UI.WebControls.FileUpload $E).SaveAs(...)"
    - pattern: "(System.Web.HttpResponse $E).TransmitFile(...)"
    - pattern: "(System.Web.HttpResponse $E).WriteFile(...)"
    - pattern: "(System.Web.HttpResponseBase $E).TransmitFile(...)"
    - pattern: "(System.Web.HttpResponseBase $E).WriteFile(...)"
    - pattern: "(System.IO.Compression.ZipFileExtensions $E).CreateEntryFromFile(...)"
    - pattern: "(System.IO.Compression.ZipFileExtensions $E).ExtractToFile(...)"
    - pattern: "(System.IO.Compression.ZipFileExtensions $E).ExtractToDirectory(...)"
    - pattern: "(System.Net.WebClient $E).DownloadFile(...)"
    - pattern: "(System.Net.WebClient $E).DownloadFileAsync(...)"
    - pattern: "(System.Net.WebClient $E).DownloadFileTaskAsync(...)"
  message: |
    The software uses external input to construct a pathname that is intended
    to identify a file or directory that is located underneath a restricted
    parent directory, but the software does not properly neutralize special
    elements within the pathname that can cause the pathname to resolve to a
    location that is outside of the restricted directory..
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
  severity: WARNING
  languages:
  - csharp
- id: "../sast-rules/csharp/validation/rule-InputValidation.yml"
  patterns:
  - pattern: |
      [ValidateInput(false)]
      public $RET $FOO(...)
      {
        ...
      }
  message: |
    Input validation is a first line of defence for a variety of different
    attacks and should be enabled per default. Please do not forget to use
    @Html.AntiForgeryToken() in your view.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-554: ASP.NET Misconfiguration: Not Using Input Validation Framework'
- id: "../sast-rules/csharp/xss/rule-Xss.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: "$PARAM"
    - metavariable-regex:
        metavariable: "$HTTP_ANNO"
        regex: "^(Http)"
    - pattern-inside: |
        public class $CLASS : Controller {
          ...
        }
    - pattern-inside: |
        [$HTTP_ANNO]
        public string $METHOD(...,$PARAM,...){...}
  pattern-sanitizers:
  - patterns:
    - metavariable-regex:
        metavariable: "$FUNC"
        regex: "(SerializeObject|HtmlAttributeEncode|HtmlEncode|HtmlFormUrlEncode|UrlEncode|UrlPathEncode|XmlAttributeEncode|XmlEncode|Encode)"
    - pattern: "$CLASS.$FUNC(...)"
  pattern-sinks:
  - pattern: "(System.Web.Mvc.HtmlHelper $E).Raw(...)"
  - pattern: "(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper $E).Raw(...)"
  - pattern: "(System.Web.HttpResponse $E).AddHeader(...)"
  - pattern: "(System.Web.HttpResponse $E).AppendHeader(...)"
  - pattern: "(System.Web.HttpResponse $E).Write(...)"
  - pattern: "(System.Web.HttpResponse $E).BinaryWrite(...)"
  - pattern: "(System.Web.HttpResponse $E).TransmitFile(...)"
  - pattern: "(System.Web.HttpResponse $E).WriteFile(...)"
  - pattern: "(System.Web.HttpResponseBase $E).AddHeader(...)"
  - pattern: "(System.Web.HttpResponseBase $E).AppendHeader(...)"
  - pattern: "(System.Web.HttpResponseBase $E).Write(...)"
  - pattern: "(System.Web.HttpResponseBase $E).BinaryWrite(...)"
  - pattern: "(System.Web.HttpResponseBase $E).WriteFile(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).AddAttribute(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).AddStyleAttribute(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).RenderBeginTag(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).Write(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).WriteAttribute(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).WriteBeginTag(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).WriteEndTag(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).WriteFullBeginTag(...)"
  - pattern: "(System.Web.UI.HtmlTextWriter $E).WriteStyleAttribute(...)"
  - pattern: "(System.Web.UI.ClientScriptManager $E).RegisterStartupScript(...)"
  - pattern: "(System.Web.UI.ClientScriptManager $E).RegisterClientScriptBlock(...)"
  - pattern: "(System.Web.UI.Page $E).RegisterStartupScript(...)"
  - pattern: "(System.Web.UI.Page $E).RegisterClientScriptBlock(...)"
  - pattern: return ...;
  languages:
  - csharp
  message: |
    A potential XSS was found. The endpoint returns a variable from the client
    input that has not been encoded. To protect against stored XSS attacks, make
    sure any dynamic content coming from user or data store cannot be used to
    inject JavaScript on a page. Most modern frameworks will escape dynamic content
    by default automatically (Razor for example)
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site
      Scripting’)'
  severity: WARNING
- id: "../sast-rules/go/audit/rule-unhandled_error.yml"
  patterns:
  - pattern-regex: this is just a placeholder
  message: |
    A really useful feature of Golang is the ability to return a tuple of a result
    and an error value from a function. There is an unspoken rule in Golang that
    the result of a function is unsafe until you make check the error value. Many
    security exploits can be performed when the error value is not checked.
  metadata:
    cwe: 'CWE-703: Audit errors not checked'
  severity: INFO
  languages:
  - go
- id: "../sast-rules/go/blocklist/rule-blocklist-cgi.yml"
  patterns:
  - pattern: 'import "net/http/cgi"

      '
  message: 'Go versions < 1.6.3 are vulnerable to Httpoxy attack: (CVE-2016-5386)

    '
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A9: Using Components with Known Vulnerabilities'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/blocklist/rule-blocklist-des.yml"
  patterns:
  - pattern: 'import "crypto/des"

      '
  message: "Usage of a cryptographically broken primitive has been detected. It is
    recommended that \nChaCha20 or Advanced Encryption Standard (AES) be used instead.\n"
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A9: Using Components with Known Vulnerabilities'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/blocklist/rule-blocklist-md5.yml"
  patterns:
  - pattern: 'import "crypto/md5"

      '
  message: |
    The MD5 message-digest algorithm has been cryptographically broken and is unsuitable for
    further use. It is recommended that the SHA-3, or BLAKE2 family of algorithms be used for
    non-password based cryptographic hashes instead. For password based cryptographic hashes,
    consider using the bcrypt or Argon2 family of cryptographic hashes.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A9: Using Components with Known Vulnerabilities'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/blocklist/rule-blocklist-rc4.yml"
  patterns:
  - pattern: 'import "crypto/rc4"

      '
  message: |
    The RC4 stream-cipher has been cryptographically broken and is unsuitable
    for use in production. It is recommended that ChaCha20 or Advanced Encryption
    Standard (AES) be used instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A9: Using Components with Known Vulnerabilities'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/blocklist/rule-blocklist-sha1.yml"
  patterns:
  - pattern: 'import "crypto/sha1"

      '
  message: |
    The SHA-1 message-digest algorithm has been cryptographically broken and
    is unsuitable for further use. It is recommended that the SHA-3, or BLAKE2 family
    of algorithms be used for non-password based cryptographic hashes instead. For
    password based cryptographic hashes, consider using the bcrypt or Argon2 family
    of cryptographic hashes.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A9: Using Components with Known Vulnerabilities'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/crypto/rule-badtlssettings.yml"
  patterns:
  - pattern-either:
    - pattern: 'tls.Config{..., CipherSuites: []$SLICE{..., $CIPHERS, ...}, ...}

        '
    - pattern: 'tls.CipherSuite{..., ID: $CIPHERS, ...}

        '
  - metavariable-regex:
      metavariable: "$CIPHERS"
      regex: "((?!tls.TLS_AES_128_GCM_SHA256)|(?!tls.TLS_AES_256_GCM_SHA384)|(?!tls.TLS_CHACHA20_POLY1305_SHA256)|
        (?!tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)|(?!tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256)|
        (?!tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384)|(?!tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384)|
        (?!tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305)|(?!tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256)|
        (?!tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305)|(?!tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256)|
        (?!tls.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256)|(?!tls.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384))"
  message: "Usage of a cryptographically insecure cipher suite has been detected.
    It is recommended that \nalternative ciphers be used instead.\n"
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A9: Using Components with Known Vulnerabilities'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/crypto/rule-insecure_ignore_host_key.yml"
  patterns:
  - pattern: ssh.InsecureIgnoreHostKey(...)
  message: 'Audit the use of ssh.InsecureIgnoreHostKey

    '
  metadata:
    cwe: 'CWE-322: Key Exchange without Entity Authentication'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/crypto/rule-tlsversion.yml"
  patterns:
  - pattern-either:
    - pattern: tls.VersionTLS11
    - pattern: tls.VersionTLS10
  message: |
    Use of deprecated TLS version which may result in the unauthorized retrieval
    of sensitive information. It is recommended to use TLS 1.2 or TLS 1.3 instead.
  metadata:
    cwe: 'CWE-310: Cryptographic Issues'
    owasp: 'A05:2021: Security Misconfiguration'
  languages:
  - go
  severity: WARNING
- id: "../sast-rules/go/crypto/rule-weakcrypto.yml"
  patterns:
  - pattern-either:
    - pattern: 'des.NewCipher(...)

        '
    - pattern: 'des.NewTripleDESCipher(...)

        '
    - pattern: 'md5.New()

        '
    - pattern: 'md5.Sum(...)

        '
    - pattern: 'rc4.NewCipher(...)

        '
    - pattern: 'sha1.New()

        '
    - pattern: 'sha1.Sum(...)

        '
  message: |
    Usage of a cryptographically insecure algorithm has been detected. It
    is recommended that alternative algorithms be used instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A9: Using Components with Known Vulnerabilities'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/crypto/rule-weakkeystrength.yml"
  patterns:
  - pattern-either:
    - pattern: 'rsa.GenerateKey(..., $ARG)

        '
  - metavariable-comparison:
      metavariable: "$ARG"
      comparison: "$ARG < 2048"
  message: 'It is recommended that generated RSA keys are at least 2048 bits in length.

    '
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/crypto/rule-weakrandsource.yml"
  patterns:
  - patterns:
    - pattern-inside: |
        import $IMPORT "math/rand"
        ...
    - pattern-not-inside: 'import "crypto/rand"

        '
    - pattern-either:
      - pattern: "$IMPORT.$METHOD(...)"
      - pattern: rand.$METHOD(...)
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(Float32|Float64|Int31|Int31n|Int63|Int63n|NormalFloat64|Uint32|Uint64)"
  message: 'Use of weak random number generator (math/rand instead of crypto/rand)

    '
  metadata:
    cwe: 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/file_permissions/rule-fileperm.yml"
  patterns:
  - pattern-either:
    - pattern: os.Chmod(...,$MASK)
    - pattern: os.OpenFile(...,$MASK)
  - metavariable-comparison:
      metavariable: "$MASK"
      comparison: "$MASK > 0o600"
      base: 8
  message: 'Poor file permissions used when creation file or using chmod

    '
  metadata:
    cwe: 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    owasp: 'A6: Security Misconfiguration'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/file_permissions/rule-mkdir.yml"
  patterns:
  - pattern-either:
    - pattern: os.Mkdir(...,$MASK)
    - pattern: os.MkdirAll(...,$MASK)
  - metavariable-comparison:
      metavariable: "$MASK"
      comparison: "$MASK > 0o750"
      base: 8
  message: 'Poor file permissions used when creating a directory

    '
  metadata:
    cwe: 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    owasp: 'A6: Security Misconfiguration'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/filesystem/rule-decompression_bomb.yml"
  mode: taint
  pattern-sinks:
  - pattern: io.Copy(...)
  - pattern: io.CopyBuffer(...)
  pattern-sources:
  - pattern: gzip.NewReader(...)
  - pattern: zlib.NewReader(...)
  - pattern: bzip2.NewReader(...)
  - pattern: flate.NewReader(...)
  - pattern: lzw.NewReader(...)
  - pattern: tar.NewReader(...)
  - pattern: zip.NewReader(...)
  - pattern: zlib.NewReaderDict(...)
  - pattern: flate.NewReaderDict(...)
  - pattern: zip.OpenReader(...)
  message: 'Potential DoS vulnerability via decompression bomb

    '
  metadata:
    cwe: 'CWE-409: Improper Handling of Highly Compressed Data'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/filesystem/rule-dirtraversal.yml"
  patterns:
  - pattern-either:
    - pattern: |
        import $NET "net/http"
        ...
        $NET.Dir("/")
    - pattern: |
        import "net/http"
        ...
        http.Dir("/")
  message: 'Potential directory traversal

    '
  metadata:
    cwe: 'CWE-23: Relative Path Traversal'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/filesystem/rule-filereadtaint.yml"
  patterns:
  - pattern-not-inside: 'os.OpenFile(filepath.Clean(...), ...)

      '
  - pattern-not-inside: 'os.Open(filepath.Clean(...))

      '
  - pattern-not-inside: 'ioutil.ReadFile(filepath.Clean(...), ...)

      '
  - pattern-not-inside: 'os.OpenFile(filepath.Rel(...), ...)

      '
  - pattern-not-inside: 'os.Open(filepath.Rel(...))

      '
  - pattern-not-inside: 'ioutil.ReadFile(filepath.Rel(...), ...)

      '
  - pattern-not-inside: |
      const $ARG = "..."
      ...
  - pattern-not-inside: |
      var $Y string = "..."
      ...
      $ARG = $Y
      ...
  - pattern-not-inside: |
      $ARG = filepath.Clean($X)
      ...
  - pattern-not-inside: |
      $ARG = filepath.Rel($X)
      ...
  - pattern-not-inside: |
      $ARG, ... := filepath.Rel("...", "...")
      ...
  - pattern-not: os.OpenFile("..." + strconv.Itoa($I), ...)
  - pattern-not: os.OpenFile("...", ...)
  - pattern-not: os.Open("...")
  - pattern-not: os.Open("..." + strconv.Itoa($I))
  - pattern-not: ioutil.ReadFile("...", ...)
  - pattern-not: ioutil.ReadFile("..." + strconv.Itoa($I), ...)
  - pattern-either:
    - pattern: os.OpenFile($ARG, ...)
    - pattern: os.Open($ARG)
    - pattern: ioutil.ReadFile($ARG, ...)
  message: 'File open from tainted variable

    '
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/filesystem/rule-poorwritepermissions.yml"
  patterns:
  - pattern-either:
    - pattern: 'ioutil.WriteFile(..., ..., $ARG)

        '
  - metavariable-comparison:
      metavariable: "$ARG"
      comparison: "$ARG > 0o600"
      base: 8
  message: 'Expect WriteFile permissions to be 600 or less

    '
  metadata:
    cwe: 'CWE-276: Incorrect Default Permissions'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/filesystem/rule-tempfiles.yml"
  patterns:
  - pattern-either:
    - pattern: 'ioutil.WriteFile("$ARG", ...)

        '
    - pattern: 'os.Create("$ARG")

        '
  - metavariable-regex:
      metavariable: "$ARG"
      regex: "(/tmp/.*|/var/tmp/.*)"
  message: 'File creation in shared tmp directory without using ioutil.Tempfile

    '
  metadata:
    cwe: 'CWE-378: Creation of Temporary File With Insecure Permissions'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/filesystem/rule-ziparchive.yml"
  mode: taint
  pattern-sources:
  - pattern: zip.OpenReader(...)
  pattern-sinks:
  - pattern: filepath.Join(...)
  message: 'File traversal when extracting zip/tar archive

    '
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/http/rule-http_serve.yml"
  patterns:
  - pattern-inside: |
      import "net/http"
      ...
  - pattern-either:
    - pattern: http.ListenAndServe(...)
    - pattern: http.ListenAndServeTLS(...)
    - pattern: http.Serve(...)
    - pattern: http.ServeTLS(...)
  message: |
    The use of net/http serve functions without support for setting timeouts are susceptible to the
    Slowloris class of attacks.
  metadata:
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/http/rule-slowloris.yml"
  patterns:
  - pattern-inside: |
      import "net/http"
      ...
  - pattern-either:
    - patterns:
      - pattern-not-inside: |
          &http.Server{
            ...,
            ReadHeaderTimeout: ...,
            ...,
          }
      - pattern-not-inside: |
          &http.Server{
            ...,
            ReadTimeout: ...,
            ...,
          }
      - pattern-not-inside: |
          $S = &http.Server{
            ...,
          }
          $S.ReadHeaderTimeout = ...
          ...
      - pattern-not-inside: |
          $S = &http.Server{
            ...,
          }
          $S.ReadTimeout = ...
          ...
      - pattern: |
          &http.Server{
            ...,
          }
  message: 'Potential Slowloris Attack because ReadHeaderTimeout is not configured
    in the http.Server

    '
  metadata:
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/injection/rule-ssrf.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: http.Get($URL)
      - pattern-not: http.Get("...")
    - patterns:
      - pattern: http.Head($URL)
      - pattern-not: http.Head("...")
    - patterns:
      - pattern: http.Post($URL, ...)
      - pattern-not: http.Post("...", ...)
    - patterns:
      - pattern: http.PostForm($URL, ...)
      - pattern-not: http.PostForm("...", ...)
    - patterns:
      - pattern-inside: |
          $REQ, ... := http.NewRequest(..., url, ...)
          ...
          $CLIENT := &http.Client{...}
          ...
      - pattern: "$CLIENT.Do($REQ)"
    - patterns:
      - pattern-not-inside: |
          const $X = "..."
          ...
      - pattern-not-inside: |
          var $Y string = "..."
          ...
          $X = $Y
          ...
      - pattern-not-inside: |
          $Y := "..."
          ...
          $X = $Y
          ...
      - pattern: http.Get($X)
  message: 'Url provided to HTTP request as taint input

    '
  metadata:
    cwe: 'CWE-88: Improper Neutralization of Argument Delimiters in a Command'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/injection/rule-template_injection.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: template.HTML($IN)
      - pattern-not: template.HTML("...")
    - patterns:
      - pattern: template.JS($IN)
      - pattern-not: template.JS("...")
    - patterns:
      - pattern: template.URL($IN)
      - pattern-not: template.URL("...")
    - patterns:
      - pattern: template.HTMLAttr($IN)
      - pattern-not: template.HTMLAttr("...")
  message: 'Use of unescaped data in HTML templates

    '
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/leak/rule-pprof_endpoint.yml"
  patterns:
  - pattern: 'import _ "net/http/pprof"

      '
  message: 'Profiling endpoint automatically exposed on /debug/pprof

    '
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
  severity: ERROR
  languages:
  - go
- id: "../sast-rules/go/memory/rule-integer_overflow.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $X, ... := strconv.Atoi(...)
          ...
      - pattern-either:
        - pattern: int32($X)
        - pattern: int16($X)
  message: 'Potential Integer overflow made by strconv.Atoi result conversion to int16/32

    '
  metadata:
    cwe: 'CWE-190: Integer Overflow or Wraparound'
  severity: ERROR
  languages:
  - go
- id: "../sast-rules/go/memory/rule-math_big_rat.yml"
  patterns:
  - pattern-inside: |
      import "math/big"
      ...
  - pattern-inside: |
      $R = big.Rat{...}
      ...
  - pattern: "$R.SetString(...)\n"
  message: 'Potential Integer overflow made by strconv.Atoi result conversion to int16/32

    '
  metadata:
    cwe: 'CWE-190: Integer Overflow or Wraparound'
  severity: ERROR
  languages:
  - go
- id: "../sast-rules/go/memory/rule-memoryaliasing.yml"
  patterns:
  - pattern-either:
    - pattern: |
        for _, $ARG := range $SLICE {
          <... &($ARG) ...>
        }
    - pattern: |
        for _, $ARG := range $SLICE {
          <... func() { <... &$ARG ...> } ...>
        }
    - pattern: |
        for _, $ARG := range $SLICE {
          <... $X(..., <... &$ARG ...>, ...) ...>
        }
  - pattern-not: |
      for _, $ARG := range $SLICE {
        <... *$ARG ...>
      }
  - pattern-not-inside: for _, $ARG := range $SLICE { return ... }
  message: 'Implicit memory aliasing in for loop.

    '
  metadata:
    cwe: 'CWE-118: Incorrect Access of Indexable Resource (''Range Error'')'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/network/rule-bind_to_all_interfaces.yml"
  patterns:
  - pattern-either:
    - pattern: net.Listen(..., "$ADDR")
    - pattern: tls.Listen(..., "$ADDR", ...)
  - metavariable-regex:
      metavariable: "$ADDR"
      regex: 0.0.0.0:[0-9]+
  message: |
    Binding to all network interfaces can potentially open up a service to
    traffic on unintended interfaces, that may not be properly documented or
    secured. This plugin test looks for a string pattern “0.0.0.0” that may
    indicate a hardcoded binding to all network interfaces.
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A6: Security Misconfiguration'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/secrets/rule-secrets.yml"
  patterns:
  - pattern-either:
    - pattern: $MASK = "..."
  - metavariable-regex:
      metavariable: "$MASK"
      regex: "(password|pass|passwd|pwd|secret|token)"
  message: 'The use of hard-coded passwords increases the possibility of password
    guessing tremendously.

    '
  metadata:
    cwe: 'CWE-259: Use of Hard-coded Password'
    owasp: 'A3: Broken Authentication and Session Management'
  severity: ERROR
  languages:
  - go
- id: "../sast-rules/go/sql/rule-concat_sqli.yml"
  patterns:
  - pattern-inside: |
      import "database/sql"
      ...
  - pattern-either:
    - pattern: "$DB.Query($Q + $IN)"
    - pattern: "$DB.QueryContext(..., $Q + $IN)"
  - pattern-not: $DB.QueryContext(..., "..." + "...")
  - pattern-not: $DB.Query("..." + "...")
  message: 'SQL query construction using string concatenation

    '
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/sql/rule-format_string_sqli.yml"
  patterns:
  - pattern-inside: |
      $Q := fmt.Sprintf("$QUERY", ...)
      ...
  - pattern-not-inside: |
      $Q := fmt.Sprintf("$QUERY", "...")
      ...
  - pattern-not-inside: |
      pq.QuoteIdentifier(...)
      ...
  - metavariable-regex:
      metavariable: "$QUERY"
      regex: "(?i)(SELECT|DELETE|INSERT|UPDATE|INTO|FROM|WHERE).*%[^bdoxXfFp].*"
  - pattern-either:
    - pattern: "$DB.QueryContext(..., $Q)"
    - pattern: "$DB.Query($Q)"
  message: 'SQL query construction using format string

    '
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/subproc/rule-subproc.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: exec.CommandContext($CTX, $EXE, ...)
      - pattern-not: exec.CommandContext($CTX, "...", ...)
    - patterns:
      - pattern: exec.Command($EXE, ...)
      - pattern-not: exec.Command("...", ...)
    - patterns:
      - pattern: syscall.ForkExec($EXE, ...)
      - pattern-not: syscall.ForkExec("...", ...)
    - patterns:
      - pattern: syscall.StartProcess($EXE, ...)
      - pattern-not: syscall.StartProcess("...", ...)
  message: 'Audit use of command execution

    '
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - go
- id: "../sast-rules/go/unsafe/rule-unsafe.yml"
  patterns:
  - pattern-either:
    - pattern: unsafe.Alignof(...)
    - pattern: unsafe.Offsetof(...)
    - pattern: unsafe.Sizeof(...)
    - pattern: unsafe.Pointer(...)
  message: |
    Using the unsafe package in Go gives you low-level memory management and many
    of the strength of the C language but also gives flexibility to the attacker of
    your application. The pointer arithmetic is one of the examples from the unsafe
    package which can be used for data leak, memory corruption or even execution of
    attackers own script.
  metadata:
    cwe: 'CWE-242: Audit the use of unsafe block'
  severity: INFO
  languages:
  - go
- id: "../sast-rules/java/cookie/rule-CookieHTTPOnly.yml"
  pattern-either:
  - patterns:
    - pattern: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        (HttpServletResponse $RESP).addCookie($C);
    - pattern-not-inside: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        $C.setHttpOnly(true);
        ...
        (HttpServletResponse $RESP).addCookie($C);
  - pattern: "(javax.servlet.http.Cookie $C).setHttpOnly(false);"
  message: |
    A new cookie is created without the HttpOnly flag set. The HttpOnly flag is a directive to the
    browser to make sure that the cookie can not be red by malicious script. When a user is the
    target of a "Cross-Site Scripting", the attacker would benefit greatly from getting the session
    id for example.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    technology:
    - java
- id: "../sast-rules/java/cookie/rule-CookieInsecure.yml"
  pattern-either:
  - patterns:
    - pattern: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        (HttpServletResponse $RESP).addCookie($C);
    - pattern-not-inside: |
        javax.servlet.http.Cookie $C = new Cookie(..., ...);
        ...
        $C.setSecure(true);
        ...
        (HttpServletResponse $RESP).addCookie($C);
  - pattern: "(javax.servlet.http.Cookie $C).setSecure(false);"
  message: |
    "A new cookie is created without the Secure flag set. The Secure flag is a directive to the
    browser to make sure that the cookie is not sent for insecure communication (http://)"
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-539: Information Exposure Through Persistent Cookies'
    technology:
    - java
- id: "../sast-rules/java/cookie/rule-CookiePersistent.yml"
  patterns:
  - pattern-inside: "(javax.servlet.http.Cookie $C).setMaxAge($AGE);\n"
  - metavariable-comparison:
      metavariable: "$AGE"
      comparison: "$AGE >= 31536000"
  message: |
    Storing sensitive data in a persistent cookie for an extended period can lead to a breach of
    confidentiality or account compromise.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    technology:
    - java
- id: "../sast-rules/java/cookie/rule-CookieUsage.yml"
  patterns:
  - pattern-inside: |
      $FUNC(..., HttpServletRequest $REQ, ...) {
        ...
      }
  - pattern-either:
    - patterns:
      - pattern-inside: |
          for (Cookie $C : $REQ.getCookies()) {
              ...
          }
      - pattern-either:
        - pattern: "$C.getName();"
        - pattern: "$C.getValue();"
        - pattern: "$C.getPath();"
    - pattern: "(Cookie $COOKIE).getName();"
    - pattern: "(Cookie $COOKIE).getValue();"
    - pattern: "(Cookie $COOKIE).getPath();"
  message: |
    The information stored in a custom cookie should not be sensitive or related to the session.
    In most cases, sensitive data should only be stored in session and referenced by the user's
    session cookie.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    technology:
    - java
- id: "../sast-rules/java/cookie/rule-HttpResponseSplitting.yml"
  mode: taint
  pattern-sources:
  - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getParameter(...);"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACER"
        regex: ".*^(CRLF).*"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(*CRLF)"
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: new javax.servlet.http.Cookie("$KEY", ...);
  - patterns:
    - pattern-inside: |
        $C = new javax.servlet.http.Cookie("$KEY", ...);
        ...
    - pattern: "$C.setValue(...);"
  message: |
    When an HTTP request contains unexpected CR and LF characters, the server may respond with an
    output stream that is interpreted as two different HTTP responses (instead of one). An attacker
    can control the second response and mount attacks such as cross-site scripting and cache
    poisoning attacks.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
    technology:
    - java
- id: "../sast-rules/java/cookie/rule-RequestParamToCookie.yml"
  mode: taint
  pattern-sources:
  - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getParameter(...);"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACER"
        regex: ".*^(CRLF).*"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(*CRLF)"
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: new javax.servlet.http.Cookie("$KEY", ...);
  - patterns:
    - pattern-inside: |
        $C = new javax.servlet.http.Cookie("$KEY", ...);
        ...
    - pattern: "$C.setValue(...);"
  message: |
    This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added
    to an HTTP response, it will allow a HTTP response splitting vulnerability. See
    http://en.wikipedia.org/wiki/HTTP_response_splitting for more information.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
    technology:
    - java
- id: "../sast-rules/java/cookie/rule-RequestParamToHeader.yml"
  mode: taint
  pattern-sources:
  - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getParameter(...);"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACER"
        regex: ".*^(CRLF).*"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(*CRLF)"
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: (javax.servlet.http.HttpServletResponse $RES).setHeader("$KEY", ...);
  - pattern: (javax.servlet.http.HttpServletResponse $RES).addHeader("$KEY", ...);
  - pattern: (javax.servlet.http.HttpServletResponseWrapper $WRP).setHeader("$KEY",
      ...);
  - pattern: (javax.servlet.http.HttpServletResponseWrapper $WRP).addHeader("$KEY",
      ...);
  message: |
    This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP
    response splitting vulnerability. See http://en.wikipedia.org/wiki/HTTP_response_splitting for
    more information.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
    technology:
    - java
- id: "../sast-rules/java/cookie/rule-TrustBoundaryViolation.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "(HttpServletRequest $H). ... .setAttribute($ARG1, $ARG2);"
      - pattern-not: (HttpServletRequest $H). ... .setAttribute("...", "...");
    - patterns:
      - pattern: "(HttpServletRequest $H). ... .putValue($ARG1, $ARG2);"
      - pattern-not: (HttpServletRequest $H). ... .putValue("...", "...");
  languages:
  - java
  message: |
    A trust boundary can be thought of as line drawn through a program. On one side
    of the line, data is untrusted. On the other side of the line, data is assumed
    to be trustworthy. The purpose of validation logic is to allow data to safely
    cross the trust boundary - to move from untrusted to trusted. A trust boundary
    violation occurs when a program blurs the line between what is trusted and what
    is untrusted. By combining trusted and untrusted data in the same data
    structure, it becomes easier for programmers to mistakenly trust unvalidated
    data.
  metadata:
    category: security
    cwe: 'CWE-501: Trust Boundary Violation'
  severity: WARNING
- id: "../sast-rules/java/cors/rule-PermissiveCORS.yml"
  patterns:
  - pattern-either:
    - pattern: (HttpServletResponse $RES).setHeader("$HEADER", "$VAL")
    - pattern: (HttpServletResponse $RES).addHeader("$HEADER", "$VAL")
  - metavariable-regex:
      metavariable: "$HEADER"
      regex: "(?i)(Access-Control-Allow-Origin)"
  - metavariable-regex:
      metavariable: "$VAL"
      regex: "(\\*|null)"
  message: |
    Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for
    JavaScript to access the contents of a Web page, both the JavaScript and the Web page must
    originate from the same domain. Without the Same Origin Policy, a malicious website could serve
    up JavaScript that loads sensitive information from other websites using a client's
    credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible
    for JavaScript to access data across domains if a new HTTP header called
    Access-Control-Allow-Origin is defined. With this header, a Web server defines which other
    domains are allowed to access its domain using cross-origin requests. However, caution should
    be taken when defining the header because an overly permissive CORS policy will allow a
    malicious application to communicate with the victim application in an inappropriate way,
    leading to spoofing, data theft, relay and other attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    category: security
    technology:
    - java
- id: "../sast-rules/java/cors/rule-PermissiveCORSInjection.yml"
  mode: taint
  pattern-sources:
  - pattern: "(HttpServletRequest $REQ).getParamater(...)"
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletResponse $RES).setHeader("$HEADER", ...)
      - pattern: (HttpServletResponse $RES).addHeader("$HEADER", ...)
    - metavariable-regex:
        metavariable: "$HEADER"
        regex: "(?i)(Access-Control-Allow-Origin)"
  message: |
    Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for
    JavaScript to access the contents of a Web page, both the JavaScript and the Web page must
    originate from the same domain. Without the Same Origin Policy, a malicious website could serve
    up JavaScript that loads sensitive information from other websites using a client's
    credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible
    for JavaScript to access data across domains if a new HTTP header called
    Access-Control-Allow-Origin is defined. With this header, a Web server defines which other
    domains are allowed to access its domain using cross-origin requests. However, caution should
    be taken when defining the header because an overly permissive CORS policy will allow a
    malicious application to communicate with the victim application in an inappropriate way,
    leading to spoofing, data theft, relay and other attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    category: security
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-BlowfishKeySize.yml"
  patterns:
  - pattern-inside: |
      $KEYGEN = javax.crypto.KeyGenerator.getInstance("Blowfish", ...);
      ...
      $KEYGEN.init($KEY_SIZE);
  - metavariable-comparison:
      metavariable: "$KEY_SIZE"
      comparison: "$KEY_SIZE < 128"
  message: |
    A small key size makes the ciphertext vulnerable to brute force attacks. At least 128 bits of
    entropy should be used when generating the key if use of Blowfish is required.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-CipherDESInsecure.yml"
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("$ALG")
  - metavariable-regex:
      metavariable: "$ALG"
      regex: "^(DES)/.*"
  message: |
    DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage
    of AES block ciphers instead of DES.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-CipherDESedeInsecure.yml"
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("$ALG")
  - metavariable-regex:
      metavariable: "$ALG"
      regex: "^(DESede)/.*"
  message: |
    Triple DES (also known as 3DES or DESede) is considered strong ciphers for modern
    applications. NIST recommends the usage of AES block ciphers instead of 3DES.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-CipherECBMode.yml"
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-regex: "(AES|DES(ede)?)(/ECB/*)"
  message: |
    An authentication cipher mode which provides better confidentiality of the encrypted data
    should be used instead of Electronic Code Book (ECB) mode, which does not provide good
    confidentiality. Specifically, ECB mode produces the same output for the same input each time.
    This allows an attacker to intercept and replay the data.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-CipherIntegrity.yml"
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-either:
    - pattern-regex: "(/CBC/PKCS5Padding)"
    - pattern-regex: "(AES|DES(ede)?)(/ECB/*)"
  - pattern-not-regex: ".*/(CCM|CWC|OCB|EAX|GCM)/.*"
  - pattern-not-regex: "^(RSA)/.*"
  - pattern-not-regex: "^(ECIES)$"
  message: |
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the
    cipher provides no way to detect that the data has been tampered with. If the ciphertext can be
    controlled by an attacker, it could be altered without detection.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-353: Missing Support for Integrity Check'
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-CipherPaddingOracle.yml"
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-regex: "(/CBC/PKCS5Padding)"
  - pattern-not-regex: "^(RSA)/.*"
  - pattern-not-regex: "^(ECIES)$"
  message: |
    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An
    adversary could potentially decrypt the message if the system exposed the difference between
    plaintext with invalid padding or valid padding. The distinction between valid and invalid
    padding is usually revealed through distinct error messages being returned for each condition.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-696: Incorrect Behavior Order'
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-CustomMessageDigest.yml"
  patterns:
  - pattern: |
      class $CLAZZ extends java.security.MessageDigest {
        ...
      }
  message: |
    Implementing a custom MessageDigest is error-prone. National Institute of Standards and
    Technology(NIST) recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or
    SHA-512/256.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-DefaultHTTPClient.yml"
  patterns:
  - pattern: new org.apache.http.impl.client.DefaultHttpClient(...);
  message: 'DefaultHttpClient with default constructor is not compatible with TLS
    1.2

    '
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-HazelcastSymmetricEncryption.yml"
  patterns:
  - pattern: new com.hazelcast.config.SymmetricEncryptionConfig()
  message: |
    The network communications for Hazelcast is configured to use a symmetric cipher (probably DES
    or Blowfish). Those ciphers alone do not provide integrity or secure authentication. The use of
    asymmetric encryption is preferred.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-InsufficientKeySizeRsa.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $GEN = KeyPairGenerator.getInstance($ALG, ...);
          ...
      - pattern-either:
        - pattern: "$VAR.initialize($SIZE, ...);"
        - pattern: new java.security.spec.RSAKeyGenParameterSpec($SIZE,...);
      - metavariable-comparison:
          metavariable: "$SIZE"
          comparison: "$SIZE < 2048"
      - metavariable-regex:
          metavariable: "$ALG"
          regex: '"(RSA|DSA)"'
  message: |
    Detected an insufficient key size for DSA. NIST recommends a key size
    of 2048 or higher.
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
  severity: WARNING
  languages:
  - java
- id: "../sast-rules/java/crypto/rule-NullCipher.yml"
  pattern: new javax.crypto.NullCipher()
  message: |
    The NullCipher implements the Cipher interface by returning ciphertext identical to the
    supplied plaintext. In a few contexts, such as testing, a NullCipher may be appropriate. Avoid
    using the NullCipher. Its accidental use can introduce a significant confidentiality risk.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-RsaNoPadding.yml"
  patterns:
  - pattern: javax.crypto.Cipher.getInstance($ALG,...);
  - metavariable-regex:
      metavariable: "$ALG"
      regex: ".*NoPadding.*"
  message: |
    The software uses the RSA algorithm but does not incorporate Optimal Asymmetric
    Encryption Padding (OAEP), which might weaken the encryption.
  metadata:
    cwe: 'CWE-780: Use of RSA Algorithm without OAEP'
  severity: WARNING
  languages:
  - java
- id: "../sast-rules/java/crypto/rule-WeakMessageDigest.yml"
  patterns:
  - pattern-either:
    - pattern: MessageDigest.getInstance($ALG, ...)
    - pattern: Signature.getInstance($ALG, ...)
  - metavariable-regex:
      metavariable: "$ALG"
      regex: ".*(MD5|MD4|MD2|SHA1|SHA-1).*"
  message: |
    DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage
    of AES block ciphers instead of DES.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - java
- id: "../sast-rules/java/crypto/rule-WeakTLSProtocol.yml"
  patterns:
  - pattern-either:
    - pattern: new org.apache.http.impl.client.DefaultHttpClient();
    - pattern: javax.net.ssl.SSLContext.getInstance("SSL");
  message: |
    A HostnameVerifier that accept any host are often use because of certificate
    reuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middleattacks
    attacks since the client will trust any certificate.
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
  severity: WARNING
  languages:
  - java
- id: "../sast-rules/java/csrf/rule-SpringCSRFDisabled.yml"
  pattern-either:
  - pattern: "(org.springframework.security.config.annotation.web.builders.HttpSecurity
      $H). ... .csrf().disable();"
  - pattern: "(org.springframework.security.config.annotation.web.configurers.CsrfConfigurer<HttpSecurity>
      $C).disable();"
  languages:
  - java
  message: 'Disabling Spring Security''s CSRF protection is unsafe for standard web
    applications.

    '
  metadata:
    category: security
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
  severity: WARNING
- id: "../sast-rules/java/endpoint/rule-InsecureServlet.yml"
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getContentType(...)"
    - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getServerName(...)"
    - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getRequestedSessionId(...)"
    - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getParameterValues(...)"
    - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getParameterMap(...)"
    - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getParameterNames(...)"
    - pattern: "(javax.servlet.http.HttpServletRequest $REQ).getParameter(...)"
  pattern-sinks:
  - pattern-either:
    - pattern: '"..." + $PAR'
    - pattern: $PAR + "..."
  languages:
  - java
  message: |
    The Servlet can read GET and POST parameters from various methods. The
    value obtained should be considered unsafe."
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
  severity: WARNING
- id: "../sast-rules/java/endpoint/rule-JaxRsEndpoint.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @javax.ws.rs.Path("...")
        $TYPE $FUNC(..., $VAR, ...) {
          ...
        }
    - pattern: "$VAR"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACER"
        regex: ".*^(CRLF).*"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(*CRLF)"
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: return ...;
  message: |
    This method is part of a REST Web Service (JSR311). The security of this web service should be
    analyzed; Authentication, if enforced, should be tested. Access control, if enforced, should be
    tested. The inputs should be tracked for potential vulnerabilities. The communication should
    ideally be over SSL.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
    technology:
    - java
- id: "../sast-rules/java/endpoint/rule-JaxWsEndpoint.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @javax.jws.WebMethod(...)
        $TYPE $FUNC(..., $VAR, ...) {
          ...
        }
    - pattern: "$VAR"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACER"
        regex: ".*^(CRLF).*"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(*CRLF)"
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: return ...;
  message: |
    This method is part of a SOAP Web Service (JSR224). The security of this web service should be
    analyzed; Authentication, if enforced, should be tested. Access control, if enforced, should be
    tested. The inputs should be tracked for potential vulnerabilities. The communication should
    ideally be over SSL.
  languages:
  - java
  severity: INFO
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
    owasp: 'OWASP: Cross-Site Request Forgery'
    technology:
    - java
- id: "../sast-rules/java/endpoint/rule-UnencryptedSocket.yml"
  patterns:
  - pattern: new java.net.Socket(...)
  languages:
  - java
  message: |
    Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory
    does all the appropriate certificate validation checks to make sure you are not
    subject to man-in-the-middle attacks. Please read the OWASP Transport Layer
    Protection Cheat Sheet for details on how to do this correctly.
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
  severity: WARNING
- id: "../sast-rules/java/endpoint/rule-UnvalidatedRedirect.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "(HttpServletResponse $REQ).sendRedirect(...)"
      - pattern-not: (HttpServletResponse $REQ).sendRedirect("...")
    - patterns:
      - pattern: "(HttpServletResponse $REQ).addHeader(...)"
      - pattern-not: (HttpServletResponse $REQ).addHeader("...", "...")
    - patterns:
      - pattern: "(HttpServletResponse $REQ).encodeURL(...)"
      - pattern-not: (HttpServletResponse $REQ).encodeURL("...")
    - patterns:
      - pattern: "(HttpServletResponse $REQ).encodeRedirectUrl(...)"
      - pattern-not: (HttpServletResponse $REQ).encodeRedirectUrl("...")
  languages:
  - java
  message: |
    Unvalidated redirects occur when an application redirects a user to a
    destination URL specified by a user supplied parameter that is not validated.
    Such vulnerabilities can be used to facilitate phishing attacks.
  metadata:
    category: security
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
  severity: ERROR
- id: "../sast-rules/java/endpoint/rule-WeakHostNameVerification.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          class $V implements HostnameVerifier {
            ...
          }
      - pattern-inside: |
          public boolean verify(...) {
            ...
          }
      - pattern: return true;
    - patterns:
      - pattern-inside: |
          class $V implements X509TrustManager {
            ...
          }
      - pattern-either:
        - pattern: public void checkClientTrusted(...) {}
        - pattern: public void checkServerTrusted(...) {}
        - pattern: |
            public X509Certificate[] getAcceptedIssuers() {
              ...
              return null;
            }
  languages:
  - java
  message: |
    A HostnameVerifier that accept any host are often use because of certificate
    reuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middle
    attacks since the client will trust any certificate.
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
  severity: WARNING
- id: "../sast-rules/java/file/rule-FileUploadFileName.yml"
  patterns:
  - pattern-inside: |
      $FUNC(..., HttpServletRequest $REQ, ... ) {
        ...
        $FILES = (ServletFileUpload $SFU).parseRequest($REQ);
        ...
      }
  - pattern-inside: |
      for(FileItem $ITEM : $FILES) {
        ...
      }
  - pattern: "$ITEM.getName()"
  message: |
    The filename provided by the FileUpload API can be tampered with by the client to reference
    unauthorized files. The provided filename should be properly validated to ensure it's properly
    structured, contains no unauthorized path characters (e.g., / \), and refers to an authorized
    file.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
- id: "../sast-rules/java/file/rule-FilenameUtils.yml"
  patterns:
  - pattern-inside: |
      import static org.apache.commons.io.FilenameUtils;
      ...
  - pattern-either:
    - pattern: normalize(...)
    - pattern: getExtension(...)
    - pattern: isExtensions(...)
    - pattern: getName(...)
    - pattern: getBaseName(...)
    - pattern: org.apache.commons.io.FilenameUtils.normalize(...)
    - pattern: org.apache.commons.io.FilenameUtils.getExtension(...)
    - pattern: org.apache.commons.io.FilenameUtils.isExtensions(...)
    - pattern: org.apache.commons.io.FilenameUtils.getName(...)
    - pattern: org.apache.commons.io.FilenameUtils.getBaseName(...)
  message: |
    A file is opened to read its content. The filename comes from an input
    parameter. If an unfiltered parameter is passed to this file API, files from an
    arbitrary filesystem location could be read.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
- id: "../sast-rules/java/form/rule-FormValidate.yml"
  patterns:
  - pattern-inside: |
      class $CLASS extends $SC {
        ...
      }
  - metavariable-regex:
      metavariable: "$SC"
      regex: "(ActionForm|ValidatorForm)"
  - pattern-not: public void validate() { ... }
  languages:
  - java
  message: |
    Form inputs should have minimal input validation. Preventive validation helps
    provide defense in depth against a variety of risks.
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
  severity: WARNING
- id: "../sast-rules/java/inject/rule-AWSQueryInjection.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(..., $VAR, ...) {
          ...
        }
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: |
        $FUNC(...) {
          ...
          $VAR = ... + $X;
          ...
        }
    - pattern: "$VAR"
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REQ = new SelectRequest($QUERY, ...);
          ...
          $DB.select($REQ);
      - pattern-inside: "$DB.select(new SelectRequest($QUERY,...));\n"
      - pattern-inside: "$DB.select((SelectRequest $SR).withSelectExpression($QUERY,...));\n"
    - pattern: "$QUERY"
    - metavariable-pattern:
        metavariable: "$DB"
        pattern-either:
        - pattern: "(AmazonSimpleDB $DB)"
        - pattern: "(AmazonSimpleDBClient $DB)"
  message: |
    Constructing SimpleDB queries containing user input can allow an attacker to view unauthorized
    records.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-BeanPropertyInjection.yml"
  patterns:
  - pattern-inside: "$TYPE $FUNC(..., HttpServletRequest $REQ, ...) { ... }"
  - pattern-either:
    - pattern: |
        $MAP.put(..., $REQ.getParameter(...));
        ...
        $BEAN_UTIL.populate(..., $MAP);
    - pattern: |
        while (...) {
            ...
            $MAP.put(..., $REQ.getParameterValues(...));
        }
        ...
        $BEAN_UTIL.populate(..., $MAP);
  - metavariable-pattern:
      metavariable: "$BEAN_UTIL"
      pattern-either:
      - pattern: "(BeanUtilsBean $B)"
      - pattern: new BeanUtilsBean()
      - pattern: org.apache.commons.beanutils.BeanUtils
  message: |
    An attacker can set arbitrary bean properties that can compromise system integrity. An
    attacker can leverage this functionality to access special bean properties like
    class.classLoader that will allow them to override system properties and potentially execute
    arbitrary code.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-15: External Control of System or Configuration Setting'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-CLRFInjectionLogs.yml"
  patterns:
  - pattern-either:
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $LOGGER.$METHOD(...,$TAINTED,...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $VAR = String.Format(..., $TAINTED,...);
        ...
        $LOGGER.$METHOD(...,$VAR,...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $LOGGER.$METHOD(...,String.Format(..., $TAINTED,...),...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $VAR = ... + $TAINTED + ...;
        ...
        $LOGGER.$METHOD(...,$VAR,...);
    - pattern: |
        $TAINTED = (HttpServletRequest $REQ).getParameter(...);
        ...
        $LOGGER.$METHOD(...,... + $TAINTED + ...,...);
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(log|logp|logrb|entering|exiting|fine|finer|finest|info|debug|trace|warn|warning|config|error|severe)"
  - metavariable-pattern:
      metavariable: "$LOGGER"
      pattern-either:
      - pattern: "(Logger $LOG)"
      - pattern: org.pmw.tinylog.Logger
      - pattern: org.apache.log4j.Logger
      - pattern: org.apache.logging.log4j.Logger
      - pattern: org.slf4j.Logger
      - pattern: org.apache.commons.logging.Log
      - pattern: java.util.logging.Logger
  message: |
    When data from an untrusted source is put into a logger and not neutralized correctly, an
    attacker could forge log entries or include malicious content. Inserted false entries could be
    used to skew statistics, distract the administrator or even to implicate another party in the
    commission of a malicious act. If the log file is processed automatically, the attacker can
    render the file unusable by corrupting the format of the file or injecting unexpected
    characters. An attacker may also inject code or other commands into the log file and take
    advantage of a vulnerability in the log processing utility (e.g. command injection or XSS).
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-93: Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-CommandInjection.yml"
  pattern-either:
  - patterns:
    - pattern-inside: |
        $FUNC(...,String $PARAM, ...) {
          ...
        }
    - pattern-either:
      - pattern: "(Runtime $R).exec($PARAM,...);"
      - patterns:
        - pattern-either:
          - pattern: |
              $CMDARR = new String[]{"$SHELL",...,$PARAM,...};
              ...
              (Runtime $R).exec($CMDARR,...);
          - pattern: (Runtime $R).exec(new String[]{"$SHELL",...,$PARAM,...}, ...);
          - pattern: (Runtime $R).exec(java.util.String.format("...", ...,$PARAM,...));
          - pattern: "(Runtime $R).exec((String $A) + (String $B));"
        - metavariable-regex:
            metavariable: "$SHELL"
            regex: "(/.../)?(sh|bash|ksh|csh|tcsh|zsh)$"
    - pattern-not: (Runtime $R).exec("...","...","...",...);
    - pattern-not: '(Runtime $R).exec(new String[]{"...","...","...",...},...);

        '
  - patterns:
    - pattern-inside: |
        $FUNC(...,String $PARAM, ...) {
          ...
        }
    - pattern-either:
      - pattern: "(ProcessBuilder $PB).command($PARAM,...);"
      - patterns:
        - pattern-either:
          - pattern: (ProcessBuilder $PB).command("$SHELL",...,$PARAM,...);
          - pattern: |
              $CMDARR = java.util.Arrays.asList("$SHELL",...,$PARAM,...);
              ...
              (ProcessBuilder $PB).command($CMDARR,...);
          - pattern: (ProcessBuilder $PB).command(java.util.Arrays.asList("$SHELL",...,$PARAM,...),...);
          - pattern: (ProcessBuilder $PB).command(java.util.String.format("...", ...,$PARAM,...));
          - pattern: "(ProcessBuilder $PB).command((String $A) + (String $B));"
        - metavariable-regex:
            metavariable: "$SHELL"
            regex: "(/.../)?(sh|bash|ksh|csh|tcsh|zsh)$"
    - pattern-not: (ProcessBuilder $PB).command("...","...","...",...);
    - pattern-not: '(ProcessBuilder $PB).command(java.util.Arrays.asList("...","...","...",...));

        '
  message: |
    The highlighted API is used to execute a system command. If unfiltered input is passed to this
    API, it can lead to arbitrary command execution.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-CustomInjection.yml"
  patterns:
  - pattern-either:
    - pattern: |
        $QUERY = ... + $VAR + ...;
        ...
        $ST.executeQuery($QUERY);
    - pattern: |
        $QUERY = ... + $VAR ;
        ...
        $ST.executeQuery($QUERY);
    - pattern: |
        $QUERY = String.format("...",...,$VAR,...);
        ...
        $ST.executeQuery($QUERY);
    - pattern: "$ST.executeQuery((StringBuilder $SB).toString());"
    - pattern: "$ST.executeQuery(... + $VAR + ...);"
    - pattern: "$ST.executeQuery(... + $VAR);"
    - pattern: $ST.executeQuery(...,String.format("...",...,$VAR,...), ...);
  - metavariable-pattern:
      metavariable: "$ST"
      pattern-either:
      - pattern: "(java.sql.Statement $ST)"
      - pattern: "(org.apache.turbine.om.peer.BasePeer $ST)"
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-CustomInjectionSQLString.yml"
  patterns:
  - pattern-not-inside: 'final String $VAR = ...;

      '
  - pattern-either:
    - pattern: '"$SQL_STR" + ...

        '
    - pattern: String.format("$SQL_STR", ...)
    - pattern: '"$SQL_STR".concat(...)

        '
    - pattern: (StringBuilder $BUILDER). ... .append("$SQL_STR")
    - patterns:
      - pattern-inside: |
          StringBuilder $BUILDER = new StringBuilder("$SQL_STR");
          ...
      - pattern: "$BUILDER.append(...)"
    - patterns:
      - pattern-inside: |
          $QUERY = "$SQL_STR";
          ...
      - pattern: "$QUERY += ..."
  - metavariable-regex:
      metavariable: "$SQL_STR"
      regex: "(?i)(select|insert|create|update|alter|delete|drop)\\b"
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-ELInjection.yml"
  patterns:
  - pattern-inside: |
      $FUNC(..., String $EXPR, ...) {
        ...
        ELContext $CTX = ...;
        ...
      }
  - pattern-either:
    - pattern: "(ExpressionFactory $EXP).createValueExpression((ELContext $CTX), $EXPR,
        ...)"
    - pattern: "(ExpressionFactory $EXP).createMethodExpression((ELContext $CTX),
        $EXPR, ...)"
  message: |
    An expression is built with a dynamic value. The source of the value(s) should be verified to
    avoid that unfiltered values fall into this risky code evaluation.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-FileDisclosure.yml"
  mode: taint
  pattern-sources:
  - pattern: "(javax.servlet.http.HttpServletRequest $VAR).getParameter(...)"
  pattern-sinks:
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST);
    - pattern: "$FST"
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST, $SND);
    - pattern: "$FST"
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST, $SND, $TRD);
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND, $TRD)
    - pattern: "$SND"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND, $TRD)
    - pattern: "$TRD"
  - patterns:
    - pattern-inside: |
        $ACTION = new org.apache.struts.action.ActionForward();
        ...
    - pattern: "$ACTION.setPath(...)"
  - patterns:
    - pattern-inside: |
        $MVC = new org.springframework.web.servlet.ModelAndView();
        ...
    - pattern: "$MVC.setViewName(...);"
  - patterns:
    - pattern-inside: |
        $REQ = $HTTP.getRequestDispatcher(...);
        ...
    - pattern-either:
      - pattern: "$REQ.include($FST, $SND)"
      - pattern: "$REQ.forward($FST, $SND)"
  languages:
  - java
  message: |
    Constructing a server-side redirect path with user input could allow an
    attacker to download application binaries (including application classes or
    jar files) or view arbitrary files within protected directories.
  metadata:
    category: security
    cwe: 'CWE-552: Files or Directories Accessible to External Parties'
  severity: ERROR
- id: "../sast-rules/java/inject/rule-HttpParameterPollution.yml"
  mode: taint
  pattern-sources:
  - pattern: "(HttpServletRequest $REQ).getParameter(...)"
  pattern-sanitizers:
  - pattern: java.net.URLEncoder.encode(...)
  - pattern: com.google.common.net.UrlEscapers.urlPathSegmentEscaper().escape(...)
  pattern-sinks:
  - pattern: new org.apache.http.client.methods.HttpGet(...)
  - pattern: new org.apache.commons.httpclient.methods.GetMethod(...)
  - pattern: "(org.apache.commons.httpclient.methods.GetMethod $GM).setQueryString(...)"
  message: |
    Concatenating unvalidated user input into a URL can allow an attacker to override the value of
    a request parameter. Attacker may be able to override existing parameter values, inject a new
    parameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks
    consist of injecting encoded query string delimiters into other existing parameters. If a web
    application does not properly sanitize the user input, a malicious user may compromise the
    logic of the application to perform either client-side or server-side attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-88: Improper Neutralization of Argument Delimiters in a Command (''Argument
      Injection'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-LDAPInjection.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(..., $VAR, ...) {
          ...
        }
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: |
        $FUNC(..., $X, ...) {
          ...
          $VAR = ... + $X;
          ...
        }
    - pattern: "$VAR"
  pattern-sinks:
  - pattern: javax.naming.ldap.LdapName(...)
  - pattern: "(javax.naming.directory.Context $C).lookup(...)"
  - pattern: "(javax.naming.Context $C).lookup(...)"
  - patterns:
    - pattern-inside: "(java.util.Properties $P).put($KEY, $VAL)"
    - pattern-not-inside: |
        $FUNC(..., $VAL, ...) {
          ...
        }
    - pattern: "$VAL"
  - patterns:
    - pattern-inside: "(com.unboundid.ldap.sdk.LDAPConnection $C).search($QUERY, ...)"
    - pattern: "$QUERY"
  - patterns:
    - pattern-either:
      - pattern: "$CTX.lookup(...)"
      - patterns:
        - pattern-inside: "$CTX.search($QUERY, ...)"
        - pattern: "$QUERY"
      - patterns:
        - pattern-inside: "$CTX.search($NAME, $FILTER, ...)"
        - pattern: "$FILTER"
    - metavariable-pattern:
        metavariable: "$CTX"
        pattern-either:
        - pattern: "(javax.naming.directory.DirContext $C)"
        - pattern: "(javax.naming.directory.InitialDirContext $IDC)"
        - pattern: "(javax.naming.ldap.LdapContext $LC)"
        - pattern: "(javax.naming.event.EventDirContext $EDC)"
        - pattern: "(com.sun.jndi.ldap.LdapCtx $LC)"
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: "$CTX.list($QUERY, ...)"
        - pattern: "$QUERY"
      - patterns:
        - pattern-inside: "$CTX.lookup($QUERY, ...)"
        - pattern: "$QUERY"
      - patterns:
        - pattern-inside: "$CTX.search($QUERY, ...)"
        - pattern: "$QUERY"
      - patterns:
        - pattern-inside: "$CTX.search($NAME, $FILTER, ...)"
        - pattern: "$FILTER"
    - metavariable-pattern:
        metavariable: "$CTX"
        pattern-either:
        - pattern: "(org.springframework.ldap.core.LdapTemplate $LT)"
        - pattern: "(org.springframework.ldap.core.LdapOperations $LO)"
  message: |
    Just like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately,
    LDAP doesn't have prepared statement interfaces like SQL. Therefore, the primary defense
    against LDAP injection is strong input validation of any untrusted data before including it in
    an LDAP query.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query
      (''LDAP Injection'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-OgnlInjection.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(..., $VAR, ...) {
          ...
        }
    - metavariable-pattern:
        metavariable: "$VAR"
        pattern-either:
        - pattern: "(String $S)"
        - pattern: "(Map<String, ?> $M)"
        - pattern: "(Map<String, String> $M)"
        - pattern: "(Map<String, Object> $M)"
    - pattern: "$VAR"
  pattern-sinks:
  - patterns:
    - pattern-inside: com.opensymphony.xwork2.util.TextParseUtil.translateVariables($VAL,
        ...)
    - pattern: "$VAL"
  - patterns:
    - pattern-inside: com.opensymphony.xwork2.util.TextParseUtil.translateVariablesCollection($VAL,
        ...)
    - pattern: "$VAL"
  - pattern: com.opensymphony.xwork2.util.TextParseUtil.shallBeIncluded(...)
  - pattern: com.opensymphony.xwork2.util.TextParseUtil.commaDelimitedStringToSet(...)
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.TextParser $P).evaluate($VAR,
        $VAL, ...)"
    - pattern: "$VAL"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.OgnlTextParser $P).evaluate($VAR,
        $VAL, ...)"
    - pattern: "$VAL"
  - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getGetMethod($CLZ,
      ...)"
  - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getSetMethod($CLZ,
      ...)"
  - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getField($CLZ,
      ...)"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setProperties($MAP,
        ...)"
    - pattern: "$MAP"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setProperty($VAL,
        ...)"
    - pattern: "$VAL"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getValue($VAL,
        ...)"
    - pattern: "$VAL"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setValue($VAL,
        ...)"
    - pattern: "$VAL"
  - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getGetMethod($CLZ,
      ...)"
  - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getSetMethod($CLZ,
      ...)"
  - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getField($CLZ,
      ...)"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).setProperties($MAP, ...)"
    - pattern: "$MAP"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).setProperty($VAR, ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).getValue($VAR, ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider
        $P).setValue($VAR, ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).setProperties($MAP,
        ...)"
    - pattern: "$MAP"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).setProperty($VAR,
        ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).getValue($VAR, ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).setValue($VAR, ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).callMethod($VAR,
        ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).compile($VAR, ...)"
    - pattern: "$VAR"
  - pattern: "(org.apache.struts2.util.VelocityStrutsUtil $P).evaluate(...)"
  - pattern: org.apache.struts2.util.StrutsUtil.findString(...)
  - pattern: org.apache.struts2.util.StrutsUtil.findValue(..., $VAL)
  - pattern: org.apache.struts2.util.StrutsUtil.getText(...)
  - pattern: org.apache.struts2.util.StrutsUtil.translateVariables(...)
  - patterns:
    - pattern-inside: org.apache.struts2.util.StrutsUtil.makeSelectList($VAR, ...)
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(org.apache.struts2.views.jsp.ui.OgnlTool $T).findValue($VAR,
        ...)"
    - pattern: "$VAR"
  - pattern: "(com.opensymphony.xwork2.util.ValueStack $V).findString(...)"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.ValueStack $V).findValue($VAR,
        ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.ValueStack $V).setValue($VAR,
        ...)"
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: "(com.opensymphony.xwork2.util.ValueStack $V).setParameter($VAR,
        ...)"
    - pattern: "$VAR"
  message: |
    "A expression is built with a dynamic value. The source of the value(s) should be verified to
    avoid that unfiltered values fall into this risky code evaluation."
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    technology:
    - java
- id: "../sast-rules/java/inject/rule-PathTraversalIn.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(String[] $ARGS) {
          ...
        }
    - pattern: "$ARGS[$IDX]"
  - patterns:
    - pattern-inside: |
        $FUNC(..., String $VAR, ...) {
          ...
        }
    - pattern: "$VAR"
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: "$U = new java.net.URI($VAR)\n"
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: "$INPUT"
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - patterns:
    - pattern-either:
      - pattern-inside: new java.io.File(...,(String $VAR), ...)
      - pattern-inside: java.nio.file.Paths.get(...,(String $VAR),...)
      - pattern-inside: java.io.File.createTempFile(...,(String $VAR), ...)
      - pattern-inside: java.io.File.createTempDirectory(...,(String $VAR),...)
      - pattern-inside: java.nio.file.Files.createTempFile(..., (String $VAR), ...)
      - pattern-inside: java.nio.file.Files.createTempDirectory(..., (String $VAR),
          ...)
    - pattern: "$VAR"
  message: |
    A file is opened to read its content. The filename comes from an input parameter. If an
    unfiltered parameter is passed to this file API, files from an arbitrary filesystem location
    could be read. This rule identifies potential path traversal vulnerabilities. In many cases,
    the constructed file path cannot be controlled by the user.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-PathTraversalOut.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(String[] $ARGS) {
          ...
        }
    - pattern: "$ARGS[$IDX]"
  - patterns:
    - pattern-inside: |
        $FUNC(..., String $VAR, ...) {
          ...
        }
    - pattern: "$VAR"
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: "$PATH"
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: "$PATH"
  message: |
    A file is opened to write to its contents. The filename comes from an input parameter. If an
    unfiltered parameter is passed to this file API, files at an arbitrary filesystem location
    could be modified. This rule identifies potential path traversal vulnerabilities. In many
    cases, the constructed file path cannot be controlled by the user.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-SpotbugsPathTraversalAbsolute.yml"
  mode: taint
  pattern-sources:
  - pattern: "(HttpServletRequest $REQ).getParameter(...)"
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: "$U = new java.net.URI($VAR)\n"
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: "$INPUT"
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - pattern: new java.io.File(...)
  - pattern: java.nio.file.Paths.get(...)
  - pattern: java.io.File.createTempFile(...)
  - pattern: java.io.File.createTempDirectory(...)
  - pattern: java.nio.file.Files.createTempFile(...)
  - pattern: java.nio.file.Files.createTempDirectory(...)
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: "$PATH"
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: "$PATH"
  message: |
    "The software uses an HTTP request parameter to construct a pathname that should be within a
    restricted directory, but it does not properly neutralize absolute path sequences such as
    "/abs/path" that can resolve to a location that is outside of that directory. See
    http://cwe.mitre.org/data/definitions/36.html for more information."
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-SpotbugsPathTraversalRelative.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $P = (HttpServletRequest $REQ).getParameter(...);
        ...
    - pattern-either:
      - pattern: "$P + ..."
      - pattern: "... + $P"
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: "$U = new java.net.URI($VAR)\n"
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: "$INPUT"
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - pattern: new java.io.File(...)
  - pattern: java.nio.file.Paths.get(...)
  - pattern: java.io.File.createTempFile(...)
  - pattern: java.io.File.createTempDirectory(...)
  - pattern: java.nio.file.Files.createTempFile(...)
  - pattern: java.nio.file.Files.createTempDirectory(...)
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: "$PATH"
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: "$PATH"
  message: |
    "The software uses an HTTP request parameter to construct a pathname that should be within a
    restricted directory, but it does not properly neutralize sequences such as ".." that can
    resolve to a location that is outside of that directory. See
    http://cwe.mitre.org/data/definitions/23.html for more information."
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - java
- id: "../sast-rules/java/inject/rule-SqlInjection.yml"
  patterns:
  - pattern-not-inside: |
      final String $ARG = ...;
      ...
  - pattern-not-inside: |
      class $CLAZZ {
        ...
        final String $ARG = ...;
        ...
      }
  - pattern-either:
    - patterns:
      - pattern: "(javax.jdo.PersistenceManager $PM).newQuery($ARG)"
      - pattern-not: (javax.jdo.PersistenceManager $PM).newQuery("...")
    - patterns:
      - pattern: "(javax.jdo.PersistenceManager $PM).newQuery(..., $ARG)"
      - pattern-not: (javax.jdo.PersistenceManager $PM).newQuery(..., "...")
    - patterns:
      - pattern: "(javax.jdo.Query $Q).setFilter($ARG)"
      - pattern-not: (javax.jdo.Query $Q).setFilter("...")
    - patterns:
      - pattern: "(javax.jdo.Query $Q).setGrouping($ARG)"
      - pattern-not: (javax.jdo.Query $Q).setGrouping("...")
    - patterns:
      - pattern: "(javax.jdo.Query $Q).setGrouping($ARG)"
      - pattern-not: (javax.jdo.Query $Q).setGrouping("...")
    - patterns:
      - pattern: org.hibernate.criterion.Restrictions.sqlRestriction($ARG, ...)
      - pattern-not: org.hibernate.criterion.Restrictions.sqlRestriction("...", ...)
    - patterns:
      - pattern: "(org.hibernate.Session $S).createQuery((String $ARG), ...)"
      - pattern-not: (org.hibernate.Session $S).createQuery("...", ...)
    - patterns:
      - pattern: "(org.hibernate.Session $S).createSQLQuery($ARG, ...)"
      - pattern-not: (org.hibernate.Session $S).createSQLQuery("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).executeQuery($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).createSQLQuery("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).execute($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).execute("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).executeUpdate($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).executeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).executeLargeUpdate($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).executeLargeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.Statement $S).addBatch($ARG, ...)"
      - pattern-not: (java.sql.Statement $S).addBatch("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).executeQuery($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).executeQuery("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).execute($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).execute("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).executeUpdate($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).executeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).executeLargeUpdate($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).executeLargeUpdate("...", ...)
    - patterns:
      - pattern: "(java.sql.PreparedStatement $S).addBatch($ARG, ...)"
      - pattern-not: (java.sql.PreparedStatement $S).addBatch("...", ...)
    - patterns:
      - pattern: "(java.sql.Connection $S).prepareCall($ARG, ...)"
      - pattern-not: (java.sql.Connection $S).prepareCall("...", ...)
    - patterns:
      - pattern: "(java.sql.Connection $S).prepareStatement($ARG, ...)"
      - pattern-not: (java.sql.Connection $S).prepareStatement("...", ...)
    - patterns:
      - pattern: "(java.sql.Connection $S).nativeSQL($ARG, ...)"
      - pattern-not: (java.sql.Connection $S).nativeSQL("...", ...)
    - patterns:
      - pattern: new org.springframework.jdbc.core.PreparedStatementCreatorFactory($ARG,
          ...)
      - pattern-not: new org.springframework.jdbc.core.PreparedStatementCreatorFactory("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.PreparedStatementCreatorFactory $F).newPreparedStatementCreator($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.PreparedStatementCreatorFactory
          $F).newPreparedStatementCreator("...", ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).batchUpdate($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).batchUpdate("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).execute($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).execute("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).query($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).query("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForList($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForList("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForMap($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForMap("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForInt($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForInt("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForLong($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).queryForLong("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).udpate($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcOperations $O).udpate("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).execute($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).execute("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).query($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).query("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForList($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForList("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForMap($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForMap("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForObject($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForObject("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForInt($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForInt("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForLong($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).queryForLong("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).update($ARG, ...)"
      - pattern-not: (org.springframework.jdbc.core.JdbcTemplate $O).update("...",
          ...)
    - patterns:
      - pattern: "(io.vertx.sqlclient.SqlClient $O).query($ARG, ...)"
      - pattern-not: (io.vertx.sqlclient.SqlClient $O).query("...", ...)
    - patterns:
      - pattern: "(io.vertx.sqlclient.SqlClient $O).preparedQuery($ARG, ...)"
      - pattern-not: (io.vertx.sqlclient.SqlClient $O).preparedQuery("...", ...)
    - patterns:
      - pattern: "(io.vertx.sqlclient.SqlConnection $O).prepare($ARG, ...)"
      - pattern-not: (io.vertx.sqlclient.SqlConnection $O).prepare("...", ...)
    - patterns:
      - pattern: "(org.apache.turbine.om.peer.BasePeer $O).executeQuery($ARG, ...)"
      - pattern-not: (org.apache.turbine.om.peer.BasePeer $O).executeQuery("...",
          ...)
    - patterns:
      - pattern: "(org.apache.torque.util.BasePeer $O).executeQuery($ARG, ...)"
      - pattern-not: (org.apache.torque.util.BasePeer $O).executeQuery("...", ...)
    - patterns:
      - pattern: "(javax.persistence.EntityManager $O).createQuery($ARG, ...)"
      - pattern-not: (javax.persistence.EntityManager $O).createQuery("...", ...)
    - patterns:
      - pattern: "(javax.persistence.EntityManager $O).createNativeQuery($ARG, ...)"
      - pattern-not: (javax.persistence.EntityManager $O).createNativeQuery("...",
          ...)
  languages:
  - java
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
  severity: ERROR
- id: "../sast-rules/java/ldap/rule-AnonymousLDAP.yml"
  patterns:
  - pattern-inside: |
      import javax.naming.Context;
      ...
  - pattern: $ENV.put(Context.SECURITY_AUTHENTICATION, "none");
  languages:
  - java
  message: |
    Without proper access control, executing an LDAP statement that contains a
    user-controlled value can allow an attacker to abuse poorly configured LDAP
    context
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
  severity: WARNING
- id: "../sast-rules/java/ldap/rule-EntryPoisoning.yml"
  patterns:
  - pattern: new javax.naming.directory.SearchControls($SCOPE, $CLIMIT, $TLIMIT, $ATTR,
      true, $DEREF)
  languages:
  - java
  message: |
    Without proper access control, executing an LDAP statement that contains a
    user-controlled value can allow an attacker to abuse poorly configured LDAP
    context
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
  severity: ERROR
- id: "../sast-rules/java/password/rule-ConstantDBPassword.yml"
  patterns:
  - pattern: java.sql.DriverManager.getConnection($URI, $USR, "...");
  message: |
    This code creates a database connect using a hardcoded, constant password. Anyone with access
    to either the source code or the compiled code can easily learn the password.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-259: Use of Hard-coded Password'
    technology:
    - java
- id: "../sast-rules/java/password/rule-EmptyDBPassword.yml"
  patterns:
  - pattern: java.sql.DriverManager.getConnection($URI, $USR, "");
  message: |
    This code creates a database connect using a blank or empty password. This indicates that the
    database is not protected by a password.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-259: Use of Hard-coded Password'
    technology:
    - java
- id: "../sast-rules/java/password/rule-HardcodeKey.yml"
  pattern-either:
  - patterns:
    - pattern-not-inside: |
        $FUNC(...,byte[] $KEY_BYTES, ...) {
            ...
        }
    - pattern-either:
      - pattern: new DESKeySpec((byte[] $KEY_BYTES));
      - pattern: new DESedeKeySpec((byte[] $KEY_BYTES));
      - pattern: new KerberosKey(..., (byte[] $KEY_BYTES), ..., ...);
      - pattern: new SecretKeySpec((byte[] $KEY_BYTES), ...);
      - pattern: new X509EncodedKeySpec((byte[] $KEY_BYTES));
      - pattern: new PKCS8EncodedKeySpec((byte[] $KEY_BYTES));
      - pattern: new KeyRep(...,(byte[] $KEY_BYTES));
      - pattern: new KerberosTicket(...,(byte[] $KEY_BYTES),...);
    - metavariable-pattern:
        metavariable: "$KEY_BYTES"
        patterns:
        - pattern-not-regex: "(null)"
  - patterns:
    - pattern-not-inside: |
        $FUNC(..., BigInteger $PRIVATE_KEY, ...) {
            ...
        }
    - pattern-either:
      - pattern: new DSAPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new DSAPublicKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new DHPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new DHPublicKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new ECPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAPrivateKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAMultiPrimePrivateCrtKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAPrivateCrtKeySpec((BigInteger $PRIVATE_KEY), ...);
      - pattern: new RSAPublicKeySpec((BigInteger $PRIVATE_KEY), ...);
    - metavariable-pattern:
        metavariable: "$PRIVATE_KEY"
        patterns:
        - pattern-not-regex: "(null)"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - java
- id: "../sast-rules/java/password/rule-HardcodeKeyEquals.yml"
  patterns:
  - pattern-not-inside: |
      $FUNC(..., $VAR_NAME, ...) {
          ...
      }
  - pattern-either:
    - pattern: "(String $VAR_NAME).equals(...)"
    - pattern: "(String $OTHER).equals((String $VAR_NAME))"
    - pattern: java.util.Arrays.equals(...,(String $VAR_NAME),...)
    - pattern: "(byte[] $VAR_NAME).equals(...)"
    - pattern: "(byte[] $OTHER).equals((byte[] $VAR_NAME))"
    - pattern: java.util.Arrays.equals(...,(byte[] $VAR_NAME),...)
    - pattern: java.lang.Byte.comapre(...,(byte[] $VAR_NAME),...)
    - pattern: "(char[] $VAR_NAME).equals(...)"
    - pattern: "(char[] $OTHER).equals((char[] $VAR_NAME))"
    - pattern: java.util.Arrays.equals(...,(char[] $VAR_NAME),...)
  - metavariable-regex:
      metavariable: "$VAR_NAME"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - java
- id: "../sast-rules/java/password/rule-HardcodeKeySuspiciousName.yml"
  patterns:
  - pattern-either:
    - pattern: String $VAR = "...";
    - pattern: byte[] $VAR = {...};
    - pattern: byte[] $VAR = new byte[]{...};
    - pattern: char[] $VAR = {...};
    - pattern: char[] $VAR = new char[]{...};
  - metavariable-regex:
      metavariable: "$VAR"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - java
- id: "../sast-rules/java/password/rule-HardcodeKeySuspiciousValue.yml"
  patterns:
  - pattern: String $VAR = "$VAL";
  - metavariable-regex:
      metavariable: "$VAL"
      regex: "(?i).*(password|motdepasse|heslo|adgangskode|wachtwoord|salasana|passwort|passord|senha|geslo|clave|losenord|clave|parola|secret|pwd).*"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - java
- id: "../sast-rules/java/password/rule-HardcodePassword.yml"
  patterns:
  - pattern-either:
    - pattern-inside: |
        char[] $PWD = ...;
        ...
    - pattern-inside: |
        String $PWD = ...;
        ...
    - pattern-inside: |
        public class $CLAZZ {
        final char[] $PWD = ...;
          ...
        }
    - pattern-inside: |
        public class $CLAZZ {
        final String $PWD = ...;
          ...
        }
    - pattern-inside: |
        $S = new SymmetricEncryptionConfig(...);
        ...
  - pattern-either:
    - pattern: (java.security.KeyStore $KS).load(..., "...")
    - pattern: (java.security.KeyStore $KS).load(..., "...".$FOO(...))
    - pattern: "(java.security.KeyStore $KS).load(..., $PWD)"
    - pattern: "(java.security.KeyStore $KS).load(..., $PWD.$FOO(...))"
    - pattern: KeyManagerFactory.getInstance(...).init(..., $PWD);
    - pattern: KeyManagerFactory.getInstance(...).init(..., $PWD.$FOO(...));
    - pattern: KeyManagerFactory.getInstance(...).init(..., "...");
    - pattern: KeyManagerFactory.getInstance(...).init(..., "...".$FOO(...));
    - pattern: (java.security.KeyStore $KS).getInstance(...).load(..., "...")
    - pattern: (java.security.KeyStore $KS).getInstance(...).load(..., "...".$FOO(...))
    - pattern: "(java.security.KeyStore $KS).getInstance(...).load(..., $PWD)"
    - pattern: "(java.security.KeyStore $KS).getInstance(...).load(..., $PWD.$FOO(...))"
    - pattern: KeyStore.getInstance(...).load(..., "...");
    - pattern: KeyStore.getInstance(...).load(..., "...".$FOO(...));
    - pattern: KeyStore.getInstance(...).load(..., $PWD);
    - pattern: KeyStore.getInstance(...).load(..., $PWD.$FOO(...));
    - pattern: new PBEKeySpec("...", ...)
    - pattern: new PBEKeySpec("...".$FOO(...), ...)
    - pattern: new PBEKeySpec($PWD, ...)
    - pattern: new PBEKeySpec($PWD.$FOO(...), ...)
    - pattern: new PasswordAuthentication("...", "...")
    - pattern: new PasswordAuthentication("...", "...".$FOO(...))
    - pattern: new PasswordAuthentication("...", $PWD)
    - pattern: new PasswordAuthentication("...", $PWD.$FOO(...))
    - pattern: (PasswordCallback $CB).setPassword("...")
    - pattern: (PasswordCallback $CB).setPassword("...".$FOO(...))
    - pattern: "(PasswordCallback $CB).setPassword($PWD)"
    - pattern: "(PasswordCallback $CB).setPassword($PWD.$FOO(...))"
    - pattern: new KeyStore.PasswordProtection("...")
    - pattern: new KeyStore.PasswordProtection("...".$FOO(...))
    - pattern: new KeyStore.PasswordProtection($PWD)
    - pattern: new KeyStore.PasswordProtection($PWD.$FOO(...))
    - pattern: new KerberosKey(...,"...",...);
    - pattern: new KerberosKey(...,"...".$FOO(...),...);
    - pattern: new KerberosKey(...,$PWD,...);
    - pattern: new KerberosKey(...,$PWD.$FOO(...),...);
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD);"
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...");
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...".$FOO(...));
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD.$FOO(...));"
    - pattern: (java.sql.DriverManager).getConnection(..., "...");
    - pattern: (java.sql.DriverManager).getConnection(..., "...".$FOO(...));
    - pattern: "(java.sql.DriverManager).getConnection(..., $PWD);"
    - pattern: "(java.sql.DriverManager).getConnection(..., $PWD.$FOO(...));"
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...");
    - pattern: (javax.net.ssl.KeyManagerFactory $KMF).init(..., "...".$FOO(...));
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD);"
    - pattern: "(javax.net.ssl.KeyManagerFactory $KMF).init(..., $PWD.$FOO(...));"
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., "...");
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., "...".$FOO(...));
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD);
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD.$FOO(...));
    - pattern: "$S.setPassword($PWD);"
    - pattern: "$S.setPassword($PWD.$FOO(...));"
    - pattern: $S.setPassword("...");
  - metavariable-pattern:
      metavariable: "$PWD"
      patterns:
      - pattern-regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  message: |
    Passwords should not be kept in the source code. The source code can be widely shared in an
    enterprise environment, and is certainly shared in open source. To be managed safely, passwords
    and secret keys should be stored in separate configuration files or keystores.
  languages:
  - java
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-259: Use of Hard-coded Password'
    technology:
    - java
- id: "../sast-rules/java/perm/rule-DangerousPermissions.yml"
  pattern-either:
  - pattern: |
      $RUNVAR = new RuntimePermission("createClassLoader");
      ...
      (PermissionCollection $PC).add($RUNVAR);
  - pattern: |
      $REFVAR = new ReflectPermission("suppressAccessChecks");
      ...
      (PermissionCollection $PC).add($REFVAR);
  - pattern: (PermissionCollection $PC).add(new ReflectPermission("suppressAccessChecks"))
  - pattern: (PermissionCollection $PC).add(new RuntimePermission("createClassLoader"))
  languages:
  - java
  message: 'Do not grant dangerous combinations of permissions.

    '
  metadata:
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/java/perm/rule-OverlyPermissiveFilePermissionInline.yml"
  patterns:
  - pattern-either:
    - pattern: java.nio.file.Files.setPosixFilePermissions(..., java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING"));
    - pattern: |
        $PERMISSIONS = java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING");
        ...
        java.nio.file.Files.setPosixFilePermissions(..., $PERMISSIONS);
  - metavariable-regex:
      metavariable: "$PERM_STRING"
      regex: "[rwx-]{6}[rwx]{1,}"
  languages:
  - java
  message: 'Overly permissive file permission

    '
  metadata:
    cwe: 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/java/perm/rule-OverlyPermissiveFilePermissionObj.yml"
  patterns:
  - pattern-inside: |
      $PERMS.add($P);
      ...
      java.nio.file.Files.setPosixFilePermissions(..., $PERMS);
  - metavariable-regex:
      metavariable: "$P"
      regex: "(PosixFilePermission.){0,1}(OTHERS_)"
  languages:
  - java
  message: 'Overly permissive file permission

    '
  metadata:
    cwe: 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/java/random/rule-PseudoRandom.yml"
  patterns:
  - pattern-either:
    - pattern: |
        java.util.Random $R = new java.util.Random();
        ...
        $R.$METHOD();
    - pattern: "(java.util.Random $R).$METHOD()"
    - pattern: new java.util.Random().$METHOD()
    - pattern: org.apache.commons.lang.math.RandomUtils.$METHOD()
    - pattern: org.apache.commons.lang.RandomStringUtils.$METHOD(...)
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "^(next|random)"
  message: |
    The use of a predictable random value can lead to vulnerabilities when
    used in certain security critical contexts. A quick fix could be to replace
    the use of java.util.Random with something stronger, such as java.security.SecureRandom.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-330: Use of Insufficiently Random Values'
    technology:
    - java
- id: "../sast-rules/java/script/rule-ScriptInjection.yml"
  patterns:
  - pattern: "(javax.script.ScriptEngine $ENGINE).eval($ARG);"
  - pattern-not: (javax.script.ScriptEngine $ENGINE).eval("...");
  message: |
    The software constructs all or part of a code segment using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly
    neutralizes special elements that could modify the syntax or behavior of the
    intended code segment.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
- id: "../sast-rules/java/script/rule-SpelView.yml"
  patterns:
  - pattern: "(org.springframework.expression.spel.standard.SpelExpressionParser $P).parseExpression($ARG);"
  - pattern-not: (org.springframework.expression.spel.standard.SpelExpressionParser
      $P).parseExpression("...");
  message: |
    The software constructs all or part of a code segment using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly
    neutralizes special elements that could modify the syntax or behavior of the
    intended code segment.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
- id: "../sast-rules/java/smtp/rule-InsecureSmtp.yml"
  patterns:
  - pattern-either:
    - pattern-inside: |
        $E = new org.apache.commons.mail.SimpleEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.Email(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.MultiPartEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.HtmlEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.ImageHtmlEmail(...);
        ...
  - pattern-not: |
      $E.setSSLOnConnect(true);
      ...
      $E.setSSLCheckServerIdentity(true);
  message: 'Server identity verification is disabled when making SSL connections.

    '
  metadata:
    cwe: 'CWE-297: Improper Validation of Certificate with Host Mismatch'
  severity: ERROR
  languages:
  - java
- id: "../sast-rules/java/smtp/rule-SmtpClient.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setSubject($ARG);"
      - pattern-not: $M.setSubject("...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.addHeader($ARG1, $ARG2)"
      - pattern-not: $M.addHeader("...", "...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setDescription($ARG)"
      - pattern-not: $M.setDescription("...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setDisposition($ARG)"
      - pattern-not: $M.setDisposition("...")
  languages:
  - java
  message: |
    Simple Mail Transfer Protocol (SMTP) is a the text based protocol used for
    email delivery. Like with HTTP, headers are separate by new line separator. If
    kuser input is place in a header line, the application should remove or replace
    new line characters (CR / LF). You should use a safe wrapper such as Apache
    Common Email and Simple Java Mail which filter special characters that can lead
    to header injection.
  metadata:
    category: security
    cwe: 'CWE-77: Improper Neutralization of Special Elements used in a Command'
  severity: ERROR
- id: "../sast-rules/java/ssrf/rule-SSRF.yml"
  pattern-either:
  - patterns:
    - pattern: new URL(...). ... .connect()
    - pattern-not: new URL("..."). ... .connect()
  - patterns:
    - pattern: new URL(...). ... .GetContent(...)
    - pattern-not: new URL("..."). ... .GetContent(...)
  - patterns:
    - pattern: new URL(...). ... .openConnection(...)
    - pattern-not: new URL("..."). ... .openConnection(...)
  - patterns:
    - pattern: new URL(...). ... .openStream(...)
    - pattern-not: new URL("..."). ... .openStream(...)
  - patterns:
    - pattern: new URL(...). ... .getContent(...)
    - pattern-not: new URL("..."). ... .getContent(...)
  languages:
  - java
  message: |
    Server-Side Request Forgery occur when a web server executes a request to a
    user supplied destination parameter that is not validated. Such vulnerabilities
    could allow an attacker to access internal services or to launch attacks from
    your web server.
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
- id: "../sast-rules/java/strings/rule-BadHexConversion.yml"
  patterns:
  - pattern: |
      $B_ARR = (java.security.MessageDigest $MD).digest(...);
      ...
      for(...) {
        ...
        Integer.toHexString(...);
      }
  languages:
  - java
  message: |
    When converting a byte array containing a hash signature to a human readable string, a
    conversion mistake can be made if the array is read byte by byte.
  metadata:
    cwe: 'CWE-704: Incorrect Type Conversion or Cast'
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/java/strings/rule-FormatStringManipulation.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          String $INPUT = (HttpServletRequest $REQ).getParameter(...);
          ...
      - pattern-inside: |
          String $FORMAT_STR = ... + $INPUT;
          ...
    - patterns:
      - pattern-inside: |
          String $INPUT = (HttpServletRequest $REQ).getParameter(...);
          ...
      - pattern-inside: |
          String $FORMAT_STR = ... + $INPUT + ...;
          ...
    - pattern-inside: |
        String $FORMAT_STR = ... + (HttpServletRequest $REQ).getParameter(...) + ...;
        ...
    - pattern-inside: |
        String $FORMAT_STR = ... + (HttpServletRequest $REQ).getParameter(...);
        ...
  - pattern-either:
    - pattern: String.format($FORMAT_STR, ...);
    - pattern: String.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
    - pattern: "(java.util.Formatter $F).format($FORMAT_STR, ...);"
    - pattern: "(java.util.Formatter $F).format(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: "(java.io.PrintStream $F).printf($FORMAT_STR, ...);"
    - pattern: "(java.io.PrintStream $F).printf(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: "(java.io.PrintStream $F).format($FORMAT_STR, ...);"
    - pattern: "(java.io.PrintStream $F).format(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: System.out.printf($FORMAT_STR, ...);
    - pattern: System.out.printf(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
    - pattern: System.out.format($FORMAT_STR, ...);
    - pattern: System.out.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
  languages:
  - java
  message: |
    Allowing user input to control format parameters could enable an attacker to cause exceptions
    to be thrown or leak information.Attackers may be able to modify the format string argument,
    such that an exception is thrown. If this exception is left uncaught, it may crash the
    application. Alternatively, if sensitive information is used within the unused arguments,
    attackers may change the format string to reveal this information.
  metadata:
    cwe: 'CWE-134: Use of Externally-Controlled Format String'
    category: security
    confidence: HIGH
  severity: ERROR
- id: "../sast-rules/java/strings/rule-ImproperUnicode.yml"
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: |
          $S = (String $INPUT).$TRANSFORM(...);
          ...
          $S.$METHOD(...);
      - pattern: "(String $INPUT).$TRANSFORM().$METHOD(...);"
    - metavariable-regex:
        metavariable: "$METHOD"
        regex: "(equals|equalsIgnoreCase|indexOf)"
    - metavariable-regex:
        metavariable: "$TRANSFORM"
        regex: "(toLowerCase|toUpperCase)"
  - pattern: java.text.Normalizer.normalize(...);
  - pattern: java.net.IDN.toASCII(...);
  - pattern: "(URI $U).toASCIIString();"
  languages:
  - java
  message: 'Improper Handling of Unicode Encoding

    '
  metadata:
    cwe: 'CWE-176: Improper Handling of Unicode Encoding'
    category: security
    confidence: HIGH
  severity: ERROR
- id: "../sast-rules/java/strings/rule-ModifyAfterValidation.yml"
  patterns:
  - pattern: |
      (java.util.regex.Pattern $Y).matcher($VAR);
      ...
      $VAR.$METHOD(...);
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(replace)"
  languages:
  - java
  message: 'CERT: IDS11-J. Perform any string modifications before validation

    '
  metadata:
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/java/strings/rule-NormalizeAfterValidation.yml"
  patterns:
  - pattern: |
      $Y = java.util.regex.Pattern.compile("[<>]");
      ...
      $Y.matcher($VAR);
      ...
      java.text.Normalizer.normalize($VAR, ...);
  languages:
  - java
  message: 'IDS01-J. Normalize strings before validating them

    '
  metadata:
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/java/templateinjection/rule-TemplateInjection.yml"
  pattern-either:
  - patterns:
    - pattern: org.apache.velocity.app.Velocity.evaluate(..., $VAR)
    - pattern-not: org.apache.velocity.app.Velocity.evaluate(..., "...")
  - patterns:
    - pattern-not-inside: |
        $C = (freemarker.template.Configuration $CFG).getTemplate("...");
        ...
    - pattern-inside: |
        $C = (freemarker.template.Configuration $CFG).getTemplate($IN);
        ...
    - pattern: "$C.process(...)"
  - patterns:
    - pattern-inside: |
        import com.mitchellbosecke.pebble.PebbleEngine;
        ...
    - pattern-inside: |
        $C = $T.getTemplate($IN);
        ...
    - pattern-not-inside: |
        $C = $T.getTemplate("...");
        ...
    - pattern: "$C.evaluate(...)"
  languages:
  - java
  message: |
    A malicious user in control of a template can run malicious code on the
    server-side. Velocity templates should be seen as scripts.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
  severity: ERROR
- id: "../sast-rules/java/unsafe/rule-ExternalConfigControl.yml"
  patterns:
  - pattern: |
      $TAINTED = (HttpServletRequest $REQ).getParameter(...);
      ...
      (java.sql.Connection $CONN).setCatalog($TAINTED);
  message: |
    Allowing external control of system settings can disrupt service or cause an application to
    behave in unexpected, and potentially malicious ways. An attacker could cause an error by
    providing a nonexistent catalog name or connect to an unauthorized portion of the database.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-15: External Control of System or Configuration Setting'
    technology:
    - java
- id: "../sast-rules/java/unsafe/rule-InformationExposure.yml"
  pattern-either:
  - pattern: |
      catch(Throwable $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(Exception $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(Error $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.io.FileNotFoundException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.sql.SQLException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.net.BindException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.util.ConcurrentModificationException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(javax.naming.InsufficientResourcesException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.util.MissingResourceException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.util.jar.JarException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(java.security.acl.NotOwnerException $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(OutOfMemoryError $E) {
        ...
        $E.printStackTrace();
        ...
      }
  - pattern: |
      catch(StackOverflowError $E) {
        ...
        $E.printStackTrace();
        ...
      }
  message: |
    The sensitive information may be valuable information on its own (such as a password), or it
    may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use
    error information provided by the server to launch another more focused attack. For example, an
    attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the
    installed application.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-209: Information Exposure Through an Error Message'
    technology:
    - java
- id: "../sast-rules/java/unsafe/rule-InformationExposureVariant2.yml"
  patterns:
  - pattern-either:
    - pattern: |
        catch(Throwable $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(Exception $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(Error $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(java.io.FileNotFoundException $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(java.sql.SQLException $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(java.net.BindException $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(java.util.ConcurrentModificationException $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(javax.naming.InsufficientResourcesException $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(java.util.MissingResourceException $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(java.util.jar.JarException $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(java.security.acl.NotOwnerException $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(OutOfMemoryError $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
    - pattern: |
        catch(StackOverflowError $E) {
          ...
          $E.printStackTrace($OUT);
          ...
        }
  - metavariable-pattern:
      metavariable: "$OUT"
      pattern-either:
      - pattern: "(java.io.PrintStream $PS)"
      - pattern: "(java.io.PrintWriter $PW)"
      - pattern: java.lang.System.out
      - pattern: "(java.io.OutputStream $O)"
      - pattern: "(javax.servlet.ServletOutputStream $SOS)"
  message: |
    The sensitive information may be valuable information on its own (such as a password), or it
    may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use
    error information provided by the server to launch another more focused attack. For example, an
    attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the
    installed application.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-209: Information Exposure Through an Error Message'
    technology:
    - java
- id: "../sast-rules/java/xml/rule-ApacheXmlRpc.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          XmlRpcServerConfigImpl $VAR = new org.apache.xmlrpc.server.XmlRpcServerConfigImpl();
          ...
      - pattern: "$VAR.setEnabledForExtensions(true);"
    - patterns:
      - pattern-inside: |
          XmlRpcClientConfigImpl $VAR = new org.apache.xmlrpc.client.XmlRpcClientConfigImpl();
          ...
      - pattern: "$VAR.setEnabledForExtensions(true);"
  languages:
  - java
  message: |
    Enabling extensions in Apache XML RPC server or client can lead to deserialization
    vulnerability which would allow an attacker to execute arbitrary code.
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
  severity: WARNING
- id: "../sast-rules/java/xml/rule-SAMLIgnoreComments.yml"
  pattern: "(BasicParserPool $POOL).setIgnoreComments(false);"
  languages:
  - java
  message: 'Ignoring XML comments in SAML may lead to authentication bypass

    '
  metadata:
    cwe: 'CWE-287: Improper Authentication'
    category: security
  severity: WARNING
- id: "../sast-rules/java/xml/rule-XmlDecoder.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $D = new XMLDecoder($IN);
          ...
      - pattern-not-inside: |
          $D = new XMLDecoder("...");
          ...
      - pattern: "$D.readObject()"
  languages:
  - java
  message: 'Avoid using XMLDecoder to parse content from an untrusted source.

    '
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
  severity: WARNING
- id: "../sast-rules/java/xml/rule-XsltTransform.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $FUNC(...,String $VAR, ...) {
              ...
            }
        - pattern-either:
          - pattern: new FileInputStream(<... $VAR ...>);
          - pattern: getClass().getResourceAsStream(<... $VAR ...>)
      - patterns:
        - pattern-inside: |
            class $CLZ {
              String $X = "...";
              ...
            }
        - pattern-inside: |
            $FUNC(...,String $Y, ...) {
              ...
            }
        - pattern-either:
          - pattern: new FileInputStream($X + $Y);
          - pattern: getClass().getResourceAsStream($X + $Y)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: "(javax.xml.transform.TransformerFactory $T).newTransformer($SRC,
          ...)"
      - pattern-inside: "(javax.xml.transform.Transformer $T).transform($SRC, ...)"
    - pattern: "$SRC"
  languages:
  - java
  message: |
    It is possible to attach malicious behavior to those style sheets. Therefore, if an attacker
    can control the content or the source of the style sheet, he might be able to trigger remote
    code execution.
  metadata:
    cwe": 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    category: security
  severity: WARNING
- id: "../sast-rules/java/xpathi/rule-XpathInjection.yml"
  patterns:
  - pattern-either:
    - pattern-inside: import javax.xml.xpath.*; ...
    - pattern-inside: import javax.xml.xpath.Xpath; ...
  - pattern-either:
    - patterns:
      - pattern: "(XPath $X).compile($ARG)"
      - pattern-not: (XPath $X).compile("...")
    - patterns:
      - pattern: "(XPath $X).evaluate($ARG)"
      - pattern-not: (XPath $X).evaluate("...")
  languages:
  - java
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/java/xss/rule-RequestWrapper.yml"
  patterns:
  - pattern-inside: |
      class $CLASS extends HttpServletRequestWrapper {
      ...
      }
  - pattern: stripXSS(...) { ... }
  languages:
  - java
  message: 'Avoid using custom XSS filtering. Please use standard sanitization functions.

    '
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
  severity: INFO
- id: "../sast-rules/java/xss/rule-WicketXSS.yml"
  patterns:
  - pattern: "(org.apache.wicket.markup.html.basic.Label $X).setEscapeModelStrings(false);"
  languages:
  - java
  message: 'Disabling HTML escaping put the application at risk for Cross-Site Scripting
    (XSS).

    '
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
  severity: WARNING
- id: "../sast-rules/java/xss/rule-XSSReqParamToSendError.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletRequest $REQ, ...) {...}"
    - pattern-either:
      - pattern: "$REQ.getParameter(...);"
      - pattern: "$REQ.getHeader(...);"
      - pattern: "$REQ.getRequestedSessionId();"
      - pattern: "$REQ.getQueryString();"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: org.owasp.encoder.Encode.forHtml($TAINTED);
    - pattern: "$TAINTED"
  pattern-sinks:
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletResponse $RES, ...) {...}"
    - pattern: "$RES.sendError(..., $DATA);"
    - pattern: "$DATA"
  message: |
    Servlet reflected cross site scripting vulnerability in error page. This code directly writes
    an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this
    untrusted input allows for a reflected cross site scripting vulnerability.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    category: security
    technology:
    - java
- id: "../sast-rules/java/xss/rule-XSSReqParamToServletWriter.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletRequest $REQ, ...) {...}"
    - pattern: "$REQ.getParameter(...);"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: org.owasp.encoder.Encode.forHtml($TAINTED);
    - pattern: "$TAINTED"
  pattern-sinks:
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletResponse $RES, ...) {...}"
    - pattern-inside: |
        $WRITER = $RES.getWriter();
        ...
    - pattern: "$WRITER.write($DATA,...);"
    - pattern: "$DATA"
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletResponse $RES, ...) {...}"
    - pattern: "$RES.getWriter().write($DATA,...);"
    - pattern: "$DATA"
  message: 'Servlet reflected cross site scripting vulnerability

    '
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation'
    category: security
    technology:
    - java
- id: "../sast-rules/java/xss/rule-XSSServlet.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletRequest $REQ, ...) {...}"
    - pattern: "$REQ.getParameter(...);"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: org.owasp.encoder.Encode.forHtml($TAINTED);
    - pattern: "$TAINTED"
  pattern-sinks:
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletResponse $RES, ...) {...}"
    - pattern-inside: |
        $WRITER = $RES.getWriter();
        ...
    - pattern: "$WRITER.write($DATA,...);"
    - pattern: "$DATA"
  - patterns:
    - pattern-inside: "$FUNC(..., HttpServletResponse $RES, ...) {...}"
    - pattern: "$RES.getWriter().write($DATA,...);"
    - pattern: "$DATA"
  message: |
    A potential XSS was found. It could be used to execute unwanted JavaScript in a
    client's browser.
  languages:
  - java
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    category: security
  severity: WARNING
- id: "../sast-rules/java/xss/rule-XSSServletParameter.yml"
  pattern-either:
  - patterns:
    - pattern-inside: "$TYPE $FUNC(..., ServletRequest $REQ, ...) { ... }"
    - pattern-either:
      - pattern: "$REQ.getParameter(...);"
      - pattern: "$REQ.getParameterValues();"
      - pattern: "$REQ.getParameterMap(...);"
      - pattern: "$REQ.getParameterNames();"
  - patterns:
    - pattern-inside: "$TYPE $FUNC(..., HttpServletRequest $SREQ, ...) { ... }"
    - pattern-either:
      - pattern: "$SREQ.getRequestedSessionId();"
      - pattern: "$SREQ.getQueryString();"
      - pattern: "$SREQ.getParameter(...);"
      - pattern: "$SREQ.getParameterValues();"
      - pattern: "$SREQ.getParameterMap(...);"
      - pattern: "$SREQ.getParameterNames();"
      - patterns:
        - pattern: "$SREQ.getHeader($HEADER);"
        - metavariable-regex:
            metavariable: "$HEADER"
            regex: "(?i)(Host|Referer|User-Agent)"
  message: |
    The Servlet can read GET and POST parameters from various methods. The value obtained should be
    considered unsafe. You may need to validate or sanitize those values before passing them to
    sensitive APIs
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: 'CWE-20: Improper Input Validation'
    category: security
    technology:
    - java
- id: "../sast-rules/java/xxe/rule-SaxParserXXE.yml"
  patterns:
  - pattern-inside: |
      $SF = SAXParserFactory.newInstance();
      ...
  - pattern-not-inside: |
      $SF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern-not-inside: |
      $SF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      ...
  - pattern-inside: |
      $P = $SFP.newSAXParser();
      ...
  - pattern: "$P.parse(...);"
  languages:
  - java
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/java/xxe/rule-Trans.yml"
  patterns:
  - pattern-inside: import javax.xml.transform.*; ...
  - pattern-inside: |
      $T = $FACT.newTransformer();
      ...
  - pattern-not-inside: |
      $T.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      ...
  - pattern-not-inside: |
      $T.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
      ...
  - pattern-not-inside: |
      $T.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern: "$T.transform(...)"
  languages:
  - java
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/java/xxe/rule-XMLRdr.yml"
  patterns:
  - pattern-inside: |
      $R = XMLReaderFactory.createXMLReader();
      ...
  - pattern-not-inside: |
      $R.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern: "$R.parse(...);"
  languages:
  - java
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/java/xxe/rule-XMLStreamRdr.yml"
  patterns:
  - pattern-inside: |
      $SF = XMLInputFactory.newFactory();
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.SUPPORT_DTD, false);
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);
      ...
  - pattern: "$SF.createXMLStreamReader(...)"
  languages:
  - java
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/java/xxe/rule-XPathXXE.yml"
  patterns:
  - pattern-inside: |
      $DF = df.newDocumentBuilder();
      ...
  - pattern-not-inside: |
      $DF.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      ...
  - pattern-not-inside: |
      $DF.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
      ...
  - pattern-not-inside: |
      $DF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern-not-inside: |
      $DF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      ...
  - pattern: "$SF.newDocumentBuilder(...)"
  languages:
  - java
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/javascript/buf/rule-buffer-noassert.yml"
  metadata:
    cwe: 'CWE-119: Improper Restriction of Operations within the Bounds of a Memory
      Buffer'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js
  message: |
    Detected usage of noassert in Buffer API, which allows the offset the be beyond the
    end of the buffer. This could result in writing or reading beyond the end of the buffer.
  pattern-either:
  - pattern: "$OBJ.readUInt8(..., true)"
  - pattern: "$OBJ.readUInt16LE(..., true)"
  - pattern: "$OBJ.readUInt16BE(..., true)"
  - pattern: "$OBJ.readUInt32LE(..., true)"
  - pattern: "$OBJ.readUInt32BE(..., true)"
  - pattern: "$OBJ.readInt8(..., true)"
  - pattern: "$OBJ.readInt16LE(..., true)"
  - pattern: "$OBJ.readInt16BE(..., true)"
  - pattern: "$OBJ.readInt32LE(..., true)"
  - pattern: "$OBJ.readInt32BE(..., true)"
  - pattern: "$OBJ.readFloatLE(..., true)"
  - pattern: "$OBJ.readFloatBE(..., true)"
  - pattern: "$OBJ.readDoubleLE(..., true)"
  - pattern: "$OBJ.readDoubleBE(..., true)"
  - pattern: "$OBJ.writeUInt8(..., true)"
  - pattern: "$OBJ.writeUInt16LE(..., true)"
  - pattern: "$OBJ.writeUInt16BE(..., true)"
  - pattern: "$OBJ.writeUInt32LE(..., true)"
  - pattern: "$OBJ.writeUInt32BE(..., true)"
  - pattern: "$OBJ.writeInt8(..., true)"
  - pattern: "$OBJ.writeInt16LE(..., true)"
  - pattern: "$OBJ.writeInt16BE(..., true)"
  - pattern: "$OBJ.writeInt32LE(..., true)"
  - pattern: "$OBJ.writeInt32BE(..., true)"
  - pattern: "$OBJ.writeFloatLE(..., true)"
  - pattern: "$OBJ.writeFloatBE(..., true)"
  - pattern: "$OBJ.writeDoubleLE(..., true)"
  - pattern: "$OBJ.writeDoubleBE(..., true)"
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: "../sast-rules/javascript/buf/rule-detect-new-buffer.yml"
  metadata:
    source-rule-url: https://github.com/eslint-community/eslint-plugin-security/blob/main/rules/detect-new-buffer.js
  patterns:
  - patterns:
    - pattern-not-inside: |-
        require("safe-buffer")
        ...
    - pattern-not-inside: |-
        import { Buffer } from "safe-buffer"
        ...
    - pattern-inside: function $FUNC(..., $X, ...) { ... }
    - pattern: new Buffer($X,...)
  - pattern-not: 'new Buffer("...",...)

      '
  - pattern-not: 'new Buffer([...] , ...)

      '
  message: |
    Detects instances of new Buffer(argument) where argument is any non-literal value which could
    cause memory leak. Recommended usage is `Buffer.from()` or `Buffer.alloc()`.
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: "../sast-rules/javascript/csrf/rule-no_csrf_before_method_override.yml"
  metadata:
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-no-csrf-before-method-override.js
    references:
    - https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md
  message: |
    Detected use of express.csrf() middleware before express.methodOverride(). This can
    allow GET requests (which are not checked by csrf) to turn into POST requests later.
  pattern: |
    express.csrf();
    ...
    express.methodOverride();
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: "../sast-rules/javascript/dos/rule-non_literal_regexp.yml"
  patterns:
  - pattern: 'new RegExp(...)

      '
  - pattern-not: 'new RegExp("...", ...)

      '
  message: |
    RegExp() called with a variable, this might allow an attacker to DOS your application with a
    long-running regular expression.
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    cwe: 'CWE-185: Incorrect Regular Expression'
- id: "../sast-rules/javascript/eval/rule-eval_with_expression.yml"
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js
  message: 'Detected eval(variable), which could allow a malicious actor to run arbitrary
    code.

    '
  patterns:
  - pattern: eval($OBJ)
  - pattern-not: eval("...")
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: "../sast-rules/javascript/exec/rule-child_process.yml"
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
  message: |
    Detected non-literal calls to child_process.exec(). This could lead to a command
    injection vulnerability.
  patterns:
  - pattern: child_process.exec(...)
  - pattern-not: child_process.exec('...')
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: "../sast-rules/javascript/pathtraversal/rule-non_literal_fs_filename.yml"
  patterns:
  - pattern-not: $MOD.appendFile("...", ...)
  - pattern-not: $MOD.appendFileSync("...", ...)
  - pattern-not: $MOD.chmod("...", ...)
  - pattern-not: $MOD.chmodSync("...", ...)
  - pattern-not: $MOD.chown("...", ...)
  - pattern-not: $MOD.chownSync("...", ...)
  - pattern-not: $MOD.createReadStream("...", ...)
  - pattern-not: $MOD.createWriteStream("...", ...)
  - pattern-not: $MOD.exists("...", ...)
  - pattern-not: $MOD.existsSync("...", ...)
  - pattern-not: $MOD.lchmod("...", ...)
  - pattern-not: $MOD.lchmodSync("...", ...)
  - pattern-not: $MOD.lchown("...", ...)
  - pattern-not: $MOD.lchownSync("...", ...)
  - pattern-not: $MOD.link("...", "...", ...)
  - pattern-not: $MOD.linkSync("...", "...", ...)
  - pattern-not: $MOD.lstat("...", ...)
  - pattern-not: $MOD.lstatSync("...", ...)
  - pattern-not: $MOD.mkdir("...", ...)
  - pattern-not: $MOD.mkdirSync("...", ...)
  - pattern-not: $MOD.open("...", ...)
  - pattern-not: $MOD.openSync("...", ...)
  - pattern-not: $MOD.readdir("...", ...)
  - pattern-not: $MOD.readdirSync("...", ...)
  - pattern-not: $MOD.readFile("...", ...)
  - pattern-not: $MOD.readFileSync("...", ...)
  - pattern-not: $MOD.readlink("...", ...)
  - pattern-not: $MOD.readlinkSync("...", ...)
  - pattern-not: $MOD.realpath("...", ...)
  - pattern-not: $MOD.realpathSync("...", ...)
  - pattern-not: $MOD.rename("...", "...", ...)
  - pattern-not: $MOD.renameSync("...", "...", ...)
  - pattern-not: $MOD.rmdir("...", ...)
  - pattern-not: $MOD.rmdirSync("...", ...)
  - pattern-not: $MOD.stat("...", ...)
  - pattern-not: $MOD.statSync("...", ...)
  - pattern-not: $MOD.symlink("...", "...", ...)
  - pattern-not: $MOD.symlinkSync("...", "...", ...)
  - pattern-not: $MOD.truncate("...", ...)
  - pattern-not: $MOD.truncateSync("...", ...)
  - pattern-not: $MOD.unlink("...", ...)
  - pattern-not: $MOD.unlinkSync("...", ...)
  - pattern-not: $MOD.unwatchFile("...", ...)
  - pattern-not: $MOD.utimes("...", ...)
  - pattern-not: $MOD.utimesSync("...", ...)
  - pattern-not: $MOD.watch("...", ...)
  - pattern-not: $MOD.watchFile("...", ...)
  - pattern-not: $MOD.writeFile("...", ...)
  - pattern-not: $MOD.writeFileSync("...", ...)
  - pattern-either:
    - pattern: "$MOD.appendFile(...)"
    - pattern: "$MOD.appendFileSync(...)"
    - pattern: "$MOD.chmod(...)"
    - pattern: "$MOD.chmodSync(...)"
    - pattern: "$MOD.chown(...)"
    - pattern: "$MOD.chownSync(...)"
    - pattern: "$MOD.createReadStream(...)"
    - pattern: "$MOD.createWriteStream(...)"
    - pattern: "$MOD.exists(...)"
    - pattern: "$MOD.existsSync(...)"
    - pattern: "$MOD.lchmod(...)"
    - pattern: "$MOD.lchmodSync(...)"
    - pattern: "$MOD.lchown(...)"
    - pattern: "$MOD.lchownSync(...)"
    - pattern: "$MOD.link(...)"
    - pattern: "$MOD.linkSync(...)"
    - pattern: "$MOD.lstat(...)"
    - pattern: "$MOD.lstatSync(...)"
    - pattern: "$MOD.mkdir(...)"
    - pattern: "$MOD.mkdirSync(...)"
    - pattern: "$MOD.open(...)"
    - pattern: "$MOD.openSync(...)"
    - pattern: "$MOD.readdir(...)"
    - pattern: "$MOD.readdirSync(...)"
    - pattern: "$MOD.readFile(...)"
    - pattern: "$MOD.readFileSync(...)"
    - pattern: "$MOD.readlink(...)"
    - pattern: "$MOD.readlinkSync(...)"
    - pattern: "$MOD.realpath(...)"
    - pattern: "$MOD.realpathSync(...)"
    - pattern: "$MOD.rename(...)"
    - pattern: "$MOD.renameSync(...)"
    - pattern: "$MOD.rmdir(...)"
    - pattern: "$MOD.rmdirSync(...)"
    - pattern: "$MOD.stat(...)"
    - pattern: "$MOD.statSync(...)"
    - pattern: "$MOD.symlink(...)"
    - pattern: "$MOD.symlinkSync(...)"
    - pattern: "$MOD.truncate(...)"
    - pattern: "$MOD.truncateSync(...)"
    - pattern: "$MOD.unlink(...)"
    - pattern: "$MOD.unlinkSync(...)"
    - pattern: "$MOD.unwatchFile(...)"
    - pattern: "$MOD.utimes(...)"
    - pattern: "$MOD.utimesSync(...)"
    - pattern: "$MOD.watch(...)"
    - pattern: "$MOD.watchFile(...)"
    - pattern: "$MOD.writeFile(...)"
    - pattern: "$MOD.writeFileSync(...)"
  message: |
    A variable is present in the filename argument of fs calls, this might allow an attacker to
    access anything on your system.
  languages:
  - typescript
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
- id: "../sast-rules/javascript/protinjection/rule-object_injection.yml"
  patterns:
  - pattern: "$V = $O[$ARG]"
  - pattern-not: $O["..."]
  - pattern-not: "$O[($ARG : float)]"
  - pattern-not-inside: |
      $ARG = ...;
      ...
  - metavariable-regex:
      metavariable: "$ARG"
      regex: "(?![0-9]+)"
  message: |
    Bracket object notation with user input is present, this might allow an attacker to access all
    properties of the object and even it's prototype, leading to possible code execution.
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
- id: "../sast-rules/javascript/random/rule-pseudo_random_bytes.yml"
  metadata:
    cwe: 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-pseudoRandomBytes.js
  message: 'Detected usage of crypto.pseudoRandomBytes, which does not produce secure
    random numbers.

    '
  pattern: crypto.pseudoRandomBytes
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: "../sast-rules/javascript/react/rule-dangerouslysetinnerhtml.yml"
  pattern-either:
  - pattern: "<$X dangerouslySetInnerHTML=... />\n"
  - pattern: "{dangerouslySetInnerHTML: ...}\n"
  message: |
    Setting HTML from code is risky because it’s easy to inadvertently expose your users to a
    cross-site scripting (XSS) attack.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: "../sast-rules/javascript/react/rule-missing_noopener.yml"
  pattern-either:
  - patterns:
    - pattern: '<$X target="_blank" />

        '
    - pattern-not: '<$X target="_blank" rel="..." />

        '
  - patterns:
    - pattern-inside: '<$X target="_blank" rel=... />

        '
    - pattern-regex: rel=["']((?!noopener).)*?["']
  - patterns:
    - pattern: 'React.createElement($A, {target: ''_blank''},...)

        '
    - pattern-not: 'React.createElement($A, {rel: ''...''},...)

        '
  - patterns:
    - pattern: 'React.createElement($A, {target: ''_blank'', rel: $REL},...)

        '
    - metavariable-regex:
        metavariable: "$REL"
        regex: '["'']((?!noopener).)*?[''"]'
  - patterns:
    - pattern: |
        $P = {target: '_blank'};
        ...
        React.createElement($A, $P,...);
    - pattern-not: |
        $P = {rel: '...'};
        ...
        React.createElement($A, $P,...);
  - patterns:
    - pattern: |
        $P = {target: '_blank', rel: $REL};
        ...
        React.createElement($A, $P,...);
    - metavariable-regex:
        metavariable: "$REL"
        regex: '["'']((?!noopener).)*?[''"]'
  message: |
    Missing 'noopener' on an anchor tag where target='_blank'. This could introduce
    a reverse tabnabbing vulnerability. Include 'noopener' when using target='_blank'.
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer
    - https://web.dev/external-anchors-use-rel-noopener/
    - https://owasp.org/www-community/attacks/Reverse_Tabnabbing
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: "../sast-rules/javascript/require/rule-non_literal_require.yml"
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js
  message: |
    Detected the use of require(variable). Calling require with a non-literal argument might
    allow an attacker to load an run arbitrary code, or access arbitrary files.
  patterns:
  - pattern: require($OBJ)
  - pattern-not: require('...')
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: "../sast-rules/javascript/timing/rule-possible_timing_attacks.yml"
  patterns:
  - pattern-not: if ($Z == null) { ... };
  - pattern-not: if ($Z === null) { ... };
  - pattern-not: if ($Z != null) { ... };
  - pattern-not: if ($Z !== null) { ... };
  - pattern-not: if ($Q != undefined) { ... };
  - pattern-not: if ($Q !== undefined) { ... };
  - pattern-not: if ($Q == undefined) { ... };
  - pattern-not: if ($Q === undefined) { ... };
  - pattern-not: return $Y == null;
  - pattern-not: return $Y === null;
  - pattern-not: return $Y != null;
  - pattern-not: return $Y !== null;
  - pattern-not: return $Y == undefined;
  - pattern-not: return $Y === undefined;
  - pattern-not: return $Y != undefined;
  - pattern-not: return $Y !== undefined;
  - pattern-either:
    - pattern: |
        if (password == $X) {
            ...
        }
    - pattern: |
        if ($X == password) {
            ...
        }
    - pattern: |
        if (password === $X) {
            ...
        }
    - pattern: |
        if ($X === password) {
            ...
        }
    - pattern: |
        if (pass == $X) {
            ...
        }
    - pattern: |
        if ($X == pass) {
            ...
        }
    - pattern: |
        if (pass === $X) {
            ...
        }
    - pattern: |
        if ($X === pass) {
            ...
        }
    - pattern: |
        if (secret == $X) {
            ...
        }
    - pattern: |
        if ($X == secret) {
            ...
        }
    - pattern: |
        if (secret === $X) {
            ...
        }
    - pattern: |
        if ($X === secret) {
            ...
        }
    - pattern: |
        if (api == $X) {
            ...
        }
    - pattern: |
        if ($X == api) {
            ...
        }
    - pattern: |
        if (api === $X) {
            ...
        }
    - pattern: |
        if ($X === api) {
            ...
        }
    - pattern: |
        if (apiKey == $X) {
            ...
        }
    - pattern: |
        if ($X == apiKey) {
            ...
        }
    - pattern: |
        if (apiKey === $X) {
            ...
        }
    - pattern: |
        if ($X === apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret == $X) {
            ...
        }
    - pattern: |
        if ($X == apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret === $X) {
            ...
        }
    - pattern: |
        if ($X === apiSecret) {
            ...
        }
    - pattern: |
        if (token == $X) {
            ...
        }
    - pattern: |
        if ($X == token) {
            ...
        }
    - pattern: |
        if (token === $X) {
            ...
        }
    - pattern: |
        if ($X === token) {
            ...
        }
    - pattern: |
        if (hash == $X) {
            ...
        }
    - pattern: |
        if ($X == hash) {
            ...
        }
    - pattern: |
        if (hash === $X) {
            ...
        }
    - pattern: |
        if ($X === hash) {
            ...
        }
    - pattern: |
        if (auth_token == $X) {
            ...
        }
    - pattern: |
        if ($X == auth_token) {
            ...
        }
    - pattern: |
        if (auth_token === $X) {
            ...
        }
    - pattern: |
        if ($X === auth_token) {
            ...
        }
    - pattern: |
        if (password != $X) {
            ...
        }
    - pattern: |
        if ($X != password) {
            ...
        }
    - pattern: |
        if (password !== $X) {
            ...
        }
    - pattern: |
        if ($X !== password) {
            ...
        }
    - pattern: |
        if (pass != $X) {
            ...
        }
    - pattern: |
        if ($X != pass) {
            ...
        }
    - pattern: |
        if (pass !== $X) {
            ...
        }
    - pattern: |
        if ($X !== pass) {
            ...
        }
    - pattern: |
        if (secret != $X) {
            ...
        }
    - pattern: |
        if ($X != secret) {
            ...
        }
    - pattern: |
        if (secret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== secret) {
            ...
        }
    - pattern: |
        if (api != $X) {
            ...
        }
    - pattern: |
        if ($X != api) {
            ...
        }
    - pattern: |
        if (api !== $X) {
            ...
        }
    - pattern: |
        if ($X !== api) {
            ...
        }
    - pattern: |
        if (apiKey != $X) {
            ...
        }
    - pattern: |
        if ($X != apiKey) {
            ...
        }
    - pattern: |
        if (apiKey !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret != $X) {
            ...
        }
    - pattern: |
        if ($X != apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiSecret) {
            ...
        }
    - pattern: |
        if (token != $X) {
            ...
        }
    - pattern: |
        if ($X != token) {
            ...
        }
    - pattern: |
        if (token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== token) {
            ...
        }
    - pattern: |
        if (hash != $X) {
            ...
        }
    - pattern: |
        if ($X != hash) {
            ...
        }
    - pattern: |
        if (hash !== $X) {
            ...
        }
    - pattern: |
        if ($X !== hash) {
            ...
        }
    - pattern: |
        if (auth_token != $X) {
            ...
        }
    - pattern: |
        if ($X != auth_token) {
            ...
        }
    - pattern: |
        if (auth_token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== auth_token) {
            ...
        }
    - pattern: 'return $X === auth_token;

        '
    - pattern: 'return auth_token === $X;

        '
    - pattern: 'return $X === token;

        '
    - pattern: 'return token === $X;

        '
    - pattern: 'return $X === hash;

        '
    - pattern: 'return hash === $X;

        '
    - pattern: 'return $X === password;

        '
    - pattern: 'return password === $X;

        '
    - pattern: 'return $X === pass;

        '
    - pattern: 'return pass === $X;

        '
    - pattern: 'return $X === apiKey;

        '
    - pattern: 'return apiKey === $X;

        '
    - pattern: 'return $X === apiSecret;

        '
    - pattern: 'return apiSecret === $X;

        '
    - pattern: 'return $X === api_key;

        '
    - pattern: 'return api_key === $X;

        '
    - pattern: 'return $X === api_secret;

        '
    - pattern: 'return api_secret === $X;

        '
    - pattern: 'return $X === secret;

        '
    - pattern: 'return secret === $X;

        '
    - pattern: 'return $X === api;

        '
    - pattern: 'return api === $X;

        '
    - pattern: 'return $X == auth_token;

        '
    - pattern: 'return auth_token == $X;

        '
    - pattern: 'return $X == token;

        '
    - pattern: 'return token == $X;

        '
    - pattern: 'return $X == hash;

        '
    - pattern: 'return hash == $X;

        '
    - pattern: 'return $X == password;

        '
    - pattern: 'return password == $X;

        '
    - pattern: 'return $X == pass;

        '
    - pattern: 'return pass == $X;

        '
    - pattern: 'return $X == apiKey;

        '
    - pattern: 'return apiKey == $X;

        '
    - pattern: 'return $X == apiSecret;

        '
    - pattern: 'return apiSecret == $X;

        '
    - pattern: 'return $X == api_key;

        '
    - pattern: 'return api_key == $X;

        '
    - pattern: 'return $X == api_secret;

        '
    - pattern: 'return api_secret == $X;

        '
    - pattern: 'return $X == secret;

        '
    - pattern: 'return secret == $X;

        '
    - pattern: 'return $X == api;

        '
    - pattern: 'return api == $X;

        '
    - pattern: 'return $X !== auth_token;

        '
    - pattern: 'return auth_token !== $X;

        '
    - pattern: 'return $X !== token;

        '
    - pattern: 'return token !== $X;

        '
    - pattern: 'return $X !== hash;

        '
    - pattern: 'return hash !== $X;

        '
    - pattern: 'return $X !== password;

        '
    - pattern: 'return password !== $X;

        '
    - pattern: 'return $X !== pass;

        '
    - pattern: 'return pass !== $X;

        '
    - pattern: 'return $X !== apiKey;

        '
    - pattern: 'return apiKey !== $X;

        '
    - pattern: 'return $X !== apiSecret;

        '
    - pattern: 'return apiSecret !== $X;

        '
    - pattern: 'return $X !== api_key;

        '
    - pattern: 'return api_key !== $X;

        '
    - pattern: 'return $X !== api_secret;

        '
    - pattern: 'return api_secret !== $X;

        '
    - pattern: 'return $X !== secret;

        '
    - pattern: 'return secret !== $X;

        '
    - pattern: 'return $X !== api;

        '
    - pattern: 'return api !== $X;

        '
    - pattern: 'return $X != auth_token;

        '
    - pattern: 'return auth_token != $X;

        '
    - pattern: 'return $X != token;

        '
    - pattern: 'return token != $X;

        '
    - pattern: 'return $X != hash;

        '
    - pattern: 'return hash != $X;

        '
    - pattern: 'return $X != password;

        '
    - pattern: 'return password != $X;

        '
    - pattern: 'return $X != pass;

        '
    - pattern: 'return pass != $X;

        '
    - pattern: 'return $X != apiKey;

        '
    - pattern: 'return apiKey != $X;

        '
    - pattern: 'return $X != apiSecret;

        '
    - pattern: 'return apiSecret != $X;

        '
    - pattern: 'return $X != api_key;

        '
    - pattern: 'return api_key != $X;

        '
    - pattern: 'return $X != api_secret;

        '
    - pattern: 'return api_secret != $X;

        '
    - pattern: 'return $X != secret;

        '
    - pattern: 'return secret != $X;

        '
    - pattern: 'return $X != api;

        '
    - pattern: 'return api != $X;

        '
  message: |
    String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More
    info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-208: Observable Timing Discrepancy'
- id: "../sast-rules/javascript/xss/rule-mustache_escape.yml"
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (XSS)'
    owasp: 'A7: Cross-Site Scripting XSS'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-disable-mustache-escape.js
  message: |
    Markup escaping disabled. This can be used with some template engines to escape
    disabling of HTML entities, which can lead to XSS attacks.
  pattern: "$OBJ.escapeMarkup = false"
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: "../sast-rules/python/assert/rule-assert_used.yml"
  patterns:
  - pattern: assert(...)
  - pattern-not-inside: |
      import pytest
      ...
  - pattern-not-inside: |
      import unittest
      ...
  message: |
    Use of assert detected. The enclosed code will be removed when compiling to optimised byte
    code.
  metadata:
    cwe: 'CWE-754: Improper Check for Unusual or Exceptional Conditions'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/bind_all_interfaces/rule-general_bindall_interfaces.yml"
  patterns:
  - pattern-either:
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("0.0.0.0", ...))
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("::", ...))
    - pattern: |
        $S = socket.socket(...)
        ...
        $S.bind(("", ...))
  message: |
    Running `socket.bind` to 0.0.0.0, ::, or empty string could unexpectedly expose the server
    publicly as it binds to all available interfaces. Consider instead getting correct address from
    an
    environment variable or configuration file.
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A6: Security Misconfiguration'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/cgi/rule-import_httpoxy.yml"
  pattern-either:
  - pattern: wsgiref.handlers.CGIHandler(...)
  - pattern: twisted.web.twcgi.CGIDirectory(...)
  message: 'Consider possible security implications associated with httpoxy module.

    '
  metadata:
    cwe: 'CWE-284: Improper Access Control'
    owasp: 'A5: Broken Access Control'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-cipher_modes.yml"
  pattern: cryptography.hazmat.primitives.ciphers.modes.ECB(...)
  message: |
    Detected ECB cipher mode which is considered insecure. The algorithm canpotentially leak
    information about the plaintext. Use CBC mode instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto.hazmat_hash_md5.yml"
  pattern: cryptography.hazmat.primitives.hashes.MD5(...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto.hazmat_hash_sha1.yml"
  pattern: cryptography.hazmat.primitives.hashes.SHA1(...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_cipher_blowfish.yml"
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.Blowfish.new(...)
    - pattern: Crypto.Cipher.Blowfish.new(...)
  message: |
    Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many known
    vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_cipher_des.yml"
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.DES.new(...)
    - pattern: Crypto.Cipher.DES.new(...)
  message: |
    Detected DES cipher algorithm which is considered insecure. The algorithm is considered weak
    and
    has been deprecated. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_cipher_rc2.yml"
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC2.new(...)
    - pattern: Crypto.Cipher.ARC2.new
  message: |
    Detected RC2 cipher algorithm which is considered insecure. The algorithm has known
    vulnerabilities and is difficult to use securely. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_cipher_rc4.yml"
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC4.new(...)
    - pattern: Crypto.Cipher.ARC4.new(...)
  message: |
    Detected RC4 cipher algorithm which is considered insecure. The algorithm has many known
    vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_cipher_xor.yml"
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.XOR.new(...)
    - pattern: Crypto.Cipher.XOR.new(...)
  message: |
    Detected XOR cipher algorithm which is considered insecure. This algorithm is not
    cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_encrypt_dsa_rsa.yml"
  patterns:
  - pattern-either:
    - pattern: 'cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(...,key_size=$SIZE,...)

        '
    - pattern: 'cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($EXP,
        $SIZE,...)

        '
    - pattern: 'cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($SIZE,
        ...)

        '
    - pattern: 'cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key(...,key_size=$SIZE,...)

        '
    - pattern: 'cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($EXP,
        $SIZE, ...)

        '
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($SIZE,...)
    - pattern: Crypto.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate(bits=$SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate(bits=$SIZE, ...)
    - pattern: pycrypto_rsa.generate(bits=$SIZE, ...)
    - pattern: pycrypto_dsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_rsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_rsa.generate($SIZE, ...)
    - pattern: pycryptodomex_dsa.generate(bits=$SIZE, ...)
    - pattern: pycryptodomex_dsa.generate($SIZE, ...)
  - metavariable-comparison:
      metavariable: "$SIZE"
      comparison: "$SIZE < 2048"
  message: |
    Detected an insufficient key size for DSA. NIST recommends a key size
    of 2048 or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_encrypt_ec.yml"
  patterns:
  - pattern-inside: cryptography.hazmat.primitives.asymmetric.ec.generate_private_key(...)
  message: |
    Detected an insufficient curve size for EC. NIST recommends
    a key size of 224 or higher. For example, use 'ec.SECP256R1'.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_hash_md5.yml"
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD5.new(...)
    - pattern: Cryptodome.Hash.MD5.new (...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_hash_sha1.yml"
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.SHA.new(...)
    - pattern: Cryptodome.Hash.SHA.new (...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_hazmat_cipher_arc4.yml"
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.ARC4(...)
  message: |
    Detected RC4 cipher algorithm which is considered insecure. The algorithm has many known
    vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_hazmat_cipher_blowfish.yml"
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.Blowfish(...)
  message: |
    Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many known
    vulnerabilities. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-crypto_hazmat_cipher_idea.yml"
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.IDEA(...)
  message: |
    Detected IDEA cipher algorithm which is considered insecure. The algorithm is considered weak
    and has been deprecated. Use AES instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-hash_md2.yml"
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD2.new(...)
    - pattern: Cryptodome.Hash.MD2.new (...)
  message: |
    Detected MD2 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-hash_md4.yml"
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD4.new(...)
    - pattern: Cryptodome.Hash.MD4.new (...)
  message: |
    Detected MD4 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-hash_md5.yml"
  pattern: hashlib.md5(...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-hash_sha1.yml"
  pattern: hashlib.sha1(...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-hashlib_new_insecure_functions.yml"
  patterns:
  - pattern-either:
    - pattern: hashlib.new("=~/[M|m][D|d][4|5]/", ...)
    - pattern: hashlib.new(..., name="=~/[M|m][D|d][4|5]/", ...)
    - pattern: hashlib.new('sha1')
    - pattern: hashlib.new(..., name='SHA1')
    - pattern: hashlib.new('sha', string='test')
    - pattern: hashlib.new(name='SHA', string='test')
  message: |
    Detected use of an insecure MD4 or MD5 hash function. These functions have known
    vulnerabilities
    and are considered deprecated.Consider using 'SHA256' or a similar function instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-import_pycrypto.yml"
  pattern-either:
  - pattern: import pycryto
  - pattern: import Crypto.Cipher
  - pattern: import Crypto.Hash
  - pattern: import Crypto.IO
  - pattern: import Crypto.Protocol
  - pattern: import Crypto.PublicKey
  - pattern: import Crypto.Random
  - pattern: import Crypto.Signature
  - pattern: import Crypto.Util
  message: 'Consider possible security implications associated with pycrypto module.

    '
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/crypto/rule-import_pyghmi.yml"
  pattern-either:
  - pattern: import pyghmi
  message: |
    An IPMI-related module is being imported. IPMI is considered insecure. Use an encrypted
    protocol.
  metadata:
    cisa: https://www.cisa.gov/uscert/ncas/alerts/TA13-207A
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/deserialization/rule-cpickle.yml"
  pattern: cPickle.$FUNC(...)
  message: |
    Avoid using `cPickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/deserialization/rule-dill.yml"
  pattern-either:
  - pattern: dill.$FUNC(...)
  message: |
    Avoid using `dill`, which uses `pickle`, which is known to lead to code
    execution vulnerabilities. When unpickling, the serialized data could be manipulated
    to run arbitrary code. Instead, consider serializing the relevant data as JSON
    or a similar text-based serialization format.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  languages:
  - python
  severity: WARNING
- id: "../sast-rules/python/deserialization/rule-marshal.yml"
  pattern-either:
  - pattern: marshal.dump(...)
  - pattern: marshal.dumps(...)
  - pattern: marshal.load(...)
  - pattern: marshal.loads(...)
  message: |
    The marshal module is not intended to be secure against erroneous or maliciously constructed
    data. Never unmarshal data received from anuntrusted or unauthenticated source.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/deserialization/rule-pickle.yml"
  pattern-either:
  - pattern: pickle.$FUNC(...)
  - pattern: _pickle.$FUNC(...)
  message: |
    Avoid using `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/deserialization/rule-shelve.yml"
  pattern-either:
  - pattern: shelve.$FUNC(...)
  message: |
    Avoid using `shelve`, which uses `pickle`, which is known to lead to code
    execution vulnerabilities. When unpickling, the serialized data could be
    manipulated to run arbitrary code. Instead, consider serializing the
    relevant data as JSON or a similar text-based serialization format.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/deserialization/rule-yaml_load.yml"
  patterns:
  - pattern-inside: |
      import yaml
      ...
      yaml.load($FOO)
  - pattern: yaml.load($FOO)
  message: |
    Avoid using `load()`. `PyYAML.load` can create arbitrary Pythonobjects. A malicious actor could
    exploit this to run arbitrarycode. Use `safe_load()` instead.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/django/rule-django_extra_used.yml"
  patterns:
  - pattern: "$X.objects. ... .extra(..., $K = $V, ...)"
  - pattern-not-inside: |
      $V = ['...']
      ...
  - metavariable-pattern:
      metavariable: "$V"
      patterns:
      - pattern: "$V"
      - pattern-not: "[..., '...', ...]"
      - pattern-not: "{..., '...': '...', ...}"
      - pattern-not: '"..."'
      - pattern-not: '[..., "..." % "...", ...]'
      - pattern-not: '{..., $L: "..." % "...", ...}'
      - pattern-not: '{..., $L: "...".format("..."), ...}'
      - pattern-not: '[..., "...".format("..."), ...]'
  message: |
    This is a last resort. You should be careful when using `QuerySet.extra` due
    to SQLi.
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/django/rule-django_rawsql_used.yml"
  patterns:
  - pattern-either:
    - pattern: "$MODEL.objects.raw($QUERY, ...)"
    - pattern: django.db.models.expressions.RawSQL(...)
  message: |
    You should be very careful whenever you write raw SQL. Consider usingDjango ORM before raw SQL.
    See https://docs.djangoproject.com/en/3.0/topics/db/sql/#passing-parameters-into-raw
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/escaping/rule-django.yml"
  patterns:
  - pattern-not-inside: django.utils.html.format_html(...)
  - pattern-either:
    - patterns:
      - pattern: django.utils.safestring.SafeText(...)
      - pattern-not: django.utils.safestring.SafeText("...")
    - patterns:
      - pattern: django.utils.safestring.SafeUnicode(...)
      - pattern-not: django.utils.safestring.SafeUnicode("...")
    - patterns:
      - pattern: django.utils.safestring.SafeString(...)
      - pattern-not: django.utils.safestring.SafeString("...")
    - patterns:
      - pattern: django.utils.safestring.SafeBytes(...)
      - pattern-not: django.utils.safestring.SafeBytes("...")
    - patterns:
      - pattern: django.utils.safestring.mark_safe(...)
      - pattern-not: django.utils.safestring.mark_safe("...")
  message: |
    `mark_safe()` is used to mark a string as `safe` for HTML output.
    This disables escaping and could therefore subject the content to
    XSS attacks. Use `django.utils.html.format_html()` to build HTML
    for rendering instead.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/escaping/rule-jinja2_autoescape_false.yml"
  patterns:
  - pattern-not: jinja2.Environment(..., autoescape=True, ...)
  - pattern-not: jinja2.Environment(..., autoescape=jinja2.select_autoescape(...),
      ...)
  - pattern: jinja2.Environment(...)
  message: |
    Detected a Jinja2 environment without autoescaping. Jinja2 does notautoescape by default. This
    is dangerous if you are rendering to a browserbecause this allows for cross-site scripting
    (XSS)
    attacks.  If you are ina web context, enable autoescaping by setting `autoescape=True`. You
    may also consider using `jinja2.select_autoescape()` to only enable automatic escaping for
    certain file
    extensions.
  metadata:
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    owasp: 'A7: Cross-Site Scripting (XSS)'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/escaping/rule-mark_safe.yml"
  patterns:
  - pattern-not-inside: django.utils.html.format_html(...)
  - pattern-either:
    - patterns:
      - pattern: django.utils.safestring.mark_safe(...)
      - pattern-not: django.utils.safestring.mark_safe("...")
  message: |
    `mark_safe()` is used to mark a string as `safe` for HTML output.
    This disables escaping and could therefore subject the content to
    XSS attacks. Use `django.utils.html.format_html()` to build HTML
    for rendering instead.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/escaping/rule-use_of_mako_templates.yml"
  pattern: mako.template.Template(...)
  message: |
    Mako templates do not provide a global HTML escaping mechanism.This means you must escape all
    sensitive data in your templatesusing `| u` for URL escaping or `| h` for HTML escaping. If you
    are using Mako to serve web content, consider usinga system such as Jinja2 which enables global
    escaping.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/eval/rule-eval.yml"
  patterns:
  - pattern: eval(...)
  message: |
    Detected the use of `eval()`. `eval()` can be dangerous if used to evaluate dynamic content. If
    this
    content can be input from outside the program, thismay be a code injection vulnerability.
    Ensure evaluated content is not definableby external sources. Consider using safer
    `ast.literal_eval`.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/exception/rule-try_except_continue.yml"
  pattern-either:
  - pattern: |
      try: ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: continue
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  - pattern: |
      try: ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: continue
  message: 'Try, Except, Continue

    '
  metadata:
    cwe: 'CWE-703: Improper Check or Handling of Exceptional Conditions'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/exception/rule-try_except_pass.yml"
  pattern-either:
  - pattern: |
      try: ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION: pass
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  - pattern: |
      try: ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
      except ... : ...
  - pattern: |
      try: ...
      except ... : ...
      except ... : ...
      except ... : ...
      except $EXCEPTION as $X: pass
  message: 'Try, Except, Pass

    '
  metadata:
    cwe: 'CWE-703: Improper Check or Handling of Exceptional Conditions'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/exec/rule-exec_used.yml"
  pattern-either:
  - pattern: exec(...)
  - pattern: exec("...")
  message: 'The use of `exec` is risky.

    '
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/exec/rule-import_subprocess.yml"
  patterns:
  - pattern: import subprocess
  message: 'Consider possible security implications associated with subprocess module.

    '
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A8: Insecure Deserialization'
  languages:
  - python
  severity: WARNING
- id: "../sast-rules/python/exec/rule-linux_command_wildcard_injection.yml"
  patterns:
  - pattern-either:
    - pattern-inside: os.system("...")
    - pattern-inside: os.popen("...")
    - pattern-inside: os.popen2("...")
    - pattern-inside: os.popen3("...")
    - pattern-inside: os.popen4("...")
    - pattern-inside: subprocess.$W(..., shell=True, ...)
  - pattern-regex: "(tar|chmod|chown|rsync)(.*?)\\*"
  message: |
    Detected use of the wildcard character in a system call that spawns a shell.This subjects the
    wildcard to normal shell expansion, which can have unintended consequencesif there exist any
    non-standard file names. Consider a file named `-e sh script.sh`.
  metadata:
    cwe: 'CWE-155: Improper Neutralization of Wildcards or Matching Symbols'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/exec/rule-os_path.yml"
  pattern-either:
  - pattern: os.system("...", ...)
  - pattern: $OS.popen("...", ...)
  - pattern: $OS.popen2("...", ...)
  - pattern: $OS.popen3("...", ...)
  - pattern: $OS.popen4("...", ...)
  - pattern: commands.getoutput("...", ...)
  - pattern: commands.getstatusoutput("...", ...)
  message: |
    Starting a process with a shell; seems safe, but may be changed in the future, consider
    rewriting without shell
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/exec/rule-os_popen2.yml"
  patterns:
  - pattern-either:
    - pattern: os.system(...)
    - pattern: os.popen(...)
    - pattern: os.popen2(...)
    - pattern: os.popen3(...)
    - pattern: os.popen4(...)
    - pattern: popen2.popen2(...)
    - pattern: popen2.popen3(...)
    - pattern: popen2.popen4(...)
    - pattern: popen2.Popen3(...)
    - pattern: popen2.Popen4(...)
    - pattern: commands.getoutput(...)
    - pattern: commands.getstatusoutput("")
  message: |
    Starting a process with a shell; seems safe, but may be changed in the future, consider
    rewriting without shell
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/exec/rule-paramiko_calls.yml"
  patterns:
  - pattern-inside: |
      import paramiko
      ...
  - pattern: "$CLIENT.exec_command(...)"
  message: |
    Unverified SSL context detected. This will permit insecure connections without `verifyingSSL`
    certificates. Use `ssl.create_default_context()` instead.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/exec/rule-start_process_partial_path.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: os.popen(...)
      - pattern-not: os.popen("...", ...)
    - patterns:
      - pattern: os.system(...)
      - pattern-not: os.system("...", ...)
    - patterns:
      - pattern: os.popen2(...)
      - pattern-not: os.popen2("...", ...)
    - patterns:
      - pattern: os.popen3(...)
      - pattern-not: os.popen3("...", ...)
    - patterns:
      - pattern: os.popen4(...)
      - pattern-not: os.popen4("...", ...)
    - patterns:
      - pattern: popen2.popen2(...)
      - pattern-not: popen2.popen2("...", ...)
    - patterns:
      - pattern: popen2.popen3(...)
      - pattern-not: popen2.popen3("...", ...)
    - patterns:
      - pattern: popen2.popen4(...)
      - pattern-not: popen2.popen4("...", ...)
    - patterns:
      - pattern: popen2.Popen3(...)
      - pattern-not: popen2.Popen3("...", ...)
    - patterns:
      - pattern: popen2.Popen4(...)
      - pattern-not: popen2.Popen4("...", ...)
    - patterns:
      - pattern: commands.getoutput(...)
      - pattern-not: commands.getoutput("...", ...)
    - patterns:
      - pattern: commands.getstatusoutput(...)
      - pattern-not: commands.getstatusoutput("...", ...)
  message: 'Starting a process with a partial executable path

    '
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/exec/rule-start_process_path.yml"
  patterns:
  - pattern-either:
    - pattern: subprocess.Popen($BIN, shell=False)
    - pattern: subprocess.Popen([$BIN, ...], shell=False)
    - pattern: os.system($BIN, shell=False)
    - pattern: os.system([$BIN, ...], shell=False)
    - pattern: popen2.Popen3($BIN, shell=False)
    - pattern: popen2.Popen3([$BIN, ...], shell=False)
    - pattern: popen2.Popen4($BIN, shell=False)
    - pattern: popen2.Popen4([$BIN, ...], shell=False)
    - pattern: commands.getoutput($BIN, shell=False)
    - pattern: commands.getoutput([$BIN, ...], shell=False)
    - pattern: commands.getstatusoutput($BIN, shell=False)
    - pattern: commands.getstatusoutput([$BIN, ...], shell=False)
  - metavariable-regex:
      metavariable: "$BIN"
      regex: ^['"][^/\.][^:].*['"]
  message: 'Starting a process with a partial executable path

    '
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/exec/rule-start_process_with_no_shell.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-not: os.$W("...", ...)
      - pattern-either:
        - pattern: os.execl(...)
        - pattern: os.execle(...)
        - pattern: os.execlp(...)
        - pattern: os.execlpe(...)
        - pattern: os.execv(...)
        - pattern: os.execve(...)
        - pattern: os.execvp(...)
        - pattern: os.execvpe(...)
        - pattern: os.startfile(...)
    - patterns:
      - pattern-either:
        - pattern: os.spawnl(...)
        - pattern: os.spawnle(...)
        - pattern: os.spawnlp(...)
        - pattern: os.spawnlpe(...)
        - pattern: os.spawnv(...)
        - pattern: os.spawnve(...)
        - pattern: os.spawnvp(...)
        - pattern: os.spawnvpe(...)
  message: |
    Found dynamic content when spawning a process. This is dangerous if externaldata can reach this
    function call because it allows a malicious actor toexecute commands. Ensure no external data
    reaches here.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/exec/rule-subprocess_call.yml"
  patterns:
  - pattern-not: subprocess.$FUNC($ARG, shell=<... True ...>)
  - pattern-not: subprocess.$FUNC($ARG, shell=<... 'True' ...>)
  - pattern-not: subprocess.$FUNC($ARG, shell=<... "True" ...>)
  - pattern-either:
    - pattern: 'subprocess.$FUNC($ARG, shell=False)

        '
    - pattern: 'subprocess.$FUNC($ARG, shell=0)

        '
    - pattern: 'subprocess.$FUNC($ARG, shell={...})

        '
    - pattern: 'subprocess.$FUNC($ARG, shell=[...])

        '
    - pattern: 'subprocess.$FUNC($ARG)

        '
  message: |
    Python possesses many mechanisms to invoke an external executable. However,
    doing so may present a security issue if appropriate care is not taken to
    sanitize any user provided or variable input. This plugin test is part of a
    family of tests built to check for process spawning and warn appropriately.
    Specifically, this test looks for the spawning of a subprocess without the
    use of a command shell. This type of subprocess invocation is not
    vulnerable to shell injection attacks, but care should still be taken to
    ensure validity of input.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/exec/rule-subprocess_call_array.yml"
  patterns:
  - pattern: 'subprocess.$FUNC([..., $ARG, ...])

      '
  - metavariable-pattern:
      metavariable: "$ARG"
      patterns:
      - pattern-not: '"..."

          '
      - pattern-not: "'...'\n"
  message: 'subprocess call - check for execution of untrusted input

    '
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/exec/rule-subprocess_popen_shell_true.yml"
  patterns:
  - pattern-not: subprocess.$FUNC(..., shell=False, ...)
  - pattern-not: subprocess.$FUNC(..., shell=False)
  - pattern-not: subprocess.$FUNC(..., shell=0)
  - pattern-not: subprocess.$FUNC(..., shell=[])
  - pattern-not: subprocess.$FUNC(..., shell={})
  - pattern-not: subprocess.$FUNC(..., shell=None)
  - pattern-either:
    - pattern: subprocess.$FUNC(..., shell=True, ...)
    - pattern: subprocess.$FUNC(..., shell='True', ...)
    - pattern: subprocess.$FUNC(..., shell='False', ...)
    - pattern: subprocess.$FUNC(..., shell='None', ...)
    - pattern: subprocess.$FUNC(..., shell=$X, ...)
  message: |
    Found `subprocess` function `$FUNC` with `shell=True`. This is dangerous because this call will
    spawn the command using a shell process. Doing so propagates current shell settings and
    variables,
    which makes it much easier for a malicious actor to execute commands. Use `shell=False`
    instead.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/exec/rule-subprocess_shell_TRUE.yml"
  patterns:
  - pattern-not: subprocess.$FUNC(..., shell=True, ...)
  - pattern: "$FOO(..., shell=True, ...)"
  message: 'subprocess call - check for execution of untrusted input

    '
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/file_permissions/rule-general_bad_permission.yml"
  patterns:
  - pattern: os.chmod(...,$MASK)
  - metavariable-regex:
      metavariable: "$MASK"
      regex: "(0x..f|0o..[2,3,7]|stat.S_IXGRP|stat.S_IWOTH)"
  message: 'Chmod setting a permissive mask on file.

    '
  metadata:
    cwe: 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    owasp: 'A6: Security Misconfiguration'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/files/rule-tarfile_unsafe_members.yml"
  patterns:
  - pattern-inside: |
      import tarfile
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $TAR = tarfile.open(...)
          ...
      - pattern-either:
        - pattern: "$TAR.extractall(...)"
        - pattern: tarfile.extractall(..., members=$TAR)
        - pattern: "$TAR.extractall(..., members=[])"
    - patterns:
      - pattern: tarfile.extractall(...)
      - pattern: tarfile.extractall(..., members=[])
  message: |
    tarfile.extractall used without any validation. You should check members and discard dangerous
    ones.
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/flask/rule-app_debug.yml"
  patterns:
  - pattern-inside: |
      import flask
      ...
  - pattern: "$APP.run(..., debug=True, ...)"
  message: |
    Detected Flask app with `debug=True`. Do not deploy to production with this flag enabled as it
    will leak sensitive information. Instead, consider using Flask configuration variables or
    setting
    `debug` using system environment variables.
  metadata:
    cwe: 'CWE-489: Active Debug Code'
    owasp: 'A6: Security Misconfiguration'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/ftp/rule-ftplib.yml"
  pattern: ftplib.$ANYTHING(...)
  message: |
    FTP does not encrypt communications by default. This can lead to sensitive data being exposed.
    Ensure use of FTP here does not expose sensitive data.
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/ftp/rule-import_ftplib.yml"
  patterns:
  - pattern-either:
    - pattern: import ftplib
    - pattern: from ftplib import FTP
    - pattern: ftplib.FTP(...)
  message: |
    functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP orsome other encrypted
    protocol
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/https/rule-httpsconnection.yml"
  patterns:
  - pattern-either:
    - pattern: httplib.HTTPSConnection(...)
    - pattern: http.client.HTTPSConnection(...)
    - pattern: six.moves.http_client.HTTPSConnection(...)
  message: |
    The HTTPSConnection API has changed frequently with minor releases of Python.Ensure you are
    using the API for your version of Python securely. For example, Python 3 versions prior to
    3.4.3
    will not verify SSL certificates by default.
  metadata:
    cwe: 'CWE-295: Improper Certificate Validation'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/log/rule-logging_config_insecure_listen.yml"
  patterns:
  - pattern: logging.config.listen(...)
  message: |
    The logging.config.listen function provides the ability to listen for external configuration
    files on a socket server. Because portions of the configuration are passed through eval(), use
    of this function may open its users to a security risk. While the function only binds to a
    socket on localhost, and so does not accept connections from remote machines, there are
    scenarios where untrusted code could be run under the account of the process which calls
    listen(). logging.config.listen provides the ability to verify bytes received across the socket
    with signature verification or encryption/decryption.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/random/rule-random.yml"
  pattern-either:
  - pattern: random.random(...)
  - pattern: random.randrange(...)
  - pattern: random.randint(...)
  - pattern: random.choice(...)
  - pattern: random.uniform(...)
  - pattern: random.triangular(...)
  message: 'Standard pseudo-random generators are not suitable for security/cryptographic
    purposes.

    '
  metadata:
    cwe: 'CWE-330: Use of Insufficiently Random Values'
    owasp: 'A3: Sensitive Data Exposure'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/requests/rule-request_without_timeout.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: requests.$METHOD('...', timeout=$VAL)
      - metavariable-comparison:
          metavariable: "$VAL"
          comparison: "$VAL <= 0"
    - patterns:
      - pattern: requests.$METHOD('...', timeout=$VAL)
      - metavariable-regex:
          metavariable: "$VAL"
          regex: "(^None)"
    - patterns:
      - pattern-not: requests.$METHOD('...', timeout=$VAL, ...)
      - pattern-either:
        - pattern: requests.$METHOD('...', ...)
        - pattern: requests.$METHOD('...')
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(get|put|delete|post|options|head|patch)"
  message: 'Requests call without timeout can cause your program to hang indefinitely.

    '
  metadata:
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/secrets/rule-hardcoded_password_default.yml"
  patterns:
  - pattern: |
      def $FUNC(..., password="...", ...):
        ...
  message: |
    Hardcoded password is used as a default argument to `$FUNC`. This could be dangerous if a real
    password is not supplied.
  metadata:
    cwe: 'CWE-259: Use of Hard-coded Password'
    owasp: 'A3: Broken Authentication and Session Management'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/secrets/rule-hardcoded_password_funcarg.yml"
  patterns:
  - pattern: $FUNC(..., $PW="...", ...)
  - metavariable-regex:
      metavariable: "$PW"
      regex: ".*([Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd]|pass|passwd|pwd|secret|token|secrete).*"
  message: 'Possible hardcoded password

    '
  metadata:
    cwe: 'CWE-259: Use of Hard-coded Password'
    owasp: 'A3: Broken Authentication and Session Management'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/secrets/rule-hardcoded_password_string.yml"
  patterns:
  - pattern-either:
    - pattern: $MASK == "..."
    - pattern: $MASK = "..."
    - pattern: "$X[$MASK] = ..."
  - metavariable-regex:
      metavariable: "$MASK"
      regex: "[^\\[]*([Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd]|pass|passwd|pwd|secret|token|secrete)[^\\]]*"
  message: 'Possible hardcoded password

    '
  metadata:
    cwe: 'CWE-259: Use of Hard-coded Password'
    owasp: 'A3: Broken Authentication and Session Management'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/snmp/rule-insecure_snmp_version.yml"
  pattern-either:
  - pattern: pysnmp.hlapi.CommunityData(..., mpModel=0, ...)
  - pattern: pysnmp.hlapi.CommunityData(..., mpModel=1, ...)
  message: 'The use of SNMPv1 and SNMPv2 is insecure. You should use SNMPv3 if able.

    '
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/snmp/rule-snmp_weak_cryptography.yml"
  pattern-either:
  - pattern: pysnmp.hlapi.UsmUserData($ARG1, $ARG2)
  - pattern: pysnmp.hlapi.UsmUserData($ARG1)
  - pattern: pysnmp.hlapi.UsmUserData(...,'noAuthNoPriv',...)
  - pattern: pysnmp.hlapi.UsmUserData(...,'authNoPriv',...)
  message: 'You should not use SNMPv3 without encryption. noAuthNoPriv & authNoPriv
    is insecure

    '
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/sql/rule-hardcoded_sql_expression.yml"
  patterns:
  - pattern-either:
    - pattern: $DB.execute("..." % ...)
    - pattern: $DB.execute("...".format(...))
    - pattern: $DB.execute(f"...")
    - pattern: $DB.execute("..." + $V + "...")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $SQL = "..." % ...
            ...
        - pattern-inside: |
            $SQL = "...".format(...)
            ...
        - pattern-inside: |
            $SQL = f"...{$X}..."
            ...
      - pattern: "$DB.execute($SQL)"
  message: 'Detected possible formatted SQL query. Use parameterized queries instead.

    '
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/ssh/rule-ssl_nohost_key_verification.yml"
  patterns:
  - pattern-inside: |
      $CLIENT = paramiko.client.SSHClient(...)
      ...
      $CLIENT.set_missing_host_key_policy(...)
  - pattern-either:
    - pattern: paramiko.client.AutoAddPolicy
    - pattern: paramiko.client.WarningPolicy
  message: |
    Detected a paramiko host key policy that implicitly trusts a server's
    host key. Host keys should be verified to ensure the connection
    is not to a malicious server. Use RejectPolicy or a custom subclass
    instead.
  metadata:
    cwe: 'CWE-322: Key Exchange without Entity Authentication'
    owasp: 'A5: Broken Access Control'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/ssl/rule-req_no_certvalid.yml"
  patterns:
  - pattern-either:
    - pattern: requests.put(..., verify=False, ...)
    - pattern: requests.patch(..., verify=False, ...)
    - pattern: requests.delete(..., verify=False, ...)
    - pattern: requests.head(..., verify=False, ...)
    - pattern: requests.options(..., verify=False, ...)
    - pattern: requests.request(..., verify=False, ...)
    - pattern: requests.get(..., verify=False, ...)
    - pattern: requests.post(..., verify=False, ...)
  message: |
    Certificate verification has been explicitly disabled. This permits insecure connections to
    insecure servers. Re-enable certification validation.
  metadata:
    cwe: 'CWE-295: Improper Certificate Validation'
    owasp: 'A3: Sensitive Data Exposure'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/ssl/rule-ssl_no_version.yml"
  patterns:
  - pattern: ssl.wrap_socket()
  message: |
    `ssl.wrap_socket` call with no SSL/TLS protocol version specified, the default SSLv23 could be
    insecure, possible security issue.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/ssl/rule-ssl_with_bad_version.yml"
  patterns:
  - pattern-either:
    - pattern: ssl.PROTOCOL_SSLv2
    - pattern: ssl.PROTOCOL_SSLv3
    - pattern: ssl.PROTOCOL_TLSv1
    - pattern: ssl.PROTOCOL_TLSv1_1
    - pattern: pyOpenSSL.SSL.SSLv2_METHOD
    - pattern: pyOpenSSL.SSL.SSLv23_METHOD
    - pattern: pyOpenSSL.SSL.SSLv3_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_METHOD
    - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
  message: |
    An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
    are considered weak encryption and are deprecated.
    Use 'ssl.PROTOCOL_TLSv1_2' or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/ssl/rule-unverified_context.yml"
  pattern: ssl._create_unverified_context(...)
  message: |
    Unverified SSL context detected. This will permit insecure connections without `verifyingSSL`
    certificates. Use `ssl.create_default_context()` instead.
  metadata:
    cwe: 'CWE-295: Improper Certificate Validation'
    owasp: 'A3: Sensitive Data Exposure'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/telnet/rule-import_telnib.yml"
  patterns:
  - pattern: import telnetlib
  message: |
    Telnet-related functions are being called. Telnet is considered insecure.Use SSH or some other
    encrypted protocol.
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/telnet/rule-telnetlib.yml"
  pattern: telnetlib.$ANYTHING(...)
  message: 'Telnet does not encrypt communications. Use SSH instead.

    '
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/tmpdir/rule-hardcodedtmp.yml"
  pattern: $CALL("=~/^\/tmp.*/", ...)
  message: 'Detected hardcoded temp directory. Consider using `tempfile.TemporaryFile`
    instead.

    '
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/tmpdir/rule-mktemp_q.yml"
  pattern: tempfile.mktemp(...)
  message: |
    Use tempfile.NamedTemporaryFile instead. From the official Python documentation: THIS FUNCTION
    IS UNSAFE AND SHOULD NOT BE USED. The file name may refer to a file that did not exist at some
    point, but by the time you getaround to creating it, someone else may have beaten you to the
    punch.
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
    owasp: 'A3: Sensitive Data Exposure'
  languages:
  - python
  severity: ERROR
- id: "../sast-rules/python/tmpdir/rule-specialdir.yml"
  patterns:
  - pattern: open($DIR, ...)
  - metavariable-regex:
      metavariable: "$DIR"
      regex: '[''"](/tmp|/var/tmp|/dev/shm).*[''"]'
  message: 'Probable insecure usage of temp file/directory.

    '
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/tmpdir/rule-tempnam.yml"
  pattern-either:
  - pattern: os.tempnam(...)
  - pattern: os.tmpnam(...)
  message: 'The Python `os` `tempnam|tmpnam` functions are vulnerable to symlink attacks

    '
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/urlopen/rule-urllib_urlopen1.yml"
  patterns:
  - pattern-not: urllib.$W("...")
  - pattern-not: urllib.request.$W("...")
  - pattern-not: $OPENER.$W("...")
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: urllib.urlopen(...)
        - pattern: urllib.request.urlopen(...)
        - pattern: urllib.urlretrieve(...)
        - pattern: urllib.request.urlretrieve(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $OPENER = urllib.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.FancyURLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.FancyURLopener(...)
            ...
      - pattern-either:
        - pattern: "$OPENER.open(...)"
        - pattern: "$OPENER.retrieve(...)"
  message: |
    Detected a dynamic value being used with urllib. urllib supports `file://` schemes, so a
    dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit
    uses of urllib calls to ensure user data cannot control the URLs, or consider using the
    `requests` library instead.
  metadata:
    cwe: 'CWE-939: Improper Authorization in Handler for Custom URL Scheme'
    owasp: 'A5: Broken Access Control'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/urlopen/rule-urllib_urlopen2.yml"
  pattern-either:
  - pattern: urllib.urlopen(...)
  - pattern: urllib2.urlopen(...)
  - pattern: urllib2.Request(...)
  - pattern: urllib.Request(...)
  - pattern: urllib.URLopener(...)
  - pattern: urllib.FancyURLopener(...)
  - pattern: urllib.request.FancyURLopener(...)
  - pattern: urllib.request.urlopen(...)
  - pattern: urllib.request.URLopener(...)
  - pattern: urllib.request.urlretrieve(...)
  - pattern: six.moves.urllib.request.urlopen(...)
  - pattern: six.moves.urllib.request.urlretrieve(...)
  - pattern: six.moves.urllib.request.URLopener(...)
  - pattern: six.moves.urllib.request.FancyURLopener(...)
  message: |
    Detected a dynamic value being used with urllib. urllib supports `file://` schemes, so a
    dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit
    uses of urllib calls to ensure user data cannot control the URLs, or consider using the
    `requests` library instead.
  metadata:
    cwe: 'CWE-939: Improper Authorization in Handler for Custom URL Scheme'
    owasp: 'A5: Broken Access Control'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/xml/rule-celement.yml"
  pattern-either:
  - patterns:
    - pattern: xml.etree.cElementTree.fromstring(...)
    - pattern-not: xml.etree.cElementTree.fromstring("...")
  - pattern: xml.etree.cElementTree.parse(...)
  - pattern: xml.etree.cElementTree.iterparse(...)
  - pattern: xml.etree.cElementTree.XMLParser(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/xml/rule-element.yml"
  pattern-either:
  - patterns:
    - pattern: xml.etree.ElementTree.fromstring(...)
    - pattern-not: xml.etree.ElementTree.fromstring("...")
  - pattern: xml.etree.ElementTree.parse(...)
  - pattern: xml.etree.ElementTree.iterparse(...)
  - pattern: xml.etree.ElementTree.XMLParser(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/xml/rule-etree.yml"
  pattern-either:
  - pattern: lxml.etree.parse(...)
  - patterns:
    - pattern: lxml.etree.fromstring(...)
    - pattern-not: lxml.etree.fromstring("...")
  - pattern: lxml.etree.RestrictedElement(...)
  - pattern: lxml.etree.GlobalParserTLS(...)
  - pattern: lxml.etree.getDefaultParser(...)
  - pattern: lxml.etree.check_docinfo(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/xml/rule-expatbuilder.yml"
  pattern-either:
  - patterns:
    - pattern: xml.dom.expatbuilder.parse(...)
    - pattern-not: xml.dom.expatbuilder.parse("...")
  - pattern: xml.dom.expatbuilder.parseString(...)
  message: 'Insecure XML parsing functionality, prefer `defusedxml`

    '
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/xml/rule-expatreader.yml"
  pattern-either:
  - pattern: xml.dom.expatreader.parse(...)
  - patterns:
    - pattern: xml.dom.expatreader.parseString(...)
    - pattern-not: xml.dom.expatreader.parseString("...")
  - pattern: xml.dom.expatreader.parseString(...)
  - pattern: xml.dom.expatreader.create_parser(...)
  message: 'Insecure XML parsing functionality, prefer `defusedxml`

    '
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/xml/rule-import_etree.yml"
  patterns:
  - pattern-either:
    - pattern: import xml.etree.cElementTree
    - pattern: import xml.etree.ElementTree
  message: 'Consider possible security implications associated with etree module.

    '
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/xml/rule-import_expat.yml"
  patterns:
  - pattern-either:
    - pattern: import xml.dom.expatbuilder
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/xml/rule-import_lxml.yml"
  patterns:
  - pattern-either:
    - pattern: import lxml
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/xml/rule-import_minidom.yml"
  patterns:
  - pattern-either:
    - pattern: import xml.dom.minidom
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable
    to XML attacks. Replace vulnerable imports with the equivalent defusedxml
    package, or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/xml/rule-import_pickle.yml"
  patterns:
  - pattern-either:
    - pattern: import pickle
    - pattern: import cPickle
    - pattern: import dill
  message: 'Consider possible security implications associated with pickle module.

    '
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/xml/rule-import_pulldom.yml"
  patterns:
  - pattern-either:
    - pattern: import xml.dom.pulldom
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/xml/rule-import_sax.yml"
  patterns:
  - pattern-either:
    - pattern: import xml.sax
  message: |
    Using various methods to parse untrusted XML data is known to be vulnerable to
    XML attacks. Replace vulnerable imports with the equivalent defusedxml package,
    or make sure defusedxml.defuse_stdlib() is called.
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: INFO
  languages:
  - python
- id: "../sast-rules/python/xml/rule-import_xmlrpclib.yml"
  pattern-either:
  - pattern: import xmlrpclib
  message: 'Consider possible security implications associated with xmlrpclib module.

    '
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
  severity: ERROR
  languages:
  - python
- id: "../sast-rules/python/xml/rule-minidom.yml"
  pattern-either:
  - patterns:
    - pattern: xml.dom.minidom.parseString(...)
    - pattern-not: xml.dom.minidom.parseString("...")
  - pattern: xml.dom.minidom.parse(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/xml/rule-pulldom.yml"
  pattern-either:
  - patterns:
    - pattern: xml.dom.pulldom.parseString(...)
    - pattern-not: xml.dom.pulldom.parseString("...")
  - pattern: xml.dom.pulldom.parse(...)
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the `defusedxml` library instead. Use
    'defusedxml'. See https://github.com/tiran/defusedxml for more information.
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/python/xml/rule-sax.yml"
  pattern-either:
  - pattern: xml.sax.parse(...)
  - patterns:
    - pattern: xml.sax.parseString(...)
    - pattern-not: xml.sax.parseString("...")
  - pattern: xml.sax.make_parser(...)
  message: 'Insecure XML parsing functionality, prefer `defusedxml`

    '
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
  severity: WARNING
  languages:
  - python
- id: "../sast-rules/scala/cookie/rule-CookieHTTPOnly.yml"
  pattern-either:
  - patterns:
    - pattern: |
        val $C = new javax.servlet.http.Cookie(..., ...);
        ...
        $RESP.addCookie($C);
    - pattern-not-inside: |
        val $C = new javax.servlet.http.Cookie(..., ...);
        ...
        $C.setHttpOnly(true);
        ...
        $RESP.addCookie($C);
  - pattern: "(javax.servlet.http.Cookie $C).setHttpOnly(false);"
  message: |
    A new cookie is created without the HttpOnly flag set. The HttpOnly flag is a directive to the
    browser to make sure that the cookie can not be red by malicious script. When a user is the
    target of a "Cross-Site Scripting", the attacker would benefit greatly from getting the session
    id for example.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    technology:
    - scala
- id: "../sast-rules/scala/cookie/rule-CookieInsecure.yml"
  pattern-either:
  - patterns:
    - pattern: |
        val $C = new javax.servlet.http.Cookie(..., ...);
        ...
        $RESP.addCookie($C);
    - pattern-not-inside: |
        val $C = new javax.servlet.http.Cookie(..., ...);
        ...
        $C.setSecure(true);
        ...
        $RESP.addCookie($C);
    - pattern: "(javax.servlet.http.Cookie $C).setSecure(false);"
  message: |
    "A new cookie is created without the Secure flag set. The Secure flag is a
     directive to the browser to make sure that the cookie is not sent for insecure communication
    (http://)"
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-539: Information Exposure Through Persistent Cookies'
    technology:
    - scala
- id: "../sast-rules/scala/cookie/rule-CookiePersistent.yml"
  patterns:
  - pattern: "($C: Cookie).setMaxAge($AGE)\n"
  - metavariable-comparison:
      metavariable: "$AGE"
      comparison: "$AGE >= 31536000"
  message: |
    "Storing sensitive data in a persistent cookie for an extended period can lead to a breach of
    confidentiality or account compromise."
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    technology:
    - scala
- id: "../sast-rules/scala/cookie/rule-CookieUsage.yml"
  patterns:
  - pattern-inside: |
      def $FUNC(..., $REQ: HttpServletRequest, ...): $TYPE = {
        ...
      }
  - pattern-either:
    - patterns:
      - pattern-inside: |
          for ($C <- $REQ.getCookies) {
              ...
          }
      - pattern-either:
        - pattern: "$C.getName"
        - pattern: "$C.getValue"
        - pattern: "$C.getPath"
    - pattern: "($C: Cookie).getName()"
    - pattern: "($C: Cookie).getValue"
    - pattern: "($C: Cookie).getPath"
  message: |
    The information stored in a custom cookie should not be sensitive or related to the session.
    In most cases, sensitive data should only be stored in session and referenced by the user's
    session cookie.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    technology:
    - scala
- id: "../sast-rules/scala/cookie/rule-HttpResponseSplitting.yml"
  mode: taint
  pattern-sources:
  - pattern: "($REQ: HttpServletRequest).getParameter(...)"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER")
        ...
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACER"
        regex: ".*^(CRLF).*"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(*CRLF)"
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...)
  pattern-sinks:
  - pattern: new javax.servlet.http.Cookie("$KEY", ...)
  - patterns:
    - pattern-inside: |
        $C = new javax.servlet.http.Cookie("$KEY", ...)
        ...
    - pattern: "$C.setValue(...)"
  message: |
    When an HTTP request contains unexpected CR and LF characters, the server may respond with an
    output stream that is interpreted as two different HTTP responses (instead of one). An attacker
    can control the second response and mount attacks such as cross-site scripting and cache
    poisoning attacks.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
    technology:
    - scala
- id: "../sast-rules/scala/cookie/rule-RequestParamToCookie.yml"
  mode: taint
  pattern-sources:
  - pattern: "($REQ: HttpServletRequest).getParameter(...);"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACER"
        regex: ".*^(CRLF).*"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(*CRLF)"
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: new javax.servlet.http.Cookie("$KEY", ...);
  - patterns:
    - pattern-inside: |
        $C = new javax.servlet.http.Cookie("$KEY", ...);
        ...
    - pattern: "$C.setValue(...);"
  message: |
    This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added
    to an HTTP response, it will allow a HTTP response splitting vulnerability. See
    http://en.wikipedia.org/wiki/HTTP_response_splitting for more information.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
    technology:
    - scala
- id: "../sast-rules/scala/cookie/rule-RequestParamToHeader.yml"
  mode: taint
  pattern-sources:
  - pattern: "($REQ: HttpServletRequest).getParameter(...);"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $STR.replaceAll("$REPLACE_CHAR", "$REPLACER");
        ...
    - pattern: "$STR"
    - metavariable-regex:
        metavariable: "$REPLACER"
        regex: ".*^(CRLF).*"
    - metavariable-regex:
        metavariable: "$REPLACE_CHAR"
        regex: "(*CRLF)"
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...)
  pattern-sinks:
  - pattern: '($RES: HttpServletResponse).setHeader("$KEY", ...);'
  - pattern: '($RES: HttpServletResponse).addHeader("$KEY", ...);'
  - pattern: '($WRP: HttpServletResponseWrapper).setHeader("$KEY", ...);'
  - pattern: '($WRP: HttpServletResponseWrapper).addHeader("$KEY", ...);'
  message: |
    This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP
    response splitting vulnerability. See http://en.wikipedia.org/wiki/HTTP_response_splitting for
    more information.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
    technology:
    - scala
- id: "../sast-rules/scala/cookie/rule-TrustBoundaryViolation.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "($H: HttpServletRequest). ... .setAttribute($ARG1, $ARG2)"
      - pattern-not: '($H: HttpServletRequest). ... .setAttribute("...", "...")'
    - patterns:
      - pattern: "($H: HttpServletRequest). ... .putValue($ARG1, $ARG2)"
      - pattern-not: '($H: HttpServletRequest). ... .putValue("...", "...")'
  languages:
  - scala
  message: |
    A trust boundary can be thought of as line drawn through a program. On one side
    of the line, data is untrusted. On the other side of the line, data is assumed
    to be trustworthy. The purpose of validation logic is to allow data to safely
    cross the trust boundary - to move from untrusted to trusted. A trust boundary
    violation occurs when a program blurs the line between what is trusted and what
    is untrusted. By combining trusted and untrusted data in the same data
    structure, it becomes easier for programmers to mistakenly trust unvalidated
    data.
  metadata:
    category: security
    cwe: 'CWE-501: Trust Boundary Violation'
  severity: WARNING
- id: "../sast-rules/scala/cors/rule-PermissiveCORS.yml"
  patterns:
  - pattern-either:
    - pattern: (HttpServletResponse $RESP).setHeader("$HEADER", "$VAL")
    - pattern: (HttpServletResponse $RESP).addHeader("$HEADER", "$VAL")
  - metavariable-regex:
      metavariable: "$HEADER"
      regex: "(?i)(Access-Control-Allow-Origin)"
  - metavariable-regex:
      metavariable: "$VAL"
      regex: "(\\*|null)"
  message: |
    Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for
    JavaScript to access the contents of a Web page, both the JavaScript and the Web page must
    originate from the same domain. Without the Same Origin Policy, a malicious website could serve
    up JavaScript that loads sensitive information from other websites using a client's
    credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible
    for JavaScript to access data across domains if a new HTTP header called
    Access-Control-Allow-Origin is defined. With this header, a Web server defines which other
    domains are allowed to access its domain using cross-origin requests. However, caution should
    be taken when defining the header because an overly permissive CORS policy will allow a
    malicious application to communicate with the victim application in an inappropriate way,
    leading to spoofing, data theft, relay and other attacks.
  languages:
  - scala
  severity: ERROR
  metadata:
    cwe: 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    category: security
    technology:
    - scala
- id: "../sast-rules/scala/cors/rule-PermissiveCORSInjection.yml"
  mode: taint
  pattern-sources:
  - pattern: "(HttpServletRequest $REQ).getParamater(...)"
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletResponse $RES).setHeader("$HEADER", ...)
      - pattern: (HttpServletResponse $RES).addHeader("$HEADER", ...)
    - metavariable-regex:
        metavariable: "$HEADER"
        regex: "(?i)(Access-Control-Allow-Origin)"
  message: |
    Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for
    JavaScript to access the contents of a Web page, both the JavaScript and the Web page must
    originate from the same domain. Without the Same Origin Policy, a malicious website could serve
    up JavaScript that loads sensitive information from other websites using a client's
    credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible
    for JavaScript to access data across domains if a new HTTP header called
    Access-Control-Allow-Origin is defined. With this header, a Web server defines which other
    domains are allowed to access its domain using cross-origin requests. However, caution should
    be taken when defining the header because an overly permissive CORS policy will allow a
    malicious application to communicate with the victim application in an inappropriate way,
    leading to spoofing, data theft, relay and other attacks.
  languages:
  - java
  severity: ERROR
  metadata:
    cwe: 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    category: security
    technology:
    - java
- id: "../sast-rules/scala/crypto/rule-BlowfishKeySize.yml"
  patterns:
  - pattern-inside: |
      $KEYGEN = javax.crypto.KeyGenerator.getInstance("Blowfish", ...);
      ...
      $KEYGEN.init($KEY_SIZE);
  - metavariable-comparison:
      metavariable: "$KEY_SIZE"
      comparison: "$KEY_SIZE < 128"
  message: |
    A small key size makes the ciphertext vulnerable to brute force attacks. At least 128 bits of
    entropy should be used when generating the key if use of Blowfish is required.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - scala
- id: "../sast-rules/scala/crypto/rule-CipherDESInsecure.yml"
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("$ALG")
  - metavariable-regex:
      metavariable: "$ALG"
      regex: "^(DES)/.*"
  message: |
    DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage
    of AES block ciphers instead of DES.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - scala
- id: "../sast-rules/scala/crypto/rule-CipherDESedeInsecure.yml"
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("$ALG")
  - metavariable-regex:
      metavariable: "$ALG"
      regex: "^(DESede)/.*"
  message: |
    Triple DES (also known as 3DES or DESede) is considered strong ciphers for modern
    applications. NIST recommends the usage of AES block ciphers instead of 3DES.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - scala
- id: "../sast-rules/scala/crypto/rule-CipherECBMode.yml"
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-regex: "(AES|DES(ede)?)(/ECB/*)"
  message: |
    An authentication cipher mode which provides better confidentiality of the encrypted data
    should be used instead of Electronic Code Book (ECB) mode, which does not provide good
    confidentiality. Specifically, ECB mode produces the same output for the same input each time.
    This allows an attacker to intercept and replay the data.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - scala
- id: "../sast-rules/scala/crypto/rule-CipherIntegrity.yml"
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-either:
    - pattern-regex: "(/CBC/PKCS5Padding)"
    - pattern-regex: "(AES|DES(ede)?)(/ECB/*)"
    - pattern-regex: "(AES|DES(ede)?)(/CBC/*)"
    - pattern-regex: "(AES|DES(ede)?)(/OFB/*)"
    - pattern-regex: "(AES|DES(ede)?)(/CTR/*)"
  - pattern-not-regex: ".*/(CCM|CWC|OCB|EAX|GCM)/.*"
  - pattern-not-regex: "^(RSA)/.*"
  - pattern-not-regex: "^(ECIES)$"
  message: |
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the
    cipher provides no way to detect that the data has been tampered with. If the ciphertext can be
    controlled by an attacker, it could be altered without detection.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-353: Missing Support for Integrity Check'
    technology:
    - scala
- id: "../sast-rules/scala/crypto/rule-CipherPaddingOracle.yml"
  patterns:
  - pattern-inside: javax.crypto.Cipher.getInstance("...")
  - pattern-regex: "(/CBC/PKCS5Padding)"
  - pattern-not-regex: "^(RSA)/.*"
  - pattern-not-regex: "^(ECIES)$"
  message: |
    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An
    adversary could potentially decrypt the message if the system exposed the difference between
    plaintext with invalid padding or valid padding. The distinction between valid and invalid
    padding is usually revealed through distinct error messages being returned for each condition.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-696: Incorrect Behavior Order'
    technology:
    - scala
- id: "../sast-rules/scala/crypto/rule-CustomMessageDigest.yml"
  patterns:
  - pattern: |
      class $CLAZZ extends java.security.MessageDigest(...) {
        ...
      }
  message: |
    Implementing a custom MessageDigest is error-prone. National Institute of Standards and
    Technology(NIST) recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or
    SHA-512/256.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    technology:
    - scala
- id: "../sast-rules/scala/crypto/rule-DefaultHTTPClient.yml"
  patterns:
  - pattern: new org.apache.http.impl.client.DefaultHttpClient(...)
  message: 'DefaultHttpClient with default constructor is not compatible with TLS
    1.2

    '
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    technology:
    - scala
- id: "../sast-rules/scala/crypto/rule-HazelcastSymmetricEncryption.yml"
  patterns:
  - pattern: new com.hazelcast.config.SymmetricEncryptionConfig()
  message: |
    The network communications for Hazelcast is configured to use a symmetric cipher (probably DES
    or Blowfish). Those ciphers alone do not provide integrity or secure authentication. The use of
    asymmetric encryption is preferred.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - scala
- id: "../sast-rules/scala/crypto/rule-InsufficientKeySizeRsa.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $GEN = KeyPairGenerator.getInstance($ALG, ...);
          ...
      - pattern-either:
        - pattern: "$VAR.initialize($SIZE, ...)"
        - pattern: new java.security.spec.RSAKeyGenParameterSpec($SIZE, ...)
      - metavariable-comparison:
          metavariable: "$SIZE"
          comparison: "$SIZE < 2048"
      - metavariable-regex:
          metavariable: "$ALG"
          regex: '"(RSA|DSA)"'
  message: |
    Detected an insufficient key size for DSA. NIST recommends a key size
    of 2048 or higher.
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
  severity: WARNING
  languages:
  - scala
- id: "../sast-rules/scala/crypto/rule-NullCipher.yml"
  pattern: new javax.crypto.NullCipher()
  message: |
    The NullCipher implements the Cipher interface by returning ciphertext identical to the
    supplied plaintext. In a few contexts, such as testing, a NullCipher may be appropriate. Avoid
    using the NullCipher. Its accidental use can introduce a significant confidentiality risk.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    technology:
    - java
- id: "../sast-rules/scala/crypto/rule-RsaNoPadding.yml"
  patterns:
  - pattern: javax.crypto.Cipher.getInstance($ALG,...);
  - metavariable-regex:
      metavariable: "$ALG"
      regex: ".*NoPadding.*"
  message: |
    The software uses the RSA algorithm but does not incorporate Optimal Asymmetric
    Encryption Padding (OAEP), which might weaken the encryption.
  metadata:
    cwe: 'CWE-780: Use of RSA Algorithm without OAEP'
  severity: WARNING
  languages:
  - scala
- id: "../sast-rules/scala/crypto/rule-WeakMessageDigest.yml"
  patterns:
  - pattern-either:
    - pattern: MessageDigest.getInstance($ALG, ...)
    - pattern: Signature.getInstance($ALG, ...)
  - metavariable-regex:
      metavariable: "$ALG"
      regex: ".*(MD5|MD4|MD2|SHA1|SHA-1).*"
  message: |
    DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage
    of AES block ciphers instead of DES.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-326: Inadequate Encryption Strength'
    technology:
    - scala
- id: "../sast-rules/scala/crypto/rule-WeakTLSProtocol.yml"
  patterns:
  - pattern-either:
    - pattern: new org.apache.http.impl.client.DefaultHttpClient();
    - pattern: javax.net.ssl.SSLContext.getInstance("SSL");
  message: |
    A HostnameVerifier that accept any host are often use because of certificate
    reuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middleattacks
    attacks since the client will trust any certificate.
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
  severity: WARNING
  languages:
  - scala
- id: "../sast-rules/scala/endpoint/rule-InsecureServlet.yml"
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: "($REQ: HttpServletRequest).getContentType"
    - pattern: "($REQ: HttpServletRequest).getServerName"
    - pattern: "($REQ: HttpServletRequest).getRequestedSessionId"
    - pattern: "($REQ: HttpServletRequest).getParameterValues(...)"
    - pattern: "($REQ: HttpServletRequest).getParameterMap"
    - pattern: "($REQ: HttpServletRequest).getParameterNames"
    - pattern: "($REQ: HttpServletRequest).getParameter(...)"
  pattern-sinks:
  - pattern-either:
    - pattern: "... + $PAR + ..."
    - pattern: "$PAR + ..."
    - pattern: "... + $PAR"
    - pattern: "$PAR"
  languages:
  - scala
  message: |
    The Servlet can read GET and POST parameters from various methods. The
    value obtained should be considered unsafe."
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
  severity: WARNING
- id: "../sast-rules/scala/endpoint/rule-JaxRsEndpoint.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @javax.ws.rs.Path("...")
        def $FUNC(..., $VAR: String, ...) = {
          ...
        }
    - pattern: "$VAR"
  pattern-sanitizers:
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: return ...
  message: |
    This method is part of a REST Web Service (JSR311). The security of this web service should be
    analyzed; Authentication, if enforced, should be tested. Access control, if enforced, should be
    tested. The inputs should be tracked for potential vulnerabilities. The communication should
    ideally be over SSL.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
    technology:
    - scala
- id: "../sast-rules/scala/endpoint/rule-JaxWsEndpoint.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @javax.jws.WebMethod(...)
        def $FUNC(..., $VAR: $TYPE, ...) = {
          ...
        }
    - pattern: "$VAR"
  pattern-sanitizers:
  - pattern: org.apache.commons.text.StringEscapeUtils.unescapeJava(...);
  pattern-sinks:
  - pattern: return ...;
  message: |
    This method is part of a SOAP Web Service (JSR224). The security of this web service should be
    analyzed; Authentication, if enforced, should be tested. Access control, if enforced, should be
    tested. The inputs should be tracked for potential vulnerabilities. The communication should
    ideally be over SSL.
  languages:
  - scala
  severity: INFO
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
    owasp: 'OWASP: Cross-Site Request Forgery'
    technology:
    - scala
- id: "../sast-rules/scala/endpoint/rule-UnencryptedSocket.yml"
  patterns:
  - pattern: new java.net.Socket(...)
  languages:
  - scala
  message: |
    Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory
    does all the appropriate certificate validation checks to make sure you are not
    subject to man-in-the-middle attacks. Please read the OWASP Transport Layer
    Protection Cheat Sheet for details on how to do this correctly.
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
  severity: WARNING
- id: "../sast-rules/scala/endpoint/rule-UnvalidatedRedirect.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "($REQ: HttpServletResponse).sendRedirect(...)"
      - pattern-not: '($REQ: HttpServletResponse).sendRedirect("...")'
    - patterns:
      - pattern: "($REQ: HttpServletResponse).addHeader(...)"
      - pattern-not: '($REQ: HttpServletResponse).addHeader("...", "...")'
    - patterns:
      - pattern: "($REQ: HttpServletResponse).encodeURL(...)"
      - pattern-not: '($REQ: HttpServletResponse).encodeURL("...")'
    - patterns:
      - pattern: "($REQ: HttpServletResponse).encodeRedirectUrl(...)"
      - pattern-not: '($REQ: HttpServletResponse).encodeRedirectUrl("...")'
  languages:
  - scala
  message: |
    Unvalidated redirects occur when an application redirects a user to a
    destination URL specified by a user supplied parameter that is not validated.
    Such vulnerabilities can be used to facilitate phishing attacks.
  metadata:
    category: security
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
  severity: ERROR
- id: "../sast-rules/scala/endpoint/rule-WeakHostNameVerification.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          class $V extends HostnameVerifier {
            ...
          }
      - pattern: def verify(...) = true
      - pattern: |
          def verify(...) = {
            return true
          }
    - patterns:
      - pattern-inside: |
          class $V extends X509TrustManager {
            ...
          }
      - pattern-either:
        - pattern: 'def checkClientTrusted(...): Unit = {}'
        - pattern: 'def checkServerTrusted(...): Unit = {}'
        - pattern: def checkClientTrusted(...) = {}
        - pattern: def checkServerTrusted(...) = {}
        - pattern: 'def getAcceptedIssuers(): Array[X509Certificate] = null'
        - pattern: 'def getAcceptedIssuers(): Array[X509Certificate] = {}'
  languages:
  - scala
  message: |
    A HostnameVerifier that accept any host are often use because of certificate
    reuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middle
    attacks since the client will trust any certificate.
  metadata:
    category: security
    cwe: 'CWE-295: Improper Certificate Validation'
  severity: WARNING
- id: "../sast-rules/scala/file/rule-FileUploadFileName.yml"
  patterns:
  - pattern: |
      def $FUNC (..., $REQ: HttpServletRequest, ... ) = {
        ...
        val $FILES = ($SFU: ServletFileUpload).parseRequest($REQ)
        ...
        for ($FILE <- $FILES.asScala) {
          ...
        }
      }
  - pattern: "$ITEM.getName()"
  message: |
    The filename provided by the FileUpload API can be tampered with by the client to reference
    unauthorized files. The provided filename should be properly validated to ensure it's properly
    structured, contains no unauthorized path characters (e.g., / \), and refers to an authorized
    file.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - scala
- id: "../sast-rules/scala/file/rule-FilenameUtils.yml"
  patterns:
  - pattern-inside: |
      import org.apache.commons.io.FilenameUtils;
      ...
  - pattern-either:
    - pattern: normalize(...)
    - pattern: getExtension(...)
    - pattern: isExtensions(...)
    - pattern: getName(...)
    - pattern: getBaseName(...)
    - pattern: org.apache.commons.io.FilenameUtils.normalize(...)
    - pattern: org.apache.commons.io.FilenameUtils.getExtension(...)
    - pattern: org.apache.commons.io.FilenameUtils.isExtensions(...)
    - pattern: org.apache.commons.io.FilenameUtils.getName(...)
    - pattern: org.apache.commons.io.FilenameUtils.getBaseName(...)
  message: |
    A file is opened to read its content. The filename comes from an input
    parameter. If an unfiltered parameter is passed to this file API, files from an
    arbitrary filesystem location could be read.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - scala
- id: "../sast-rules/scala/form/rule-FormValidate.yml"
  patterns:
  - pattern-inside: |
      class $CLASS extends $SC {
        ...
      }
  - metavariable-regex:
      metavariable: "$SC"
      regex: "(ActionForm|ValidatorForm)"
  - pattern-not: public void validate() { ... }
  languages:
  - scala
  message: |
    Form inputs should have minimal input validation. Preventive validation helps provide defense
    in depth against a variety of risks.
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
  severity: WARNING
- id: "../sast-rules/scala/inject/rule-AWSQueryInjection.yml"
  patterns:
  - pattern-either:
    - pattern-inside: "def $FUNC(..., $VAR: HttpServletRequest, ...): $TYPE = { \n
        \ ... \n}\n"
    - pattern-inside: |
        def $FUNC(...): $TYPE = {
          ...
          $VAR = ... + $X;
          ...
        }
  - pattern-either:
    - pattern-inside: |
        $REQ = new SelectRequest($QUERY, ...);
        ...
        $DB.select($REQ);
    - pattern-inside: "$DB.select(new SelectRequest($QUERY,...));\n"
    - pattern-inside: "$DB.select(($SR: SelectRequest ).withSelectExpression($QUERY,...));\n"
  - pattern: "$QUERY"
  - metavariable-pattern:
      metavariable: "$DB"
      pattern-either:
      - pattern: "($DB: AmazonSimpleDB)"
      - pattern: "($DB: AmazonSimpleDBClient)"
  message: |
    Constructing SimpleDB queries containing user input can allow an attacker to view unauthorized
    records.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-BeanPropertyInjection.yml"
  patterns:
  - pattern-inside: 'def $FUNC(..., $REQ: HttpServletRequest, ...): $TYPE = { ...
      }'
  - pattern-either:
    - pattern: |
        $MAP.put(..., $REQ.getParameter(...))
        ...
        $BEAN_UTIL.populate(..., $MAP)
    - pattern: |
        while (...) {
            ...
            $MAP.put(..., $REQ.getParameterValues(...). ...)
        }
        ...
        $BEAN_UTIL.populate(..., $MAP)
  - metavariable-pattern:
      metavariable: "$BEAN_UTIL"
      pattern-either:
      - pattern: "(BeanUtilsBean $B)"
      - pattern: new BeanUtilsBean()
      - pattern: org.apache.commons.beanutils.BeanUtils
  message: |
    An attacker can set arbitrary bean properties that can compromise system integrity. An
    attacker can leverage this functionality to access special bean properties like
    class.classLoader that will allow them to override system properties and potentially execute
    arbitrary code.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-15: External Control of System or Configuration Setting'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-CLRFInjectionLogs.yml"
  patterns:
  - pattern-inside: |
      def $FUNC(..., $REQ: HttpServletRequest, ...) : $TYPE = {
        ...
      }
  - pattern-either:
    - pattern: |
        val $TAINTED = $REQ.getParameter(...)
        ...
        $LOGGER.$METHOD(...,$TAINTED,...)
    - pattern: |
        val $TAINTED = $REQ.getParameter(...)
        ...
        $VAR = String.Format(..., $TAINTED,...)
        ...
        $LOGGER.$METHOD(...,$VAR,...)
    - pattern: |
        val $TAINTED = $REQ.getParameter(...)
        ...
        $LOGGER.$METHOD(...,String.Format(..., $TAINTED,...),...)
    - pattern: |
        val $TAINTED = $REQ.getParameter(...)
        ...
        $VAR = ... + $TAINTED + ...
        ...
        $LOGGER.$METHOD(...,$VAR,...)
    - pattern: |
        val $TAINTED = $REQ.getParameter(...)
        ...
        $LOGGER.$METHOD(...,... + $TAINTED + ...,...)
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(log|logp|logrb|entering|exiting|fine|finer|finest|info|debug|trace|warn|warning|config|error|severe)"
  - metavariable-pattern:
      metavariable: "$LOGGER"
      pattern-either:
      - pattern: Logger
      - pattern: log
      - pattern: logger
      - pattern: org.pmw.tinylog.Logger
      - pattern: org.apache.log4j.Logger
      - pattern: org.apache.logging.log4j.Logger
      - pattern: org.slf4j.Logger
      - pattern: org.apache.commons.logging.Log
      - pattern: java.util.logging.Logger
  message: |
    When data from an untrusted source is put into a logger and not neutralized correctly, an
    attacker could forge log entries or include malicious content. Inserted false entries could be
    used to skew statistics, distract the administrator or even to implicate another party in the
    commission of a malicious act. If the log file is processed automatically, the attacker can
    render the file unusable by corrupting the format of the file or injecting unexpected
    characters. An attacker may also inject code or other commands into the log file and take
    advantage of a vulnerability in the log processing utility (e.g. command injection or XSS).
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-93: Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-CommandInjection.yml"
  pattern-either:
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $PARAM: String, ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        val $RT = Runtime.getRuntime
        ...
    - pattern-either:
      - pattern: "$RT.exec($PARAM)"
      - pattern: |
          var $CMDARR = new Array[String]("$SHELL",...,$PARAM,...)
          ...
          $RT.exec($CMDARR,...)
      - pattern: $RT.exec(Array[String]("$SHELL",...,$PARAM,...), ...)
      - pattern: $RT.exec(java.util.String.format("...", ...,$PARAM,...))
      - pattern: "$RT.exec(($A: String) + ($B: String))"
    - metavariable-regex:
        metavariable: "$SHELL"
        regex: "(/.../)?(sh|bash|ksh|csh|tcsh|zsh)$"
    - pattern-not: $RT.exec("...","...","...",...)
    - pattern-not: $RT.exec(new Array[String]("...","...","...",...),...)
  - patterns:
    - pattern-inside: |
        def $FUNC(...,$PARAM: String, ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        val $PB = new ProcessBuilder()
        ...
    - pattern-either:
      - pattern: "$PB.command($PARAM,...)"
      - patterns:
        - pattern-either:
          - pattern: $PB.command("$SHELL",...,$PARAM,...)
          - pattern: |
              var $CMDARR = java.util.Arrays.asList("$SHELL",...,$PARAM,...)
              ...
              $PB.command($CMDARR,...)
          - pattern: $PB.command(java.util.Arrays.asList("$SHELL",...,$PARAM,...),...)
          - pattern: $PB.command(java.util.String.format("...", ...,$PARAM,...))
          - pattern: "$PB.command(($A: String) + ($B: String))"
        - metavariable-regex:
            metavariable: "$SHELL"
            regex: "(/.../)?(sh|bash|ksh|csh|tcsh|zsh)$"
    - pattern-not: $PB.command("...","...","...",...)
    - pattern-not: '$PB.command(java.util.Arrays.asList("...","...","...",...))

        '
  message: |
    The highlighted API is used to execute a system command. If unfiltered input is passed to this
    API, it can lead to arbitrary command execution.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-CustomInjection.yml"
  patterns:
  - pattern-either:
    - pattern-inside: |
        val $ST = connection.createStatement
        ...
  - pattern-either:
    - pattern: |
        val $QUERY = ... + $VAR + ...
        ...
        $ST.executeQuery($QUERY)
    - pattern: |
        val $QUERY = ... + $VAR
        ...
        $ST.executeQuery($QUERY)
    - pattern: |
        val $QUERY = String.format("...",...,$VAR,...)
        ...
        $ST.executeQuery($QUERY)
    - pattern: "$ST.executeQuery(($SB: StringBuilder).toString())"
    - pattern: "$ST.executeQuery(... + $VAR + ...)"
    - pattern: "$ST.executeQuery(... + $VAR)"
    - pattern: $ST.executeQuery(...,String.format("...",...,$VAR,...), ...)
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-CustomInjectionSQLString.yml"
  patterns:
  - pattern-inside: |
      def $FOO(..., $SQLIN: String, ...): $TYPE = {
        ...
      }
  - pattern-either:
    - pattern: '"$SQL_STR" + $SQLIN

        '
    - pattern: String.format("$SQL_STR", ... + $SQLIN + ...)
    - pattern: '"$SQL_STR".concat(...)

        '
    - pattern: (StringBuilder $BUILDER). ... .append("$SQL_STR")
    - patterns:
      - pattern-inside: |
          StringBuilder $BUILDER = new StringBuilder(... + "$SQL_STR" + ...);
          ...
      - pattern: "$BUILDER.append(...)"
      - pattern-not: $BUILDER.append("...")
    - patterns:
      - pattern-inside: |
          $QUERY = "$SQL_STR";
          ...
      - pattern: "$QUERY += ..."
  - metavariable-regex:
      metavariable: "$SQL_STR"
      regex: "(?i)(select|insert|create|update|alter|delete|drop)\\b"
  message: |
    The method identified is susceptible to injection. The input should be validated and properly
    escaped.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-ELInjection.yml"
  patterns:
  - pattern-inside: |
      import javax.el._
      ...
  - pattern-either:
    - pattern-inside: |
        def $FUNC(..., $EXPR: String, ...) : $TYPE = {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $EXPR: String, ...) = {
          ...
        }
  - pattern-either:
    - pattern: "$X.createValueExpression(..., $EXPR, ...)"
    - pattern: "$X.createMethodExpression(..., $EXPR, ...)"
  message: |
    An expression is built with a dynamic value. The source of the value(s) should be verified to
    avoid that unfiltered values fall into this risky code evaluation.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-FileDisclosure.yml"
  mode: taint
  pattern-sources:
  - pattern: "($VAR: javax.servlet.http.HttpServletRequest).getParameter(...)"
  pattern-sinks:
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST, $SND)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.springframework.web.servlet.ModelAndView($FST, $SND, $TRD)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND)
    - pattern: "$FST"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND, $TRD)
    - pattern: "$SND"
  - patterns:
    - pattern: new org.apache.struts.action.ActionForward($FST, $SND, $TRD)
    - pattern: "$TRD"
  - patterns:
    - pattern-inside: |
        $ACTION = new org.apache.struts.action.ActionForward()
        ...
    - pattern: "$ACTION.setPath(...)"
  - patterns:
    - pattern-inside: |
        $MVC = new org.springframework.web.servlet.ModelAndView()
        ...
    - pattern: "$MVC.setViewName(...);"
  - patterns:
    - pattern-inside: |
        $REQ = $HTTP.getRequestDispatcher(...)
        ...
    - pattern-either:
      - pattern: "$REQ.include($FST, $SND)"
      - pattern: "$REQ.forward($FST, $SND)"
  languages:
  - scala
  message: |
    Constructing a server-side redirect path with user input could allow an
    attacker to download application binaries (including application classes or
    jar files) or view arbitrary files within protected directories.
  metadata:
    category: security
    cwe: 'CWE-552: Files or Directories Accessible to External Parties'
  severity: ERROR
- id: "../sast-rules/scala/inject/rule-HttpParameterPollution.yml"
  mode: taint
  pattern-sources:
  - pattern: "($REQ: HttpServletRequest ).getParameter(...)"
  pattern-sanitizers:
  - pattern: java.net.URLEncoder.encode(...)
  - pattern: com.google.common.net.UrlEscapers.urlPathSegmentEscaper().escape(...)
  pattern-sinks:
  - pattern: new org.apache.http.client.methods.HttpGet(...)
  - pattern: new org.apache.commons.httpclient.methods.GetMethod(...)
  - pattern: "($GM: org.apache.commons.httpclient.methods.GetMethod).setQueryString(...)"
  message: |
    Concatenating unvalidated user input into a URL can allow an attacker to override the value of
    a request parameter. Attacker may be able to override existing parameter values, inject a new
    parameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks
    consist of injecting encoded query string delimiters into other existing parameters. If a web
    application does not properly sanitize the user input, a malicious user may compromise the
    logic of the application to perform either client-side or server-side attacks.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-88: Improper Neutralization of Argument Delimiters in a Command (''Argument
      Injection'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-LDAPInjection.yml"
  patterns:
  - pattern-either:
    - pattern-inside: |
        def $FUNC(..., $VAR: String, ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $X: String, ...): $TYPE = {
          ...
          $VAR = ... + $X;
          ...
        }
  - pattern-either:
    - pattern: "($P: java.util.Properties).put($KEY, $VAR)"
    - pattern: "$CTX.lookup(..., $VAR, ...)"
    - pattern: "$CTX.search(..., $VAR, ...)"
    - pattern: "$CTX.list(..., $VAR, ...)"
  - metavariable-pattern:
      metavariable: "$CTX"
      pattern-either:
      - pattern: "($CTX: javax.naming.directory.DirContext)"
      - pattern: "($CTX: javax.naming.directory.Context)"
      - pattern: "($CTX: javax.naming.Context)"
      - pattern: "($CTX: javax.naming.directory.InitialDirContext)"
      - pattern: "($CTX: javax.naming.ldap.LdapContext)"
      - pattern: "($CTX: com.unboundid.ldap.sdk.LDAPConnection)"
      - pattern: "($CTX: javax.naming.event.EventDirContext)"
      - pattern: "($CTX: com.sun.jndi.ldap.LdapCtx)"
      - pattern: "($CTX: org.springframework.ldap.core.LdapTemplate)"
      - pattern: "($CTX: org.springframework.ldap.core.LdapOperations)"
  message: |
    Just like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately,
    LDAP doesn't have prepared statement interfaces like SQL. Therefore, the primary defense
    against LDAP injection is strong input validation of any untrusted data before including it in
    an LDAP query.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query
      (''LDAP Injection'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-OgnlInjection.yml"
  patterns:
  - pattern-either:
    - pattern-inside: |
        def $FUNC(..., $VAR: String, ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $VAR: Map[String, ?], ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $VAR: Map[String, String], ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $VAR: Map[String, Object], ...): $TYPE = {
          ...
        }
    - pattern: com.opensymphony.xwork2.util.TextParseUtil.translateVariables($VAR,
        ...)
    - pattern: com.opensymphony.xwork2.util.TextParseUtil.translateVariablesCollection($VAL,
        ...)
    - pattern: com.opensymphony.xwork2.util.TextParseUtil.shallBeIncluded(...)
    - pattern: com.opensymphony.xwork2.util.TextParseUtil.commaDelimitedStringToSet(...)
    - pattern: "(com.opensymphony.xwork2.util.TextParser $P).evaluate($VAR, $VAL,
        ...)"
    - pattern: "(com.opensymphony.xwork2.util.OgnlTextParser $P).evaluate($VAR, $VAL,
        ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getGetMethod($CLZ,
        ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getSetMethod($CLZ,
        ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getField($CLZ,
        ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setProperties($MAP,
        ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setProperty($VAL,
        ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).getValue($VAL,
        ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlReflectionProvider $P).setValue($VAL,
        ...)"
    - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getGetMethod($CLZ,
        ...)"
    - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getSetMethod($CLZ,
        ...)"
    - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getField($CLZ,
        ...)"
    - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).setProperties($MAP,
        ...)"
    - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).setProperty($VAR,
        ...)"
    - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).getValue($VAR,
        ...)"
    - pattern: "(com.opensymphony.xwork2.util.reflection.ReflectionProvider $P).setValue($VAR,
        ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).setProperties($MAP, ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).setProperty($VAR, ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).getValue($VAR, ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).setValue($VAR, ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).callMethod($VAR, ...)"
    - pattern: "(com.opensymphony.xwork2.ognl.OgnlUtil $P).compile($VAR, ...)"
    - pattern: "(org.apache.struts2.util.VelocityStrutsUtil $P).evaluate(...)"
    - pattern: org.apache.struts2.util.StrutsUtil.findString(...)
    - pattern: org.apache.struts2.util.StrutsUtil.findValue(..., $VAL)
    - pattern: org.apache.struts2.util.StrutsUtil.getText(...)
    - pattern: org.apache.struts2.util.StrutsUtil.translateVariables(...)
    - pattern: org.apache.struts2.util.StrutsUtil.makeSelectList($VAR, ...)
    - pattern: "(org.apache.struts2.views.jsp.ui.OgnlTool $T).findValue($VAR, ...)"
    - pattern: "(com.opensymphony.xwork2.util.ValueStack $V).findString(...)"
    - pattern: "(com.opensymphony.xwork2.util.ValueStack $V).findValue($VAR, ...)"
    - pattern: "(com.opensymphony.xwork2.util.ValueStack $V).setValue($VAR, ...)"
    - pattern: "(com.opensymphony.xwork2.util.ValueStack $V).setParameter($VAR, ...)"
  message: |
    "A expression is built with a dynamic value. The source of the value(s) should be verified to
    avoid that unfiltered values fall into this risky code evaluation."
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-PathTraversalIn.yml"
  patterns:
  - pattern-either:
    - pattern-inside: |
        def $FUNC(...,$VAR: String, ...): $TYPE = {
          ...
        }
    - pattern-inside: |
        def $FUNC(...,$VAR: String, ...): $TYPE = {
          ...
        }
  - pattern-not-inside: |
      ...
      org.apache.commons.io.FilenameUtils.getName($VAR)
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $U = new java.net.URI($VAR)
          ...
      - pattern-either:
        - pattern: java.io.File($U)
        - pattern: java.nio.file.Paths.get($U)
    - pattern: java.io.RandomAccessFile(..., $VAR,...)
    - pattern: java.io.FileReader(..., $VAR, ...)
    - pattern: javax.activation.FileDataSource(..., $VAR, ...)
    - pattern: java.io.FileInputStream(..., $VAR, ...)
    - pattern: java.io.File(...,$VAR, ...)
    - pattern: java.nio.file.Paths.get(...,$VAR,...)
    - pattern: java.io.File.createTempFile(...,$VAR, ...)
    - pattern: java.io.File.createTempDirectory(...,$VAR,...)
    - pattern: java.nio.file.Files.createTempFile(..., $VAR, ...)
    - pattern: java.nio.file.Files.createTempDirectory(..., $VAR, ...)
  message: |
    A file is opened to read its content. The filename comes from an input parameter. If an
    unfiltered parameter is passed to this file API, files from an arbitrary filesystem location
    could be read. This rule identifies potential path traversal vulnerabilities. In many cases,
    the constructed file path cannot be controlled by the user.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-PathTraversalOut.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $ARGS: Array[String], ...): $TYPE = {
          ...
        }
    - pattern: "$ARGS[$IDX]"
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $VAR: String, ...): $TYPE = {
          ...
        }
    - pattern: "$VAR"
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: "$PATH"
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: "$PATH"
  message: |
    A file is opened to write to its contents. The filename comes from an input parameter. If an
    unfiltered parameter is passed to this file API, files at an arbitrary filesystem location
    could be modified. This rule identifies potential path traversal vulnerabilities. In many
    cases, the constructed file path cannot be controlled by the user.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-SpotbugsPathTraversalAbsolute.yml"
  mode: taint
  pattern-sources:
  - pattern: "($REQ: HttpServletRequest ).getParameter(...)"
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: "$U = new java.net.URI($VAR)\n"
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: "$INPUT"
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - pattern: new java.io.File(...)
  - pattern: java.nio.file.Paths.get(...)
  - pattern: java.io.File.createTempFile(...)
  - pattern: java.io.File.createTempDirectory(...)
  - pattern: java.nio.file.Files.createTempFile(...)
  - pattern: java.nio.file.Files.createTempDirectory(...)
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: "$PATH"
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: "$PATH"
  message: |
    "The software uses an HTTP request parameter to construct a pathname that should be within a
    restricted directory, but it does not properly neutralize absolute path sequences such as
    "/abs/path" that can resolve to a location that is outside of that directory. See
    http://cwe.mitre.org/data/definitions/36.html for more information."
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-SpotbugsPathTraversalRelative.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $P = ($REQ: HttpServletRequest ).getParameter(...);
        ...
    - pattern-either:
      - pattern: "$P + ..."
      - pattern: "... + $P"
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-inside: "$U = new java.net.URI($VAR)\n"
    - pattern-either:
      - pattern-inside: new java.io.File($U)
      - pattern-inside: java.nio.file.Paths.get($U)
    - pattern: "$VAR"
  - patterns:
    - pattern-inside: new java.io.RandomAccessFile($INPUT,...)
    - pattern: "$INPUT"
  - pattern: new java.io.FileReader(...)
  - pattern: new javax.activation.FileDataSource(...)
  - pattern: new java.io.FileInputStream(...)
  - pattern: new java.io.File(...)
  - pattern: java.nio.file.Paths.get(...)
  - pattern: java.io.File.createTempFile(...)
  - pattern: java.io.File.createTempDirectory(...)
  - pattern: java.nio.file.Files.createTempFile(...)
  - pattern: java.nio.file.Files.createTempDirectory(...)
  - patterns:
    - pattern-inside: new java.io.FileWriter($PATH, ...)
    - pattern: "$PATH"
  - patterns:
    - pattern-inside: new java.io.FileOutputStream($PATH, ...)
    - pattern: "$PATH"
  message: |
    "The software uses an HTTP request parameter to construct a pathname that should be within a
    restricted directory, but it does not properly neutralize sequences such as ".." that can
    resolve to a location that is outside of that directory. See
    http://cwe.mitre.org/data/definitions/23.html for more information."
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    technology:
    - scala
- id: "../sast-rules/scala/inject/rule-SqlInjection.yml"
  patterns:
  - pattern-not-inside: |
      val $ARG = "..."
      ...
  - pattern-not-inside: |
      class $CLAZZ {
        ...
        val $ARG = "..."
        ...
      }
  - pattern-either:
    - patterns:
      - pattern: "($PM: javax.jdo.PersistenceManager).newQuery($ARG)"
      - pattern-not: '($PM: javax.jdo.PersistenceManager).newQuery("...")'
    - patterns:
      - pattern: "($PM: javax.jdo.PersistenceManager).newQuery(..., $ARG)"
      - pattern-not: '($PM: javax.jdo.PersistenceManager).newQuery(..., "...")'
    - patterns:
      - pattern: "($Q: javax.jdo.Query).setFilter($ARG)"
      - pattern-not: '($Q: javax.jdo.Query).setFilter("...")'
    - patterns:
      - pattern: "($Q: javax.jdo.Query).setGrouping($ARG)"
      - pattern-not: '($Q: javax.jdo.Query).setGrouping("...")'
    - patterns:
      - pattern: "($Q: javax.jdo.Query).setGrouping($ARG)"
      - pattern-not: '($Q: javax.jdo.Query).setGrouping("...")'
    - patterns:
      - pattern: "($H: org.hibernate.criterion.Restrictions).sqlRestriction($ARG,
          ...)"
      - pattern-not: '($H: org.hibernate.criterion.Restrictions).sqlRestriction("...",
          ...)'
    - patterns:
      - pattern: "($S: org.hibernate.Session).createQuery((String $ARG), ...)"
      - pattern-not: '($S: org.hibernate.Session).createQuery("...", ...)'
    - patterns:
      - pattern: "($S: org.hibernate.Session).createSQLQuery($ARG, ...)"
      - pattern-not: '($S: org.hibernate.Session).createSQLQuery("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Statement).executeQuery($ARG, ...)"
      - pattern-not: '($S: java.sql.Statement).createSQLQuery("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Statement).execute($ARG, ...)"
      - pattern-not: '($S: java.sql.Statement).execute("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Statement).executeUpdate($ARG, ...)"
      - pattern-not: '($S: java.sql.Statement).executeUpdate("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Statement).executeLargeUpdate($ARG, ...)"
      - pattern-not: '($S: java.sql.Statement).executeLargeUpdate("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Statement).addBatch($ARG, ...)"
      - pattern-not: '($S: java.sql.Statement).addBatch("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.PreparedStatement).executeQuery($ARG, ...)"
      - pattern-not: '($S: java.sql.PreparedStatement).executeQuery("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.PreparedStatement).execute($ARG, ...)"
      - pattern-not: '($S: java.sql.PreparedStatement).execute("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.PreparedStatement).executeUpdate($ARG, ...)"
      - pattern-not: '($S: java.sql.PreparedStatement).executeUpdate("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.PreparedStatement).executeLargeUpdate($ARG, ...)"
      - pattern-not: '($S: java.sql.PreparedStatement).executeLargeUpdate("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.PreparedStatement).addBatch($ARG, ...)"
      - pattern-not: '($S: java.sql.PreparedStatement).addBatch("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Connection).prepareCall($ARG, ...)"
      - pattern-not: '($S: java.sql.Connection).prepareCall("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Connection).prepareStatement($ARG, ...)"
      - pattern-not: '($S: java.sql.Connection).prepareStatement("...", ...)'
    - patterns:
      - pattern: "($S: java.sql.Connection).nativeSQL($ARG, ...)"
      - pattern-not: '($S: java.sql.Connection).nativeSQL("...", ...)'
    - patterns:
      - pattern: new org.springframework.jdbc.core.PreparedStatementCreatorFactory($ARG,
          ...)
      - pattern-not: new org.springframework.jdbc.core.PreparedStatementCreatorFactory("...",
          ...)
    - patterns:
      - pattern: "(org.springframework.jdbc.core.PreparedStatementCreatorFactory $F).newPreparedStatementCreator($ARG,
          ...)"
      - pattern-not: (org.springframework.jdbc.core.PreparedStatementCreatorFactory
          $F).newPreparedStatementCreator("...", ...)
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).batchUpdate($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).batchUpdate("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).execute($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).execute("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).query($ARG, ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).query("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForList($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForList("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForMap($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForMap("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForObject($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForObject("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForObject($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForObject("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForRowSet($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForRowSet("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForInt($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForInt("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).queryForLong($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).queryForLong("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcOperations).udpate($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcOperations).udpate("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).batchUpdate($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).batchUpdate("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).execute($ARG, ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).execute("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).query($ARG, ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).query("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForList($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForList("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForMap($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForMap("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForObject($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForObject("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForRowSet($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForRowSet("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForInt($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForInt("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).queryForLong($ARG,
          ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).queryForLong("...",
          ...)'
    - patterns:
      - pattern: "($O: org.springframework.jdbc.core.JdbcTemplate).update($ARG, ...)"
      - pattern-not: '($O: org.springframework.jdbc.core.JdbcTemplate).update("...",
          ...)'
    - patterns:
      - pattern: "($O: io.vertx.sqlclient.SqlClient).query($ARG, ...)"
      - pattern-not: '($O: io.vertx.sqlclient.SqlClient).query("...", ...)'
    - patterns:
      - pattern: "($O: io.vertx.sqlclient.SqlClient).preparedQuery($ARG, ...)"
      - pattern-not: '($O: io.vertx.sqlclient.SqlClient).preparedQuery("...", ...)'
    - patterns:
      - pattern: "($O: io.vertx.sqlclient.SqlConnection).prepare($ARG, ...)"
      - pattern-not: '($O: io.vertx.sqlclient.SqlConnection).prepare("...", ...)'
    - patterns:
      - pattern: "($O: org.apache.turbine.om.peer.BasePeer).executeQuery($ARG, ...)"
      - pattern-not: '($O: org.apache.turbine.om.peer.BasePeer).executeQuery("...",
          ...)'
    - patterns:
      - pattern: "($O: org.apache.torque.util.BasePeer).executeQuery($ARG, ...)"
      - pattern-not: '($O: org.apache.torque.util.BasePeer).executeQuery("...", ...)'
    - patterns:
      - pattern: "($O: javax.persistence.EntityManager).createQuery($ARG, ...)"
      - pattern-not: '($O: javax.persistence.EntityManager).createQuery("...", ...)'
    - patterns:
      - pattern: "($O: javax.persistence.EntityManager).createNativeQuery($ARG, ...)"
      - pattern-not: '($O: javax.persistence.EntityManager).createNativeQuery("...",
          ...)'
  languages:
  - scala
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: security
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
  severity: ERROR
- id: "../sast-rules/scala/ldap/rule-AnonymousLDAP.yml"
  patterns:
  - pattern-inside: |
      import javax.naming.Context;
      ...
  - pattern: $ENV.put(Context.SECURITY_AUTHENTICATION, "none");
  languages:
  - scala
  message: |
    Without proper access control, executing an LDAP statement that contains a
    user-controlled value can allow an attacker to abuse poorly configured LDAP
    context
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
  severity: WARNING
- id: "../sast-rules/scala/ldap/rule-EntryPoisoning.yml"
  patterns:
  - pattern: new javax.naming.directory.SearchControls($SCOPE, $CLIMIT, $TLIMIT, $ATTR,
      true, $DEREF)
  languages:
  - scala
  message: |
    Without proper access control, executing an LDAP statement that contains a
    user-controlled value can allow an attacker to abuse poorly configured LDAP
    context
  metadata:
    category: security
    cwe: 'CWE-20: Improper Input Validation'
  severity: ERROR
- id: "../sast-rules/scala/password/rule-ConstantDBPassword.yml"
  patterns:
  - pattern: java.sql.DriverManager.getConnection($URI, $USR, "...");
  message: |
    This code creates a database connect using a hardcoded, constant password. Anyone with access
    to either the source code or the compiled code can easily learn the password.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-259: Use of Hard-coded Password'
    technology:
    - scala
- id: "../sast-rules/scala/password/rule-EmptyDBPassword.yml"
  patterns:
  - pattern: java.sql.DriverManager.getConnection($URI, $USR, "");
  message: |
    This code creates a database connect using a blank or empty password. This indicates that the
    database is not protected by a password.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-259: Use of Hard-coded Password'
    technology:
    - scala
- id: "../sast-rules/scala/password/rule-HardcodeKey.yml"
  pattern-either:
  - patterns:
    - pattern-not-inside: |
        def $FUNC(...,$KEY_BYTES: Array[Byte], ...): $TYPE = {
            ...
        }
    - pattern-inside: |
        $KEY = Array[Byte](...)
        ...
    - pattern-either:
      - pattern: new DESKeySpec($KEY)
      - pattern: new DESedeKeySpec($KEY)
      - pattern: new KerberosKey(..., $KEY,...)
      - pattern: new SecretKeySpec($KEY, ...)
      - pattern: new X509EncodedKeySpec($KEY)
      - pattern: new PKCS8EncodedKeySpec($KEY)
      - pattern: new KeyRep(..., $KEY)
      - pattern: new KerberosTicket(...,$KEY,...)
  - patterns:
    - pattern-inside: |
        $KEY = ... .getBytes(...)
        ...
    - pattern-either:
      - pattern: new DESKeySpec($KEY)
      - pattern: new DESedeKeySpec($KEY)
      - pattern: new KerberosKey(..., $KEY,...)
      - pattern: new SecretKeySpec($KEY, ...)
      - pattern: new X509EncodedKeySpec($KEY)
      - pattern: new PKCS8EncodedKeySpec($KEY)
      - pattern: new KeyRep(..., $KEY)
      - pattern: new KerberosTicket(...,$KEY,...)
  - patterns:
    - pattern-not-inside: |
        def $FUNC(..., $PRIVATE_KEY: BigInteger, ...): $TYPE = {
            ...
        }
    - pattern-either:
      - pattern: 'new DSAPrivateKeySpec($PRIVATE_KEY: BigInteger, ...)'
      - pattern: 'new DSAPublicKeySpec($PRIVATE_KEY: BigInteger, ...)'
      - pattern: 'new DHPrivateKeySpec($PRIVATE_KEY: BigInteger, ...)'
      - pattern: 'new DHPublicKeySpec($PRIVATE_KEY: BigInteger, ...)'
      - pattern: 'new ECPrivateKeySpec($PRIVATE_KEY: BigInteger, ...)'
      - pattern: 'new RSAPrivateKeySpec($PRIVATE_KEY: BigInteger, ...)'
      - pattern: 'new RSAMultiPrimePrivateCrtKeySpec($PRIVATE_KEY: BigInteger, ...)'
      - pattern: 'new RSAPrivateCrtKeySpec($PRIVATE_KEY: BigInteger, ...)'
      - pattern: 'new RSAPublicKeySpec($PRIVATE_KEY: BigInteger, ...)'
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - scala
- id: "../sast-rules/scala/password/rule-HardcodeKeyEquals.yml"
  patterns:
  - pattern-not-inside: |
      def $FUNC(..., $VAR_NAME: String, ...): $TYPE = {
          ...
      }
  - pattern-either:
    - pattern: "($VAR_NAME: String).equals(...)"
    - pattern: "($OTHER: $STRING).equals(($VAR_NAME: String))"
    - pattern: 'java.util.Arrays.equals(...,($VAR_NAME: String),...)'
    - pattern: "($VAR_NAME: Array[byte]).equals(...)"
    - pattern: "($OTHER: Array[byte]).equals(($VAR_NAME: Array[byte]))"
    - pattern: 'java.util.Arrays.equals(...,($VAR_NAME: Array[byte]),...)'
    - pattern: 'java.lang.Byte.comapre(...,($VAR_NAME: Array[byte]),...)'
    - pattern: "($VAR_NAME: Array[char]).equals(...)"
    - pattern: "($OTHER: Array[char]).equals(($VAR_NAME: Array[char]))"
    - pattern: 'java.util.Arrays.equals(...,($VAR_NAME: Array[char]),...)'
  - metavariable-regex:
      metavariable: "$VAR_NAME"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - scala
- id: "../sast-rules/scala/password/rule-HardcodeKeySuspiciousName.yml"
  patterns:
  - pattern-either:
    - pattern: val $VAR = Array[Byte](...)
    - pattern: val $VAR = Array[char](...)
    - pattern: var $VAR = Array[Byte](...)
    - pattern: var $VAR = Array[char](...)
    - pattern: var $VAR = Array(...)
    - pattern: val $VAR = Array(...)
  - metavariable-regex:
      metavariable: "$VAR"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - scala
- id: "../sast-rules/scala/password/rule-HardcodeKeySuspiciousValue.yml"
  patterns:
  - pattern-either:
    - pattern: val $VAR = "$VAL"
    - pattern: var $VAR = "$VAL"
  - metavariable-regex:
      metavariable: "$VAL"
      regex: "(?i).*(password|motdepasse|heslo|adgangskode|wachtwoord|salasana|passwort|passord|senha|geslo|clave|losenord|clave|parola|secret|pwd).*"
  message: |
    Cryptographic keys should not be kept in the source code. The source code can be widely shared
    in an enterprise environment, and is certainly shared in open source. To be managed safely,
    passwords and secret keys should be stored in separate configuration files or keystores.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-321: Use of Hard-coded Cryptographic Key'
    technology:
    - scala
- id: "../sast-rules/scala/password/rule-HardcodePassword.yml"
  patterns:
  - pattern-either:
    - pattern: '($KS: java.security.KeyStore).load(..., "...")'
    - pattern: '($KS: java.security.KeyStore).load(..., "...".$FOO(...))'
    - pattern: "($KS: java.security.KeyStore).load(..., $PWD)"
    - pattern: "($KS: java.security.KeyStore).load(..., $PWD.$FOO(...))"
    - pattern: KeyManagerFactory.getInstance(...).init(..., $PWD)
    - pattern: KeyManagerFactory.getInstance(...).init(..., $PWD.$FOO(...))
    - pattern: KeyManagerFactory.getInstance(...).init(..., "...")
    - pattern: KeyManagerFactory.getInstance(...).init(..., "...".$FOO(...))
    - pattern: '($KS: java.security.KeyStore).getInstance(...).load(..., "...")'
    - pattern: '($KS: java.security.KeyStore).getInstance(...).load(..., "...".$FOO(...))'
    - pattern: "($KS: java.security.KeyStore).getInstance(...).load(..., $PWD)"
    - pattern: "($KS: java.security.KeyStore).getInstance(...).load(..., $PWD.$FOO(...))"
    - pattern: KeyStore.getInstance(...).load(..., "...")
    - pattern: KeyStore.getInstance(...).load(..., "...".$FOO(...))
    - pattern: KeyStore.getInstance(...).load(..., $PWD)
    - pattern: KeyStore.getInstance(...).load(..., $PWD.$FOO(...))
    - pattern: new PBEKeySpec("...", ...)
    - pattern: new PBEKeySpec("...".$FOO(...), ...)
    - pattern: new PBEKeySpec($PWD, ...)
    - pattern: new PBEKeySpec($PWD.$FOO(...), ...)
    - pattern: new PasswordAuthentication("...", "...")
    - pattern: new PasswordAuthentication("...", "...".$FOO(...))
    - pattern: new PasswordAuthentication("...", $PWD)
    - pattern: new PasswordAuthentication("...", $PWD.$FOO(...))
    - pattern: '($CB: PasswordCallback).setPassword("...")'
    - pattern: '($CB: PasswordCallback).setPassword("...".$FOO(...))'
    - pattern: "($CB: PasswordCallback).setPassword($PWD)"
    - pattern: "($CB: PasswordCallback).setPassword($PWD.$FOO(...))"
    - pattern: new KeyStore.PasswordProtection("...")
    - pattern: new KeyStore.PasswordProtection("...".$FOO(...))
    - pattern: new KeyStore.PasswordProtection($PWD)
    - pattern: new KeyStore.PasswordProtection($PWD.$FOO(...))
    - pattern: new KerberosKey(...,"...",...)
    - pattern: new KerberosKey(...,"...".$FOO(...),...)
    - pattern: new KerberosKey(...,$PWD,...)
    - pattern: new KerberosKey(...,$PWD.$FOO(...),...)
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD)"
    - pattern: '($KMF: javax.net.ssl.KeyManagerFactory).init(..., "...")'
    - pattern: '($KMF: javax.net.ssl.KeyManagerFactory).init(..., "...".$FOO(...))'
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD.$FOO(...))"
    - pattern: '($DM: java.sql.DriverManager).getConnection(..., "...")'
    - pattern: '($DM: java.sql.DriverManager).getConnection(..., "...".$FOO(...))'
    - pattern: "($DM: java.sql.DriverManager).getConnection(..., $PWD)"
    - pattern: "($DM: java.sql.DriverManager).getConnection(..., $PWD.$FOO(...))"
    - pattern: '($KMF: javax.net.ssl.KeyManagerFactory).init(..., "...")'
    - pattern: '($KMF: javax.net.ssl.KeyManagerFactory).init(..., "...".$FOO(...))'
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD)"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., $PWD.$FOO(...))"
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., "...")
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., "...".$FOO(...))
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD)
    - pattern: io.vertx.ext.web.handler.CSRFHandler.create(..., $PWD.$FOO(...))
    - pattern: "$S.setPassword($PWD)"
    - pattern: "$S.setPassword($PWD.$FOO(...))"
    - pattern: $S.setPassword("...")
  - metavariable-regex:
      metavariable: "$PWD"
      regex: "(?i).*(pass|pwd|psw|secret|key|cipher|crypt|des|aes|mac|private|sign|cert).*"
  message: |
    Passwords should not be kept in the source code. The source code can be widely shared in an
    enterprise environment, and is certainly shared in open source. To be managed safely, passwords
    and secret keys should be stored in separate configuration files or keystores.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-259: Use of Hard-coded Password'
    technology:
    - scala
- id: "../sast-rules/scala/perm/rule-DangerousPermissions.yml"
  pattern-either:
  - pattern: |
      $RUNVAR = new RuntimePermission("createClassLoader");
      ...
      ($PC: PermissionCollection).add($RUNVAR);
  - pattern: |
      $REFVAR = new ReflectPermission("suppressAccessChecks");
      ...
      ($PC: PermissionCollection).add($REFVAR);
  - pattern: '($PC: PermissionCollection).add(new ReflectPermission ("suppressAccessChecks"))'
  - pattern: '($PC: PermissionCollection).add(new RuntimePermission("createClassLoader"))'
  languages:
  - scala
  message: 'Do not grant dangerous combinations of permissions.

    '
  metadata:
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/scala/perm/rule-OverlyPermissiveFilePermissionInline.yml"
  patterns:
  - pattern-either:
    - pattern: java.nio.file.Files.setPosixFilePermissions(..., java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING"));
    - pattern: |
        $PERMISSIONS = java.nio.file.attribute.PosixFilePermissions.fromString("$PERM_STRING");
        ...
        java.nio.file.Files.setPosixFilePermissions(..., $PERMISSIONS);
  - metavariable-regex:
      metavariable: "$PERM_STRING"
      regex: "[rwx-]{6}[rwx]{1,}"
  languages:
  - scala
  message: 'Overly permissive file permission

    '
  metadata:
    cwe: 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/scala/perm/rule-OverlyPermissiveFilePermissionObj.yml"
  patterns:
  - pattern-inside: |
      ...
      java.nio.file.Files.setPosixFilePermissions(..., $PERMS);
  - pattern-either:
    - pattern: "$PERMS.add($P);"
    - pattern: "$A = $B + $P;"
  - metavariable-regex:
      metavariable: "$P"
      regex: "(PosixFilePermission.){0,1}(OTHERS_)"
  languages:
  - scala
  message: 'Overly permissive file permission

    '
  metadata:
    cwe: 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/scala/random/rule-PseudoRandom.yml"
  patterns:
  - pattern-either:
    - pattern: scala.util.Random.$METHOD
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "^(next)"
  message: |
    The use of a predictable random value can lead to vulnerabilities when used in certain security
    critical contexts. A quick fix could be to replace the use of scala.util.Random with something
    stronger, such as java.security.SecureRandom
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-330: Use of Insufficiently Random Values'
    technology:
    - scala
- id: "../sast-rules/scala/script/rule-ScriptInjection.yml"
  patterns:
  - pattern: "($ENGINE: javax.script.ScriptEngine).eval($ARG)"
  - pattern-not: '($ENGINE: javax.script.ScriptEngine).eval("...")'
  message: |
    The software constructs all or part of a code segment using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly
    neutralizes special elements that could modify the syntax or behavior of the
    intended code segment.
  languages:
  - scala
  severity: ERROR
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
- id: "../sast-rules/scala/script/rule-SpelView.yml"
  patterns:
  - pattern: "($P: org.springframework.expression.spel.standard.SpelExpressionParser).parseExpression($ARG);"
  - pattern-not: '($P: org.springframework.expression.spel.standard.SpelExpressionParser
      ).parseExpression("...");'
  message: |
    The software constructs all or part of a code segment using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly
    neutralizes special elements that could modify the syntax or behavior of the
    intended code segment.
  languages:
  - scala
  severity: ERROR
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
- id: "../sast-rules/scala/smtp/rule-InsecureSmtp.yml"
  patterns:
  - pattern-either:
    - pattern-inside: |
        $E = new org.apache.commons.mail.SimpleEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.Email(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.MultiPartEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.HtmlEmail(...);
        ...
    - pattern-inside: |
        $E = new org.apache.commons.mail.ImageHtmlEmail(...);
        ...
  - pattern-not: |
      $E.setSSLOnConnect(true);
      ...
      $E.setSSLCheckServerIdentity(true);
  message: 'Server identity verification is disabled when making SSL connections.

    '
  metadata:
    cwe: 'CWE-297: Improper Validation of Certificate with Host Mismatch'
  severity: ERROR
  languages:
  - scala
- id: "../sast-rules/scala/smtp/rule-SmtpClient.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setSubject($ARG);"
      - pattern-not: $M.setSubject("...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.addHeader($ARG1, $ARG2)"
      - pattern-not: $M.addHeader("...", "...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setDescription($ARG)"
      - pattern-not: $M.setDescription("...")
    - patterns:
      - pattern-inside: |
          $M = new MimeMessage(...);
          ...
      - pattern: "$M.setDisposition($ARG)"
      - pattern-not: $M.setDisposition("...")
  languages:
  - scala
  message: |
    Simple Mail Transfer Protocol (SMTP) is a the text based protocol used for
    email delivery. Like with HTTP, headers are separate by new line separator. If
    kuser input is place in a header line, the application should remove or replace
    new line characters (CR / LF). You should use a safe wrapper such as Apache
    Common Email and Simple Java Mail which filter special characters that can lead
    to header injection.
  metadata:
    category: security
    cwe: 'CWE-77: Improper Neutralization of Special Elements used in a Command'
  severity: ERROR
- id: "../sast-rules/scala/ssrf/rule-SSRF.yml"
  pattern-either:
  - patterns:
    - pattern: new URL(...). ... .connect
    - pattern-not: new URL("..."). ... .connect
  - patterns:
    - pattern: new URL(...). ... .GetContent
    - pattern-not: new URL("..."). ... .GetContent
  - patterns:
    - pattern: new URL(...). ... .openConnection
    - pattern-not: new URL("..."). ... .openConnection
  - patterns:
    - pattern: new URL(...). ... .openStream
    - pattern-not: new URL("..."). ... .openStream
  - patterns:
    - pattern: new URL(...). ... .getContent
    - pattern-not: new URL("..."). ... .getContent
  languages:
  - scala
  message: |
    Server-Side Request Forgery occur when a web server executes a request to a user supplied
    destination parameter that is not validated. Such vulnerabilities could allow an attacker to
    access internal services or to launch attacks from your web server.
  metadata:
    category: security
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
- id: "../sast-rules/scala/strings/rule-BadHexConversion.yml"
  pattern-either:
  - pattern: |
      $B_ARR = ($MD: java.security.MessageDigest).digest(...);
      ...
      for(...) {
        ...
        Integer.toHexString(...);
      }
  - pattern: |
      $B_ARR = ($MD: java.security.MessageDigest).digest(...);
      ...
      while(...) {
        ...
        Integer.toHexString(...);
      }
  languages:
  - scala
  message: |
    When converting a byte array containing a hash signature to a human readable string, a
    conversion mistake can be made if the array is read byte by byte.
  metadata:
    cwe: 'CWE-704: Incorrect Type Conversion or Cast'
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/scala/strings/rule-FormatStringManipulation.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          val $INPUT = ($REQ: HttpServletRequest).getParameter(...);
          ...
      - pattern-inside: |
          val $FORMAT_STR = ... + $INPUT;
          ...
    - patterns:
      - pattern-inside: |
          val $INPUT = ($REQ: HttpServletRequest).getParameter(...);
          ...
      - pattern-inside: |
          val $FORMAT_STR = ... + $INPUT + ...;
          ...
    - pattern-inside: 'val $FORMAT_STR = ... + ($REQ: HttpServletRequest).getParameter(...)
        + ...; ...

        '
    - pattern-inside: 'val $FORMAT_STR = ... + ($REQ: HttpServletRequest).getParameter(...);
        ...

        '
  - pattern-either:
    - pattern: String.format($FORMAT_STR, ...);
    - pattern: String.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
    - pattern: "($F: java.util.Formatter).format($FORMAT_STR, ...);"
    - pattern: "($F: java.util.Formatter).format(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: "($F: java.io.PrintStream).printf($FORMAT_STR, ...);"
    - pattern: "($F: java.io.PrintStream).printf(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: "($F: java.io.PrintStream).format($FORMAT_STR, ...);"
    - pattern: "($F: java.io.PrintStream).format(java.util.Locale.$LOCALE, $FORMAT_STR,
        ...);"
    - pattern: System.out.printf($FORMAT_STR, ...);
    - pattern: System.out.printf(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
    - pattern: System.out.format($FORMAT_STR, ...);
    - pattern: System.out.format(java.util.Locale.$LOCALE, $FORMAT_STR, ...);
  languages:
  - scala
  message: |
    Allowing user input to control format parameters could enable an attacker to cause exceptions
    to be thrown or leak information.Attackers may be able  to modify the format string argument,
    such that an exception is thrown. If this exception is left uncaught, it may crash the
    application. Alternatively, if sensitive information is used within the unused arguments,
    attackers may change the format string to reveal this information.
  metadata:
    cwe: 'CWE-134: Use of Externally-Controlled Format String'
    category: security
    confidence: HIGH
  severity: ERROR
- id: "../sast-rules/scala/strings/rule-ImproperUnicode.yml"
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: |
          $S = ($INPUT: String).$TRANSFORM(...);
          ...
          $S.$METHOD(...);
      - pattern: "($INPUT: String).$TRANSFORM().$METHOD(...);"
    - metavariable-regex:
        metavariable: "$METHOD"
        regex: "(equals|equalsIgnoreCase|indexOf)"
    - metavariable-regex:
        metavariable: "$TRANSFORM"
        regex: "(toLowerCase|toUpperCase)"
  - pattern: java.text.Normalizer.normalize(...);
  - pattern: java.net.IDN.toASCII(...);
  - pattern: "($U: URI).toASCIIString()"
  languages:
  - scala
  message: 'Improper Handling of Unicode Encoding

    '
  metadata:
    cwe: 'CWE-176: Improper Handling of Unicode Encoding'
    category: security
    confidence: HIGH
  severity: ERROR
- id: "../sast-rules/scala/strings/rule-ModifyAfterValidation.yml"
  patterns:
  - pattern: |
      $Y.matcher($VAR);
      ...
      $VAR.$METHOD(...);
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(replace)"
  languages:
  - scala
  message: 'CERT: IDS11-J. Perform any string modifications before validation

    '
  metadata:
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/scala/strings/rule-NormalizeAfterValidation.yml"
  patterns:
  - pattern: |
      $Y = java.util.regex.Pattern.compile("[<>]");
      ...
      $Y.matcher($VAR);
      ...
      java.text.Normalizer.normalize($VAR, ...);
  languages:
  - scala
  message: 'IDS01-J. Normalize strings before validating them

    '
  metadata:
    category: security
    confidence: HIGH
  severity: WARNING
- id: "../sast-rules/scala/templateinjection/rule-TemplateInjection.yml"
  pattern-either:
  - patterns:
    - pattern: org.apache.velocity.app.Velocity.evaluate(..., $VAR)
    - pattern-not: org.apache.velocity.app.Velocity.evaluate(..., "...")
  - patterns:
    - pattern-not-inside: |
        $C = ($CFG: freemarker.template.Configuration).getTemplate("...");
        ...
    - pattern-inside: |
        $C = ($CFG: freemarker.template.Configuration).getTemplate($IN);
        ...
    - pattern: "$C.process(...)"
  - patterns:
    - pattern-inside: |
        import com.mitchellbosecke.pebble.PebbleEngine;
        ...
    - pattern-inside: |
        $C = $T.getTemplate($IN);
        ...
    - pattern-not-inside: |
        $C = $T.getTemplate("...");
        ...
    - pattern: "$C.evaluate(...)"
  languages:
  - scala
  message: |
    A malicious user in control of a template can run malicious code on the
    server-side. Velocity templates should be seen as scripts.
  metadata:
    category: security
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
  severity: ERROR
- id: "../sast-rules/scala/unsafe/rule-ExternalConfigControl.yml"
  patterns:
  - pattern: |
      $TAINTED = ($REQ: HttpServletRequest).getParameter(...);
      ...
      ($CONN: java.sql.Connection).setCatalog($TAINTED);
  message: |
    Allowing external control of system settings can disrupt service or cause an application to
    behave in unexpected, and potentially malicious ways. An attacker could cause an error by
    providing a nonexistent catalog name or connect to an unauthorized portion of the database.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-15: External Control of System or Configuration Setting'
    technology:
    - scala
- id: "../sast-rules/scala/unsafe/rule-InformationExposure.yml"
  patterns:
  - pattern: "$E.printStackTrace(...)"
  message: |
    The sensitive information may be valuable information on its own (such as a password), or it
    may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use
    error information provided by the server to launch another more focused attack. For example, an
    attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the
    installed application.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-209: Information Exposure Through an Error Message'
    technology:
    - scala
- id: "../sast-rules/scala/unsafe/rule-InformationExposureVariant2.yml"
  patterns:
  - pattern-either:
    - pattern: "$E.printStackTrace($OUT)"
  - metavariable-pattern:
      metavariable: "$OUT"
      pattern-either:
      - pattern: "($PS: java.io.PrintStream)"
      - pattern: "($PW: java.io.PrintWriter)"
      - pattern: java.lang.System.out
      - pattern: "($O: java.io.OutputStream)"
      - pattern: "($SOS: javax.servlet.ServletOutputStream)"
  message: |
    The sensitive information may be valuable information on its own (such as a password), or it
    may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use
    error information provided by the server to launch another more focused attack. For example, an
    attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the
    installed application.
  languages:
  - scala
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-209: Information Exposure Through an Error Message'
    technology:
    - scala
- id: "../sast-rules/scala/xml/rule-ApacheXmlRpc.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          val $VAR = new XmlRpcServerConfigImpl();
          ...
      - pattern: "$VAR.setEnabledForExtensions(true);"
    - patterns:
      - pattern-inside: |
          val $VAR = new org.apache.xmlrpc.client.XmlRpcClientConfigImpl();
          ...
      - pattern: "$VAR.setEnabledForExtensions(true);"
  languages:
  - scala
  message: |
    Enabling extensions in Apache XML RPC server or client can lead to deserialization
    vulnerability which would allow an attacker to execute arbitrary code.
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
  severity: WARNING
- id: "../sast-rules/scala/xml/rule-SAMLIgnoreComments.yml"
  pattern: "($POOL: BasicParserPool).setIgnoreComments(false);"
  languages:
  - scala
  message: 'Ignoring XML comments in SAML may lead to authentication bypass

    '
  metadata:
    cwe: 'CWE-287: Improper Authentication'
    category: security
  severity: WARNING
- id: "../sast-rules/scala/xml/rule-XmlDecoder.yml"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          val $D = new XMLDecoder($IN);
          ...
      - pattern-not-inside: |
          val $D = new XMLDecoder("...");
          ...
      - pattern-either:
        - pattern: val $R = $D.readObject()
        - pattern: val $R = $D.readObject
  languages:
  - scala
  message: 'Avoid using XMLDecoder to parse content from an untrusted source.

    '
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
  severity: WARNING
- id: "../sast-rules/scala/xml/rule-XsltTransform.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $FUNC(...,String $VAR, ...) {
              ...
            }
        - pattern-either:
          - pattern: new FileInputStream(<... $VAR ...>);
          - pattern: getClass.getResourceAsStream(<... $VAR ...>)
      - patterns:
        - pattern-inside: |
            class $CLZ {
              String $X = "...";
              ...
            }
        - pattern-inside: |
            $FUNC(...,String $Y, ...) {
              ...
            }
        - pattern-either:
          - pattern: new FileInputStream($X + $Y);
          - pattern: getClass.getResourceAsStream($X + $Y)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: "(javax.xml.transform.TransformerFactory $T).newTransformer($SRC,
          ...)"
      - pattern-inside: "(javax.xml.transform.Transformer $T).transform($SRC, ...)"
    - pattern: "$SRC"
  languages:
  - java
  message: |
    It is possible to attach malicious behavior to those style sheets. Therefore, if an attacker
    can control the content or the source of the style sheet, he might be able to trigger remote
    code execution.
  metadata:
    cwe": 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    category: security
  severity: WARNING
- id: "../sast-rules/scala/xpathi/rule-XpathInjection.yml"
  patterns:
  - pattern-either:
    - pattern-inside: import javax.xml.xpath._; ...
    - pattern-inside: import javax.xml.xpath.Xpath; ...
  - pattern-either:
    - patterns:
      - pattern: "($X: XPath).compile($ARG)"
      - pattern-not: '($X: XPath).compile("...")'
    - patterns:
      - pattern: "($X: XPath).evaluate($ARG, $ARG2)"
      - pattern-not: '($X: XPath).evaluate("...")'
  languages:
  - scala
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/scala/xss/rule-RequestWrapper.yml"
  patterns:
  - pattern-inside: |
      class $CLASS(...) extends HttpServletRequestWrapper(...) {
      ...
      }
  - pattern: def stripXSS(...) = { ... }
  languages:
  - scala
  message: 'Avoid using custom XSS filtering. Please use standard sanitization functions.

    '
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
  severity: INFO
- id: "../sast-rules/scala/xss/rule-WicketXSS.yml"
  patterns:
  - pattern: "($X: Label).setEscapeModelStrings(false);"
  languages:
  - scala
  message: 'Disabling HTML escaping put the application at risk for Cross-Site Scripting
    (XSS).

    '
  metadata:
    category: security
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
  severity: WARNING
- id: "../sast-rules/scala/xss/rule-XSSReqParamToServletWriter.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: 'def $FUNC(..., $REQ: HttpServletRequest, ...): $TYPE = {...}'
    - pattern: "$REQ.getParameter(...);"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: Encode.forHtml($TAINTED);
    - pattern: "$TAINTED"
  pattern-sinks:
  - patterns:
    - pattern-inside: 'def $FUNC(..., $RES: HttpServletResponse, ...): $TYPE = {...}'
    - pattern-inside: |
        $WRITER = $RES.getWriter;
        ...
    - pattern: "$WRITER.write($DATA,...);"
    - pattern: "$DATA"
  - patterns:
    - pattern-inside: 'def $FUNC(..., $RES: HttpServletResponse, ...): $TYPE = {...}'
    - pattern: "$RES.getWriter.write($DATA,...);"
    - pattern: "$DATA"
  message: 'Servlet reflected cross site scripting vulnerability

    '
  languages:
  - scala
  severity: WARNING
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation'
    category: security
    technology:
    - scala
- id: "../sast-rules/scala/xss/rule-XSSServlet.yml"
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: 'def $FUNC(..., $REQ: HttpServletRequest, ...): $TYPE = {...}'
    - pattern: "$REQ.getParameter(...);"
  pattern-sanitizers:
  - patterns:
    - pattern-inside: org.owasp.encoder.Encode.forHtml($TAINTED);
    - pattern: "$TAINTED"
  pattern-sinks:
  - patterns:
    - pattern-inside: 'def $FUNC(..., $RES: HttpServletResponse, ...): $TYPE = {...}'
    - pattern-inside: |
        $WRITER = $RES.getWriter;
        ...
    - pattern: "$WRITER.write($DATA,...);"
    - pattern: "$DATA"
  - patterns:
    - pattern-inside: 'def $FUNC(..., $RES: HttpServletResponse, ...): $TYPE = {...}'
    - pattern: "$RES.getWriter.write($DATA,...);"
    - pattern: "$DATA"
  message: |
    A potential XSS was found. It could be used to execute unwanted JavaScript in a
    client's browser.
  languages:
  - scala
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    category: security
  severity: WARNING
- id: "../sast-rules/scala/xss/rule-XSSServletParameter.yml"
  pattern-either:
  - patterns:
    - pattern-inside: "def $FUNC(..., $REQ: ServletRequest, ...) : $TYPE = {\n  ...
        \n}\n"
    - pattern-either:
      - pattern: "$REQ.getParameter(...)"
      - pattern: "$REQ.getParameterValues"
      - pattern: "$REQ.getParameterMap(...)"
      - pattern: "$REQ.getParameterNames"
  - patterns:
    - pattern-inside: "def $FUNC(..., $SREQ: HttpServletRequest, ...) : $TYPE = {\n
        \ ... \n}\n"
    - pattern-either:
      - pattern: "$SREQ.getRequestedSessionId"
      - pattern: "$SREQ.getQueryString"
      - pattern: "$SREQ.getParameter(...)"
      - pattern: "$SREQ.getParameterValues"
      - pattern: "$SREQ.getParameterMap(...)"
      - pattern: "$SREQ.getParameterNames"
      - patterns:
        - pattern: "$SREQ.getHeader($HEADER)"
        - metavariable-regex:
            metavariable: "$HEADER"
            regex: "(?i)(Host|Referer|User-Agent)"
  message: |
    The Servlet can read GET and POST parameters from various methods. The value obtained should be
    considered unsafe. You may need to validate or sanitize those values before passing them to
    sensitive APIs
  languages:
  - scala
  severity: WARNING
  metadata:
    cwe: 'CWE-20: Improper Input Validation'
    category: security
    technology:
    - scala
- id: "../sast-rules/scala/xxe/rule-Document.yml"
  patterns:
  - pattern-inside: |
      $DF = DocumentBuilderFactory.newInstance
      ...
  - pattern-not-inside: |
      $DF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
  - pattern-not-inside: |
      $DF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
  - pattern: "$DB.parse(...)"
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/scala/xxe/rule-SaxParserXXE.yml"
  patterns:
  - pattern-inside: |
      val $SF = SAXParserFactory.newInstance
      ...
  - pattern-not-inside: |
      $SF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
  - pattern-not-inside: |
      $SF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
  - pattern-inside: |
      val $P = $SFP.newSAXParser
      ...
  - pattern: "$P.parse(...);"
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/scala/xxe/rule-Trans.yml"
  patterns:
  - pattern-inside: import javax.xml.transform._; ...
  - pattern-inside: |
      val $T = $FACT.newTransformer;
      ...
  - pattern-not-inside: |
      $T.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      ...
  - pattern-not-inside: |
      $T.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
      ...
  - pattern-not-inside: |
      $T.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
  - pattern: "$T.transform(...)"
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/scala/xxe/rule-XMLRdr.yml"
  patterns:
  - pattern-inside: |
      val $R = XMLReaderFactory.createXMLReader
      ...
  - pattern-not-inside: |
      $R.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
  - pattern: "$R.parse(...)"
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/scala/xxe/rule-XMLStreamRdr.yml"
  patterns:
  - pattern-inside: |
      $SF = XMLInputFactory.newFactory
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.SUPPORT_DTD, false)
      ...
  - pattern-not-inside: |
      $SF.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false)
      ...
  - pattern: "$SF.createXMLStreamReader(...)"
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
- id: "../sast-rules/scala/xxe/rule-XPathXXE.yml"
  patterns:
  - pattern-inside: |
      val $DF = DocumentBuilderFactory.newInstance
      ...
  - pattern-not-inside: |
      $DF.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")
      ...
  - pattern-not-inside: |
      $DF.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "")
      ...
  - pattern-not-inside: |
      $DF.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
  - pattern-not-inside: |
      $DF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
  - pattern-either:
    - pattern: "$DF.newDocumentBuilder(...)"
    - pattern: "$DF.newDocumentBuilder"
  languages:
  - scala
  message: |
    XML External Entity (XXE) attacks can occur when an XML parser supports XML
    entities while processing XML received from an untrusted source.
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference (''XXE'')'
  severity: ERROR
