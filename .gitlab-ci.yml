stages:
  - prepare
  - verify
  - gapanalysis
  - bump
  - package

# make sure the rules adhere to our quality guidelines
yamllint-quality:
  image: python:2.7
  stage: verify 
  before_script:
    - pip install yamllint
  script:
    - yamllint .
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - when: always

rulecheck-quality:
  stage: verify 
  image: ruby:3-alpine
  before_script:
    - apk add --no-cache yaml-dev alpine-sdk bash
    - gem install psych yaml fileutils json-schema
  script:
    - ./ci/schema.rb .
    - ./ci/format.rb
    - ./ci/license_header.sh
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - when: always

mapping-check:
  stage: verify 
  image: ruby:3-alpine
  before_script:
    - apk add --no-cache yaml-dev alpine-sdk
    - gem install yaml
  script:
    - ./ci/mappings.rb
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - when: always

# make sure that every rule has an associated test-case
rulecheck-availability:
  stage: verify 
  image: ruby:3-alpine
  before_script:
    - apk add --no-cache yaml-dev alpine-sdk
    - gem install psych yaml fileutils
  script:
    - ./ci/availability.rb
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - when: always

assemble:
  image: ruby:3-alpine
  stage: prepare
  before_script:
    - apk add --no-cache yaml-dev alpine-sdk bash
    - gem install psych yaml fileutils
  script:
    - ./ci/join.rb
  artifacts:
    paths:
      - "combined.yml"
  rules:
    - when: always

semgrep-check:
  image: python:3
  stage: verify 
  needs:
    - job: assemble
      artifacts: true
  before_script:
    - pip install semgrep
  script:
    - ci/semgrep_validity_check.sh
  rules:
    - when: always

# Ensure all rule-ids are unique
unique-rule-id:
  stage: verify
  image: ruby:3-alpine
  before_script:
    - gem install yaml
  script:
    - ci/unique_ids.rb
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - when: always

gapanalysis:
  stage: gapanalysis
  variables:
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
  trigger:
    project: gitlab-org/secure/gsoc-sast-vulnerability-rules/rule-testing-framework/rule-testing
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - when: always
  resource_group: "sast-rules-$CI_COMMIT_REF_SLUG"

bump:
  image: registry.gitlab.com/julianthome/bumper:master-v1.0.7
  stage: bump
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    GIT_STRATEGY: none
  before_script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$BUMPER_SSH")
    - git clone git@gitlab.com:gitlab-org/secure/gsoc-sast-vulnerability-rules/playground/sast-rules.git
  script:
    - bump.rb -v "v" -c "CHANGELOG.md" -g "sast-rules" -n "bumper" -e "gitlab-bot@gitlab.com"
  resource_group: "sast-rules-$CI_COMMIT_REF_SLUG"

package:
  stage: package
  image: ruby:3-alpine
  before_script:
    - apk add --no-cache bash curl
  script:
    - ./ci/package.sh "$CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never
  resource_group: "sast-rules-$CI_COMMIT_REF_SLUG"

