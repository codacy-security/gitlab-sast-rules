stages:
  - prepare
  - verify
  - gapanalysis
  - tag

include:
  - project: 'gitlab-org/security-products/ci-templates'
    ref: 'master'
    file: '/includes-dev/upsert-git-tag.yml'

# make sure the rules adhere to our quality guidelines
yamllint-quality:
  image: python:2.7
  stage: verify
  before_script:
    - pip install yamllint
  script:
    - yamllint .
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

rulecheck-quality:
  stage: verify
  image: ruby:3-alpine
  before_script:
    - apk add --no-cache yaml-dev alpine-sdk bash
    - gem install psych yaml fileutils json-schema word_wrap
  script:
    - ./ci/schema.rb .
    - ./ci/format.rb
    - ./ci/license_header.sh
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

mapping-check:
  stage: verify
  image: ruby:3-alpine
  before_script:
    - apk add --no-cache yaml-dev alpine-sdk
    - gem install yaml
  script:
    - ./ci/mappings.rb
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

# make sure that every rule has an associated test-case
rulecheck-availability:
  stage: verify
  image: ruby:3-alpine
  before_script:
    - apk add --no-cache yaml-dev alpine-sdk
    - gem install psych yaml fileutils word_wrap
  script:
    - ./ci/availability.rb
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

check-rules-have-been-built:
  stage: verify
  image: ruby:3-alpine
  script:
    - apk update && apk add bash jq nodejs npm git
    - npm install -g changelog-parser
    - CHANGELOG_VERSION=$(changelog-parser | jq -r '.versions[0].title')
    - gem install word_wrap
    - ./ci/deploy.sh $CHANGELOG_VERSION
    - git diff --exit-code
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

assemble:
  image: ruby:3-alpine
  stage: prepare
  before_script:
    - apk add --no-cache yaml-dev alpine-sdk bash
    - gem install psych yaml fileutils word_wrap
  script:
    - ./ci/join.rb
  artifacts:
    paths:
      - "combined.yml"
  rules:
    - when: always

owasp-name-check:
  stage: verify
  script:
    - ./ci/update_owasp_names.rb
    - git diff --exit-code
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

semgrep-check:
  image: python:3
  stage: verify
  needs:
    - job: assemble
      artifacts: true
  before_script:
    - export VERSION=$(curl "https://gitlab.com/gitlab-org/security-products/analyzers/semgrep/-/raw/main/Dockerfile" | sed -n 's/ARG SCANNER_VERSION=\([^ ]*\)/\1/p')
    - echo "Installing semgrep version $VERSION"
    - pip install semgrep==$VERSION
  script:
    - ci/semgrep_validity_check.sh
  rules:
    - when: always

# Ensure all rule-ids are unique
unique-rule-id:
  stage: verify
  image: ruby:3-alpine
  before_script:
    - gem install yaml
  script:
    - ci/unique_ids.rb
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

gapanalysis:
  stage: gapanalysis
  variables:
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
  trigger:
    project: gitlab-org/security-products/sast-rule-testing-framework/rule-testing
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  resource_group: "sast-rules-$CI_COMMIT_REF_SLUG"
