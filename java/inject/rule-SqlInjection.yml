# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
- id: "java/inject/rule-SqlInjection"
  mode: "taint"
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $FUNC(..., String $Z, ...) {
          ...
        }
    - pattern: "$Z"
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: "(javax.jdo.PersistenceManager $PM).newQuery($ARG)"
      - pattern: "(javax.jdo.PersistenceManager $PM).newQuery(..., $ARG)"
      - pattern: "(javax.jdo.Query $Q).setFilter($ARG)"
      - pattern: "(javax.jdo.Query $Q).setGrouping($ARG)"
      - pattern: "(javax.jdo.Query $Q).setGrouping($ARG)"
      - pattern: "(org.hibernate.criterion.Restrictions $H).sqlRestriction($ARG, ...)"
      - pattern: "(org.hibernate.Session $S).createQuery($ARG, ...)"
      - pattern: "(org.hibernate.Session $S).createSQLQuery($ARG, ...)"
      - pattern: "(java.sql.Statement $S).executeQuery($ARG, ...)"
      - pattern: "(java.sql.Statement $S).execute($ARG, ...)"
      - pattern: "(java.sql.Statement $S).executeUpdate($ARG, ...)"
      - pattern: "(java.sql.Statement $S).executeLargeUpdate($ARG, ...)"
      - pattern: "(java.sql.Statement $S).addBatch($ARG, ...)"
      - pattern: "(java.sql.PreparedStatement $S).executeQuery($ARG, ...)"
      - pattern: "(java.sql.PreparedStatement $S).execute($ARG, ...)"
      - pattern: "(java.sql.PreparedStatement $S).executeUpdate($ARG, ...)"
      - pattern: "(java.sql.PreparedStatement $S).executeLargeUpdate($ARG, ...)"
      - pattern: "(java.sql.PreparedStatement $S).addBatch($ARG, ...)"
      - pattern: "(java.sql.Connection $S).prepareCall($ARG, ...)"
      - pattern: "(java.sql.Connection $S).prepareStatement($ARG, ...)"
      - pattern: "(java.sql.Connection $S).nativeSQL($ARG, ...)"
      - pattern: "new org.springframework.jdbc.core.PreparedStatementCreatorFactory($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.PreparedStatementCreatorFactory $F).newPreparedStatementCreator($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).batchUpdate($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).execute($ARG,
          ...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).query($ARG, ...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForList($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForMap($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForObject($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForRowSet($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForInt($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).queryForLong($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcOperations $O).udpate($ARG, ...)"
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).batchUpdate($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).execute($ARG, ...)"
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).query($ARG, ...)"
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForList($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForMap($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForObject($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForRowSet($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForInt($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).queryForLong($ARG,...)"
      - pattern: "(org.springframework.jdbc.core.JdbcTemplate $O).update($ARG, ...)"
      - pattern: "(io.vertx.sqlclient.SqlClient $O).query($ARG, ...)"
      - pattern: "(io.vertx.sqlclient.SqlClient $O).preparedQuery($ARG, ...)"
      - pattern: "(io.vertx.sqlclient.SqlConnection $O).prepare($ARG, ...)"
      - pattern: "(org.apache.turbine.om.peer.BasePeer $O).executeQuery($ARG, ...)"
      - pattern: "(org.apache.torque.util.BasePeer $O).executeQuery($ARG, ...)"
      - pattern: "(javax.persistence.EntityManager $O).createQuery($ARG, ...)"
      - pattern: "(javax.persistence.EntityManager $O).createNativeQuery($ARG, ...)"
    - pattern: "$ARG"
  languages:
  - "java"
  message: |
    The input values included in SQL queries need to be passed in safely. Bind
    variables in prepared statements can be used to easily mitigate the risk of
    SQL injection.
  metadata:
    category: "security"
    cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      ('SQL Injection')"
  severity: "ERROR"
