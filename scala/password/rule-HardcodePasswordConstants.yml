# yamllint disable
# License: MIT (c) GitLab Inc.
# This rule is similar to rule-HardcodePassword
# however it doesn't try to match the function argument $PWD
# instead this rule looks for string literals used directly as arguments
# yamllint enable
---
rules:
- id: "scala/password/rule-HardcodePasswordConstants"
  patterns:
  - pattern-either:
    - pattern: "($KS: java.security.KeyStore).load(..., \"...\")"
    - pattern: "($KS: java.security.KeyStore).load(..., \"...\".$FOO(...))"
    - pattern: "$KS.load(..., \"...\")"
    - pattern: "$KS.load(..., \"...\".$FOO(...))"
    - pattern: "$KS.load(..., \"...\".$FOO)"
    - pattern: "KeyManagerFactory.getInstance(...).init(..., \"...\")"
    - pattern: "KeyManagerFactory.getInstance(...).init(..., \"...\".$FOO(...))"
    - pattern: "($KS: java.security.KeyStore).getInstance(...).load(..., \"...\")"
    - pattern: "($KS: java.security.KeyStore).getInstance(...).load(..., \"...\".$FOO(...))"
    - pattern: "$KS.getInstance(...).load(..., \"...\")"
    - pattern: "$KS.getInstance(...).load(..., \"...\".$FOO(...))"
    - pattern: "KeyStore.getInstance(...).load(..., \"...\")"
    - pattern: "KeyStore.getInstance(...).load(..., \"...\".$FOO(...))"
    - pattern: "new PBEKeySpec(\"...\", ...)"
    - pattern: "new PBEKeySpec(\"...\".$FOO(...), ...)"
    - pattern: "new PasswordAuthentication(\"...\", \"...\")"
    - pattern: "new PasswordAuthentication(\"...\", \"...\".$FOO(...))"
    - pattern: "($CB: PasswordCallback).setPassword(\"...\")"
    - pattern: "($CB: PasswordCallback).setPassword(\"...\".$FOO(...))"
    - pattern: "$CB.setPassword(\"...\")"
    - pattern: "$CB.setPassword(\"...\".$FOO(...))"
    - pattern: "new KeyStore.PasswordProtection(\"...\")"
    - pattern: "new KeyStore.PasswordProtection(\"...\".$FOO(...))"
    - pattern: "new KerberosKey(...,\"...\",...)"
    - pattern: "new KerberosKey(...,\"...\".$FOO(...),...)"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., \"...\")"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., \"...\".$FOO(...))"
    - pattern: "($DM: java.sql.DriverManager).getConnection(..., \"...\")"
    - pattern: "($DM: java.sql.DriverManager).getConnection(..., \"...\".$FOO(...))"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., \"...\")"
    - pattern: "($KMF: javax.net.ssl.KeyManagerFactory).init(..., \"...\".$FOO(...))"
    - pattern: "$KMF.init(..., \"...\")"
    - pattern: "$KMF.init(..., \"...\".$FOO(...))"
    - pattern: "$DM.getConnection(..., \"...\")"
    - pattern: "$DM.getConnection(..., \"...\".$FOO(...))"
    - pattern: "$KMF.init(..., \"...\")"
    - pattern: "$KMF.init(..., \"...\".$FOO(...))"
    - pattern: "io.vertx.ext.web.handler.CSRFHandler.create(..., \"...\")"
    - pattern: "io.vertx.ext.web.handler.CSRFHandler.create(..., \"...\".$FOO(...))"
    - pattern: "$S.setPassword(\"...\")"
  - metavariable-regex:
      metavariable: "$KS"
      regex: "(?i).*(keyStore|ks|store).*"
  message: |
    Passwords should not be kept in the source code. The source code can be widely shared in an
    enterprise environment, and is certainly shared in open source. To be managed safely, passwords
    and secret keys should be stored in separate configuration files or keystores.
  languages:
  - "scala"
  severity: "ERROR"
  metadata:
    category: "security"
    cwe: "CWE-259: Use of Hard-coded Password"
    technology:
    - "scala"
