# yamllint disable
# License: LGPL 2.1 (GNU Lesser General Public License, Version 2.1)
# Licensor: Semgrep, Inc. (https://semgrep.dev)
# yamllint enable
---
rules:
- id: "python_crypto_rule-hashlib-new-insecure-functions"
  languages:
  - "python"
  message: |
    The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,
    MD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

    This means
    that two different values, when hashed, can lead to the same hash value. If the application is
    trying
    to use these hash methods for storing passwords, then it is recommended to switch to a
    password hashing
    algorithm such as Argon2id or PBKDF2.
    It is strongly recommended that a standard digest algorithm be chosen instead as implementing
    a custom algorithm is prone to errors.

    Example using `hashlib.sha384()` to create a SHA384 hash:
    ```
    import hashlib
    # Create a SHA384 digest
    digest = hashlib.sha384()
    # Update the digest with some initial data
    digest.update(b"some data to hash")
    # Add more data to the digest
    digest.update(b"some more data")
    # Finalize the digest as bytes
    digest.digest()
    ```
  metadata:
    cwe: "CWE-327"
    owasp: "A3:2017-Sensitive Data Exposure"
    category: "security"
    shortDescription: "Use of a broken or risky cryptographic algorithm"
    license: "Commons Clause License Condition v1.0[LGPL-2.1-only]"
  patterns:
  - pattern-either:
    - pattern: "hashlib.new(\"=~/[M|m][D|d][4|5]/\", ...)"
    - pattern: "hashlib.new(..., name=\"=~/[M|m][D|d][4|5]/\", ...)"
    - pattern: "hashlib.new('sha1')"
    - pattern: "hashlib.new(..., name='SHA1')"
    - pattern: "hashlib.new('sha', string='test')"
    - pattern: "hashlib.new(name='SHA', string='test')"
  severity: "WARNING"
