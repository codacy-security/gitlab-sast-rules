# yamllint disable
# License: LGPL 2.1 (GNU Lesser General Public License, Version 2.1)
# Licensor: Semgrep, Inc. (https://semgrep.dev)
# yamllint enable
---
rules:
  - id: "python_crypto_rule-hash-md5"
    languages:
      - "python"
    message: |
      The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,
       MD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.

      This means
      that two different values, when hashed, can lead to the same hash value. If the application is
      trying
      to use these hash methods for storing passwords, then it is recommended to switch to a
      password hashing
      algorithm such as Argon2id or PBKDF2.

      Note that the `Crypto` and `Cryptodome` Python packages are no longer recommended for
      new applications, instead consider using the [cryptography](https://cryptography.io/) package.

      Example of creating a SHA-384 hash using the `cryptography` package:
      ```
      from cryptography.hazmat.primitives import hashes
      # Create a SHA384 digest
      digest = hashes.Hash(hashes.SHA384())
      # Update the digest with some initial data
      digest.update(b"some data to hash")
      # Add more data to the digest
      digest.update(b"some more data")
      # Finalize the digest as bytes
      result = digest.finalize()
      ```

      For more information on secure password storage see OWASP:
      - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html

      For more information on the cryptography module see:
      - https://cryptography.io/en/latest/
    metadata:
      cwe: "CWE-327"
      owasp: "A3:2017-Sensitive Data Exposure"
      category: "security"
      shortDescription: "Use of a broken or risky cryptographic algorithm"
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    pattern: "hashlib.md5(...)"
    severity: "WARNING"
